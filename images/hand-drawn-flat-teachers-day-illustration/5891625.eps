%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: (Adobe Illustrator Artwork)
%%Creator: (Adobe Illustrator\(R\) 25.4)
%%For: ayib
%%CreationDate: 23/08/21
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.4.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.4.1 x498 R agm 4.7767 ct 6.0%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 7.0-c000 79.217bca6, 2021/06/14-18:28:11        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FP26 Flat Teachers' Day 2-01</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-08-23T18:41:02+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-08-23T18:41:02+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-08-23T18:41:02+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.4 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAvAC8AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAvAAAAAEA&#xA;AQC8AAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CAEAAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:82eead7c-1db1-44f2-ada2-2e516a3f9956</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:82eead7c-1db1-44f2-ada2-2e516a3f9956</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>default</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:f4d3c287-c3a5-5643-82be-73e5d78bfb4d</stRef:instanceID>
            <stRef:documentID>xmp.did:be88882c-058b-4f0d-bfe0-1a6bf766a5f6</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>default</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:82eead7c-1db1-44f2-ada2-2e516a3f9956</stEvt:instanceID>
                  <stEvt:when>2021-08-23T18:41:02+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.4 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <pdf:Producer>Adobe PDF library 16.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Montserrat-MediumItalic</stFnt:fontName>
                  <stFnt:fontFamily>Montserrat</stFnt:fontFamily>
                  <stFnt:fontFace>Medium Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 7.200;PS 007.200;hotconv 1.0.88;makeotf.lib2.5.64775</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Montserrat-MediumItalic.otf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Poppins-SemiBoldItalic</stFnt:fontName>
                  <stFnt:fontFamily>Poppins</stFnt:fontFamily>
                  <stFnt:fontFace>SemiBold Italic</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 3.200;PS 1.000;hotconv 16.6.54;makeotf.lib2.5.65590</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Poppins-SemiBoldItalic.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.976471 .901961 .772549 rgb
f
gsave
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
cp
clp
432.969 382.697 mo
67.0312 382.697 li
67.0312 117.303 li
432.969 117.303 li
432.969 382.697 li
cp
.843137 .74902 .596078 rgb
f
83.0313 366.696 mo
83.0313 133.303 li
416.969 133.303 li
416.969 366.696 li
83.0313 366.696 li
cp
.901961 .8 .639216 rgb
f
251.272 257.299 mo
251.654 258.413 251.602 259.626 251.477 260.797 cv
251.165 263.711 250.394 266.647 248.699 269.038 cv
247.254 271.076 245.222 272.61 243.224 274.111 cv
241.633 275.306 239.994 276.525 238.08 277.071 cv
235.965 277.676 232.258 277.713 230.193 276.848 cv
227.838 275.862 229.889 271.921 230.859 270.258 cv
233.685 265.415 240.189 263.899 243.508 259.379 cv
244.231 258.396 244.787 257.287 245.608 256.384 cv
246.43 255.481 247.625 254.786 248.829 254.988 cv
249.99 255.182 250.891 256.185 251.272 257.299 cv
cp
228.992 217.164 mo
228.847 215.129 230.389 201.136 234.438 206.363 cv
235.096 207.213 235.306 208.313 235.593 209.348 cv
236.107 211.203 236.923 212.965 237.415 214.825 cv
237.908 216.686 238.055 218.733 237.251 220.481 cv
236.446 222.23 234.482 223.539 232.607 223.104 cv
231.396 222.823 230.415 221.876 229.849 220.769 cv
229.282 219.662 229.081 218.405 228.992 217.164 cv
cp
245.32 237.16 mo
239.92 245.29 235.167 253.858 229.53 261.83 cv
227.497 264.67 225.253 267.543 222.141 269.154 cv
220.594 269.955 218.62 270.394 217.144 269.474 cv
216.552 269.101 216.081 268.556 215.739 267.948 cv
214.567 265.922 214.646 263.33 215.464 261.129 cv
216.282 258.929 217.748 257.028 219.276 255.256 cv
224.518 249.231 230.742 244.095 235.957 238.061 cv
242.228 230.781 246.954 222.205 249.789 213.024 cv
248.886 211.733 247.899 210.459 246.885 209.176 cv
236.96 196.787 228.824 189.088 221.723 184.256 cv
221.419 187.368 221.289 190.51 221.259 193.625 cv
221.229 196.877 221.28 200.111 221.36 203.355 cv
221.401 205.775 221.451 208.212 221.493 210.631 cv
221.543 213.114 221.593 215.598 221.368 218.079 cv
221.078 221.594 220.239 225.059 219.09 228.401 cv
217.969 231.615 216.529 234.735 214.888 237.725 cv
213.378 240.468 211.464 243.318 208.495 244.334 cv
205.462 245.359 201.955 244.108 199.852 241.715 cv
197.749 239.322 196.92 235.988 197.078 232.811 cv
197.254 229.624 198.337 226.565 199.656 223.664 cv
202.332 217.798 206.028 212.483 209.16 206.85 cv
212.273 201.226 214.887 195.094 215.076 188.665 cv
215.156 186.027 214.832 183.403 214.307 180.833 cv
214.255 180.539 214.184 180.255 214.114 179.97 cv
208.175 177.285 202.868 176.501 197.622 176.168 cv
194.948 176.015 191.384 175.953 187.354 175.87 cv
188.093 183.032 189.426 190.246 189.725 197.441 cv
189.854 200.273 189.79 203.176 188.921 205.88 cv
188.044 208.566 186.243 211.086 183.639 212.244 cv
182.176 212.89 180.407 213.047 178.993 212.301 cv
177.07 211.256 176.341 208.877 176.05 206.693 cv
175.206 200.061 176.781 193.342 179.021 187.051 cv
179.651 185.307 180.336 183.582 180.656 181.762 cv
181.014 179.786 180.968 177.779 180.923 175.772 cv
180.933 175.745 180.915 175.708 180.924 175.681 cv
166.197 175.166 148.786 173.591 145.065 165.97 cv
206.759 292.326 li
206.759 292.326 223.946 297.271 246.037 284.433 cv
264.563 273.677 268.662 248.081 256.033 223.289 cv
252.053 227.558 248.554 232.298 245.32 237.16 cv
cp
.843137 .74902 .596078 rgb
f
175.463 302.451 mo
175.671 303.519 175.591 304.63 175.328 305.686 cv
174.718 308.133 172.93 310.419 170.473 310.985 cv
169.364 311.24 168.194 311.135 167.097 310.833 cv
164.005 309.982 159.428 306.029 160.069 302.333 cv
160.682 298.804 167.389 297.17 170.291 297.055 cv
171.273 297.016 172.33 297.1 173.103 297.708 cv
173.681 298.162 174.02 298.848 174.341 299.51 cv
174.799 300.458 175.261 301.418 175.463 302.451 cv
cp
137.807 266.535 mo
138.061 267.343 138.104 268.384 137.412 268.872 cv
137.121 269.077 136.754 269.138 136.399 269.163 cv
133.433 269.376 130.766 267.548 127.99 266.481 cv
127.146 266.157 126.256 265.889 125.548 265.327 cv
124.569 264.549 124.078 263.326 123.628 262.159 cv
122.434 259.068 123.106 257.56 126.621 258.572 cv
128.917 259.233 131.228 259.948 133.271 261.187 cv
135.314 262.426 137.09 264.256 137.807 266.535 cv
cp
131.833 199.148 mo
132.423 199.795 133.049 200.378 133.713 200.943 cv
138.458 204.918 144.766 206.352 150.208 209.28 cv
151.521 209.962 152.814 210.789 153.719 211.989 cv
154.596 213.179 155.011 214.823 154.421 216.182 cv
154.018 217.131 153.178 217.838 152.33 218.435 cv
151.287 219.149 150.137 219.733 148.897 220.042 cv
147.565 220.35 146.146 220.291 144.783 220.068 cv
137.246 218.824 131.291 212.886 127.598 206.163 cv
127.561 206.226 127.533 206.263 127.496 206.327 cv
124.223 211.436 120.153 220.422 117.465 231.4 cv
125.282 237.978 135.849 240.616 146.09 241.748 cv
148.516 242 150.969 242.215 153.39 241.991 cv
155.535 241.809 157.657 241.298 159.81 241.318 cv
164.262 241.379 168.599 243.912 170.844 247.763 cv
171.475 248.822 171.949 250.027 171.846 251.263 cv
171.63 253.808 169.113 255.47 166.785 256.492 cv
160.612 259.164 153.54 260.041 147.137 258.038 cv
143.866 257.036 140.886 255.322 137.925 253.599 cv
130.754 249.418 123.621 245.081 116.86 240.244 cv
116.514 240.003 116.186 239.752 115.859 239.502 cv
114.175 249.967 114.001 261.656 116.869 273.273 cv
117.257 274.816 117.682 276.341 118.2 277.866 cv
120.917 278.249 123.713 278.047 126.455 277.779 cv
130.123 277.402 133.765 276.923 137.425 276.435 cv
143.691 275.587 149.984 274.749 156.25 273.901 cv
160.533 273.337 164.927 272.764 169.161 273.684 cv
173.385 274.585 177.473 277.308 178.836 281.407 cv
178.925 281.683 178.996 281.968 179.002 282.261 cv
179.006 282.829 178.708 283.339 178.392 283.812 cv
175.651 287.864 170.748 289.915 165.939 290.805 cv
158.147 292.215 150.095 291.086 142.39 289.217 cv
134.967 287.415 127.716 284.937 120.237 283.346 cv
130.21 307.087 153.26 326.608 173.441 320.083 cv
196.434 312.641 206.759 292.326 206.759 292.326 cv
145.065 165.97 li
146.934 169.799 139.368 186.099 131.833 199.148 cv
cp
.933333 .827451 .662745 rgb
f
222.58 238.724 mo
219.863 242.148 216.875 245.342 213.731 248.364 cv
210.52 251.315 207.215 254.163 203.679 256.708 cv
201.967 258.052 200.098 259.183 198.318 260.43 cv
197.012 261.275 195.68 262.077 194.349 262.881 cv
180.573 235.991 li
182.428 233.855 li
183.65 232.446 li
184.758 230.946 li
186.963 227.946 li
188.951 224.802 li
191.517 220.568 193.764 216.144 195.543 211.541 cv
197.36 206.956 198.853 202.251 200 197.467 cv
201.132 192.683 201.988 187.828 202.374 182.935 cv
201.818 187.811 200.795 192.619 199.504 197.34 cv
198.198 202.058 196.552 206.675 194.598 211.146 cv
192.682 215.636 190.313 219.917 187.654 223.978 cv
185.603 226.986 li
183.348 229.839 li
182.219 231.262 li
180.982 232.59 li
179.595 234.081 li
165.765 207.086 li
166.994 202.99 167.938 198.817 168.57 194.602 cv
169.21 190.296 169.6 185.947 169.542 181.602 cv
169.43 185.944 168.869 190.261 168.066 194.515 cv
167.335 198.348 166.336 202.123 165.114 205.816 cv
152.618 181.423 li
162.014 201.645 li
160.34 201.431 158.668 201.192 157.01 200.87 cv
155.073 200.502 153.152 200.046 151.251 199.512 cv
149.355 198.963 147.477 198.341 145.643 197.601 cv
143.815 196.853 142.006 196.03 140.326 194.978 cv
141.96 196.103 143.739 197.006 145.542 197.837 cv
147.352 198.659 149.213 199.366 151.1 200.001 cv
152.991 200.621 154.909 201.165 156.85 201.621 cv
158.723 202.07 160.619 202.42 162.521 202.737 cv
173.679 226.75 li
169.91 227.715 166.091 228.559 162.194 228.893 cv
157.92 229.386 153.591 229.409 149.286 229.117 cv
144.975 228.848 140.684 228.179 136.471 227.169 cv
132.259 226.161 128.102 224.844 124.153 223.024 cv
128.029 224.998 132.147 226.485 136.342 227.664 cv
140.539 228.847 144.842 229.693 149.195 230.137 cv
153.542 230.604 157.943 230.754 162.323 230.424 cv
166.442 230.231 170.508 229.488 174.544 228.611 cv
188.244 258.096 li
185.231 259.271 182.184 260.378 179.058 261.25 cv
175.4 262.341 171.668 263.197 167.905 263.89 cv
164.143 264.598 160.339 265.098 156.517 265.419 cv
152.695 265.738 148.852 265.898 145.01 265.743 cv
148.842 266.069 152.7 266.08 156.548 265.93 cv
160.398 265.778 164.246 265.446 168.068 264.902 cv
171.891 264.372 175.7 263.674 179.455 262.734 cv
182.713 261.978 185.907 260.974 189.079 259.893 cv
200.482 284.433 li
199.402 285.484 198.295 286.513 197.129 287.48 cv
195.473 288.892 193.748 290.231 191.964 291.495 cv
188.404 294.031 184.651 296.332 180.703 298.267 cv
184.792 296.643 188.736 294.63 192.526 292.351 cv
194.425 291.216 196.278 289.996 198.077 288.69 cv
199.185 287.907 200.253 287.068 201.305 286.204 cv
219.942 326.313 li
225.464 323.616 li
205.497 284.641 li
207.797 284.443 210.072 284.077 212.291 283.521 cv
215.446 282.725 218.526 281.633 221.363 280.101 cv
218.384 281.322 215.243 282.068 212.095 282.516 cv
209.599 282.866 207.083 282.974 204.592 282.874 cv
195.255 264.649 li
196.621 263.749 197.989 262.854 199.325 261.913 cv
201.085 260.576 202.929 259.359 204.613 257.928 cv
208.093 255.211 211.327 252.198 214.45 249.094 cv
217.506 245.919 220.39 242.583 222.988 239.034 cv
225.566 235.48 227.955 231.759 229.734 227.748 cv
227.801 231.685 225.279 235.293 222.58 238.724 cv
cp
.901961 .8 .639216 rgb
f
289.811 337.319 mo
308.855 331.232 348.147 335.662 362.431 321.673 cv
365.626 318.545 368.572 314.936 369.753 310.623 cv
370.934 306.31 369.974 301.169 366.466 298.396 cv
363.605 296.134 359.381 295.585 357.35 292.555 cv
355.649 290.017 356.175 286.476 357.848 283.919 cv
359.52 281.361 362.127 279.586 364.713 277.955 cv
371.097 273.93 378.032 270.13 382.112 263.78 cv
386.193 257.43 385.991 247.545 379.516 243.666 cv
375.723 241.394 370.381 241.427 367.841 237.809 cv
365.463 234.423 367.011 229.565 369.777 226.488 cv
372.541 223.411 376.302 221.403 379.276 218.528 cv
384.023 213.938 386.512 207.116 385.837 200.548 cv
385.162 193.98 381.337 187.807 375.757 184.279 cv
289.811 337.319 li
cp
.843137 .74902 .596078 rgb
f
289.811 337.319 mo
285.096 317.889 260.863 286.645 265.374 267.167 cv
266.383 262.81 267.93 258.417 270.999 255.164 cv
274.066 251.91 278.956 250.054 283.15 251.606 cv
286.571 252.872 289.238 256.193 292.881 256.35 cv
295.934 256.481 298.683 254.19 299.997 251.431 cv
301.31 248.671 301.47 245.52 301.516 242.464 cv
301.63 234.917 301.267 227.019 304.564 220.23 cv
307.862 213.44 316.407 208.468 323.091 211.978 cv
327.005 214.034 329.756 218.613 334.169 218.899 cv
338.297 219.167 341.639 215.316 342.828 211.353 cv
344.016 207.391 343.773 203.135 344.681 199.099 cv
346.13 192.658 350.659 186.982 356.618 184.139 cv
362.577 181.297 369.839 181.35 375.757 184.279 cv
289.811 337.319 li
cp
.933333 .827451 .662745 rgb
f
363.589 212.069 mo
381.834 206.177 li
382.087 206.096 382.225 205.825 382.144 205.573 cv
382.062 205.321 381.792 205.182 381.54 205.264 cv
363.295 211.155 li
363.042 211.237 362.904 211.508 362.985 211.76 cv
363.067 212.012 363.337 212.15 363.589 212.069 cv
f
358.118 209.449 mo
354.492 190.388 li
354.442 190.128 354.191 189.957 353.93 190.006 cv
353.67 190.056 353.499 190.307 353.549 190.567 cv
357.175 209.629 li
357.224 209.889 357.476 210.06 357.736 210.011 cv
357.996 209.961 358.167 209.71 358.118 209.449 cv
.843137 .74902 .596078 rgb
f
326.979 259.968 mo
316.331 221.97 li
316.259 221.715 315.994 221.566 315.739 221.638 cv
315.484 221.709 315.335 221.974 315.406 222.229 cv
326.055 260.227 li
326.126 260.482 326.391 260.631 326.646 260.559 cv
326.902 260.488 327.051 260.223 326.979 259.968 cv
f
304.384 306.238 mo
278.14 264.137 li
278 263.912 277.704 263.844 277.479 263.984 cv
277.254 264.124 277.185 264.42 277.326 264.645 cv
303.57 306.746 li
303.71 306.971 304.006 307.04 304.231 306.899 cv
304.456 306.759 304.524 306.463 304.384 306.238 cv
f
337.813 265.265 mo
378.548 254.733 li
378.805 254.667 378.959 254.405 378.893 254.149 cv
378.826 253.892 378.565 253.738 378.308 253.804 cv
337.573 264.336 li
337.317 264.402 337.162 264.664 337.229 264.921 cv
337.295 265.177 337.557 265.331 337.813 265.265 cv
.933333 .827451 .662745 rgb
f
310.791 311.528 mo
364.978 306.19 li
365.242 306.164 365.434 305.929 365.408 305.666 cv
365.382 305.402 365.147 305.209 364.884 305.235 cv
310.697 310.573 li
310.433 310.598 310.24 310.833 310.266 311.097 cv
310.292 311.361 310.527 311.554 310.791 311.528 cv
f
282.858 241.019 mo
294.346 237.536 317.895 240.55 326.597 232.281 cv
328.544 230.431 330.345 228.291 331.093 225.712 cv
331.841 223.133 331.311 220.039 329.229 218.342 cv
327.533 216.958 325.001 216.59 323.809 214.753 cv
322.811 213.214 323.159 211.093 324.186 209.573 cv
325.213 208.052 326.795 207.01 328.361 206.054 cv
332.231 203.695 336.428 201.476 338.936 197.701 cv
341.443 193.926 341.411 187.989 337.559 185.603 cv
335.302 184.204 332.094 184.175 330.601 181.98 cv
329.205 179.926 330.178 177.024 331.866 175.202 cv
333.554 173.379 335.83 172.207 337.64 170.508 cv
340.532 167.795 342.088 163.722 341.742 159.773 cv
341.396 155.824 339.155 152.083 335.837 149.914 cv
282.858 241.019 li
cp
.843137 .74902 .596078 rgb
f
282.858 241.019 mo
280.203 229.311 265.936 210.334 268.82 198.682 cv
269.465 196.075 270.433 193.451 272.305 191.526 cv
274.176 189.6 277.128 188.53 279.632 189.5 cv
281.674 190.29 283.246 192.309 285.432 192.436 cv
287.263 192.542 288.935 191.191 289.748 189.547 cv
290.562 187.902 290.685 186.011 290.741 184.178 cv
290.878 179.647 290.73 174.902 292.771 170.856 cv
294.813 166.81 299.988 163.902 303.968 166.069 cv
306.3 167.339 307.91 170.112 310.557 170.324 cv
313.033 170.522 315.074 168.24 315.823 165.872 cv
316.572 163.504 316.465 160.946 317.046 158.531 cv
317.974 154.677 320.745 151.31 324.348 149.658 cv
327.952 148.006 332.311 148.103 335.837 149.914 cv
282.858 241.019 li
cp
.933333 .827451 .662745 rgb
f
329.54 165.36 mo
340.484 161.972 li
340.679 161.911 340.788 161.705 340.728 161.51 cv
340.667 161.315 340.461 161.207 340.266 161.267 cv
329.322 164.655 li
329.127 164.715 329.018 164.922 329.078 165.117 cv
329.139 165.311 329.345 165.42 329.54 165.36 cv
f
325.519 162.941 mo
324.3 153.017 li
324.275 152.815 324.091 152.671 323.889 152.696 cv
323.687 152.721 323.543 152.905 323.568 153.107 cv
324.787 163.031 li
324.812 163.233 324.996 163.377 325.198 163.352 cv
325.4 163.327 325.544 163.143 325.519 162.941 cv
.843137 .74902 .596078 rgb
f
314.038 195.829 mo
335.884 191.829 li
336.085 191.792 336.217 191.6 336.181 191.399 cv
336.144 191.199 335.952 191.066 335.751 191.103 cv
313.905 195.104 li
313.705 195.14 313.572 195.333 313.609 195.533 cv
313.646 195.733 313.838 195.866 314.038 195.829 cv
.933333 .827451 .662745 rgb
f
306.908 190.718 mo
298.816 170.617 li
298.74 170.428 298.525 170.337 298.336 170.413 cv
298.147 170.489 298.055 170.704 298.132 170.893 cv
306.223 190.994 li
306.3 191.183 306.515 191.274 306.704 191.198 cv
306.893 191.122 306.984 190.907 306.908 190.718 cv
.843137 .74902 .596078 rgb
f
291.244 223.156 mo
276.535 195.892 li
276.438 195.713 276.214 195.646 276.035 195.743 cv
275.856 195.839 275.789 196.063 275.886 196.243 cv
290.594 223.507 li
290.691 223.686 290.915 223.753 291.094 223.656 cv
291.273 223.559 291.34 223.336 291.244 223.156 cv
f
295.499 226.067 mo
328.235 223.88 li
328.439 223.866 328.592 223.691 328.579 223.487 cv
328.565 223.284 328.389 223.13 328.186 223.144 cv
295.449 225.33 li
295.246 225.344 295.092 225.52 295.106 225.723 cv
295.12 225.926 295.295 226.08 295.499 226.067 cv
.933333 .827451 .662745 rgb
f
421.783 500 mo
78.2174 500 li
78.2174 424.895 li
421.783 424.895 li
421.783 500 li
cp
.901961 .8 .639216 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
383.815 535.775 mo
116.185 535.775 li
116.185 435.592 li
383.815 435.592 li
383.815 535.775 li
cp
.843137 .74902 .596078 rgb
@
432.969 408.894 mo
67.0312 408.894 li
67.0312 424.894 li
432.969 424.894 li
432.969 408.894 li
cp
f
424.436 392.569 mo
331.806 392.569 li
331.806 376.246 li
424.436 376.246 li
424.436 392.569 li
cp
.752941 .670588 .533333 rgb
f
338.113 389.878 mo
338.113 378.937 li
424.436 378.937 li
424.436 389.878 li
338.113 389.878 li
cp
.92549 .905882 .866667 rgb
f
.25 lw
338.113 380.403 mo
424.436 380.403 li
.901961 .8 .639216 rgb
@
338.113 382.405 mo
424.436 382.405 li
@
338.113 384.408 mo
424.436 384.408 li
@
338.113 386.41 mo
424.436 386.41 li
@
338.113 388.412 mo
424.436 388.412 li
@
418.012 408.892 mo
325.382 408.892 li
325.382 392.569 li
418.012 392.569 li
418.012 408.892 li
cp
f
331.689 406.201 mo
331.689 395.26 li
418.012 395.26 li
418.012 406.201 li
331.689 406.201 li
cp
.92549 .905882 .866667 rgb
f
331.689 396.726 mo
418.012 396.726 li
.901961 .8 .639216 rgb
@
331.689 398.728 mo
418.012 398.728 li
@
331.689 400.731 mo
418.012 400.731 li
@
331.689 402.733 mo
418.012 402.733 li
@
331.689 404.736 mo
418.012 404.736 li
@
418.012 376.298 mo
325.382 376.298 li
325.382 359.975 li
418.012 359.975 li
418.012 376.298 li
cp
.976471 .901961 .772549 rgb
f
331.689 373.607 mo
331.689 362.666 li
418.012 362.666 li
418.012 373.607 li
331.689 373.607 li
cp
.92549 .905882 .866667 rgb
f
331.689 364.131 mo
418.012 364.131 li
.901961 .8 .639216 rgb
@
331.689 366.134 mo
418.012 366.134 li
@
331.689 368.136 mo
418.012 368.136 li
@
331.689 370.139 mo
418.012 370.139 li
@
331.689 372.141 mo
418.012 372.141 li
@
146.32 338.48 mo
146.32 338.48 li
146.32 338.48 li
136.07 356.33 136.937 384.738 148.257 401.93 cv
148.257 401.93 li
148.257 401.93 li
158.507 384.079 157.64 355.672 146.32 338.48 cv
cp
.752941 .670588 .533333 rgb
f
172.221 352.558 mo
172.221 352.558 li
172.221 352.558 li
158.818 360.676 146.821 379.909 145.424 395.517 cv
145.424 395.517 li
145.424 395.517 li
158.828 387.399 170.825 368.166 172.221 352.558 cv
cp
f
130.846 348.73 mo
130.846 348.73 li
130.846 348.73 li
129.669 364.356 138.357 385.293 150.251 395.495 cv
150.251 395.495 li
150.252 395.495 li
151.428 379.869 142.74 358.932 130.846 348.73 cv
cp
.976471 .901961 .772549 rgb
f
121.143 350.712 mo
121.143 350.712 li
121.143 350.712 li
134.594 358.751 146.704 377.914 148.192 393.513 cv
148.192 393.513 li
148.192 393.513 li
134.741 385.474 122.631 366.311 121.143 350.712 cv
cp
.933333 .827451 .662745 rgb
f
159.204 346.543 mo
159.204 346.543 li
159.204 346.543 li
148.811 358.271 143.058 380.197 146.353 395.517 cv
146.353 395.517 li
146.353 395.517 li
156.746 383.789 162.499 361.863 159.204 346.543 cv
cp
.976471 .901961 .772549 rgb
f
123.417 374.037 mo
123.417 374.037 123.417 393.401 132.182 408.892 cv
161.228 408.892 li
169.993 393.401 169.993 374.037 169.993 374.037 cv
123.417 374.037 li
cp
.933333 .827451 .662745 rgb
f
169.438 381.783 mo
169.59 380.496 169.701 379.331 169.781 378.318 cv
123.629 378.318 li
123.709 379.331 123.82 380.496 123.972 381.783 cv
169.438 381.783 li
cp
.976471 .901961 .772549 rgb
f
259.105 140.584 mo
261.891 141.948 263.201 144.254 263.675 146.278 cv
264.149 148.301 263.255 154.51 263.255 154.51 cv
257.467 141.76 li
259.105 140.584 li
cp
.301961 .235294 .407843 rgb
f
429.326 235.726 mo
429.347 235.768 li
432.299 234.255 433.213 236.167 432.625 236.598 cv
434.106 235.778 434.778 237.648 433.675 238.436 cv
433.549 238.531 431.9 239.508 429.494 240.936 cv
431.017 240.064 432.698 241.693 429.494 244.099 cv
426.258 246.525 412.465 255.508 405.752 259.962 cv
399.795 261.18 393.429 258.228 391.58 253.764 cv
391.58 253.764 392.588 244.088 396.213 240.369 cv
399.847 236.661 400.404 235.946 401.276 235.558 cv
402.148 235.158 406.666 232.028 407.369 230.336 cv
408.073 228.655 408.893 226.05 409.492 225.609 cv
410.09 225.178 411.813 227.973 411.551 230.179 cv
411.351 231.944 407.149 237.669 407.149 238.867 cv
407.149 240.064 406.771 242.018 408.346 241.588 cv
409.922 241.157 427.361 233.562 428.559 233.562 cv
429.757 233.562 430.355 234.265 430.355 235.032 cv
430.355 235.137 429.977 235.389 429.326 235.726 cv
cp
.866667 .596078 .494118 rgb
f
374.813 272.695 mo
378.963 269.438 383.312 268.85 386.295 268.944 cv
385.381 271.591 384.625 273.787 384.331 274.701 cv
383.228 278.094 382.503 287.276 387.955 290.197 cv
393.933 293.39 404.596 290.753 405.121 288.379 cv
405.289 287.602 405.415 284.293 405.51 280.185 cv
412.675 288.621 412.706 301.763 407.59 313.33 cv
401.423 327.302 380.58 341.337 351.291 328.92 cv
331.593 320.579 316.486 293.222 309.626 278.704 cv
309.71 272.989 310.109 257.378 312.263 238.93 cv
314.038 223.739 317.484 213.706 318.724 209.483 cv
325.836 215.492 356.964 242.649 374.813 272.695 cv
cp
.788235 .345098 .223529 rgb
f
405.51 280.185 mo
405.415 284.293 405.289 287.602 405.121 288.379 cv
404.596 290.753 393.933 293.39 387.955 290.197 cv
382.503 287.276 383.228 278.094 384.331 274.701 cv
384.625 273.787 385.381 271.591 386.295 268.944 cv
388.481 262.63 391.58 253.764 391.58 253.764 cv
393.429 258.228 399.795 261.18 405.752 259.962 cv
405.752 259.962 405.699 271.749 405.51 280.185 cv
cp
f
309.521 686.895 mo
308.586 686.895 307.672 686.895 306.8 686.895 cv
301.327 630.806 293.322 571.124 281.913 508.449 cv
275.263 471.889 267.909 436.769 260.061 403.152 cv
266.596 403.152 li
266.596 403.152 268.13 376.016 264.652 330.706 cv
265.461 330.632 266.281 330.559 267.1 330.496 cv
274.874 329.886 282.175 329.75 288.92 329.939 cv
290.265 334.835 292.46 340.707 296.106 346.842 cv
298.49 350.866 301.075 354.28 303.564 357.127 cv
306.086 367.213 308.67 378.579 311.118 391.113 cv
311.118 391.113 311.853 394.758 312.505 398.403 cv
316.875 422.545 324.544 477.636 325.321 603.177 cv
325.447 623.862 325.426 652.521 324.754 686.895 cv
323.493 686.895 322.023 686.895 320.426 686.895 cv
317.043 686.895 313.114 686.895 309.521 686.895 cv
cp
.32549 .258824 .447059 rgb
f
318.724 209.472 mo
318.724 209.483 li
317.484 213.706 314.038 223.739 312.263 238.93 cv
310.109 257.378 309.71 272.989 309.626 278.704 cv
307.01 273.146 305.592 269.469 305.592 269.469 cv
305.182 264.563 304.867 259.195 304.71 253.312 cv
304.09 229.464 310.383 207.939 309.542 205.922 cv
312.326 205.617 318.472 206.489 319.123 207.245 cv
319.281 207.424 319.102 208.17 318.724 209.472 cv
cp
.631373 .270588 .180392 rgb
f
222.935 329.823 mo
214.888 328.458 217.672 319.56 218.323 311.796 cv
218.974 303.969 217.241 291.363 213.763 277.012 cv
213.69 276.729 213.627 276.424 213.543 276.109 cv
210.024 260.939 203.783 219.148 204.844 216.375 cv
205.937 213.549 239.786 201.856 239.786 201.856 cv
239.449 207.865 239.47 226.208 239.996 226.281 cv
240.153 226.302 240.826 225.693 241.876 224.716 cv
257.225 255.35 li
270.976 223.476 li
271.302 223.728 271.628 223.981 271.954 224.243 cv
274.338 226.145 275.263 200.333 274.737 199.188 cv
291.084 205.564 308.471 203.358 309.542 205.922 cv
310.383 207.939 304.09 229.464 304.71 253.312 cv
304.867 259.195 305.182 264.563 305.592 269.469 cv
308.166 300.524 314.312 312.941 305.487 319.402 cv
303.596 320.789 300.066 321.051 295.412 320.915 cv
287.806 320.694 277.206 319.37 265.797 320.053 cv
247.413 321.135 231.371 331.137 223.103 329.855 cv
223.05 329.844 222.987 329.834 222.935 329.823 cv
cp
.788235 .345098 .223529 rgb
f
296.242 330.275 mo
298.469 337.808 300.98 346.79 303.564 357.127 cv
301.075 354.28 298.49 350.866 296.106 346.842 cv
292.46 340.707 290.265 334.835 288.92 329.939 cv
291.441 330.013 293.878 330.128 296.242 330.275 cv
cp
.301961 .235294 .407843 rgb
f
230.856 336.663 mo
228.618 337.251 226.465 337.86 224.384 338.48 cv
225.172 336.526 223.828 332.24 222.935 329.823 cv
222.987 329.834 223.05 329.844 223.103 329.855 cv
231.371 331.137 247.413 321.135 265.797 320.053 cv
277.206 319.37 287.806 320.694 295.412 320.915 cv
295.139 323.279 295.034 326.913 296.242 330.275 cv
293.878 330.128 291.441 330.013 288.92 329.939 cv
282.175 329.75 274.874 329.886 267.1 330.496 cv
266.281 330.559 265.461 330.632 264.652 330.706 cv
259.525 331.168 254.609 331.809 249.923 332.586 cv
243.053 333.71 236.687 335.118 230.856 336.663 cv
cp
.631373 .270588 .180392 rgb
f
274.737 199.188 mo
275.263 200.333 274.338 226.145 271.954 224.243 cv
271.628 223.981 271.302 223.728 270.976 223.476 cv
270.073 222.783 269.191 222.142 268.329 221.533 cv
266.396 220.178 264.579 219.032 262.971 218.097 cv
259.074 215.828 256.437 214.778 256.437 214.778 cv
267.163 202.339 li
266.291 199.492 265.451 196.488 264.652 193.325 cv
267.247 194.639 274.307 198.253 274.737 199.188 cv
cp
.92549 .905882 .866667 rgb
f
268.329 221.533 mo
261.816 236.072 li
258.727 222.499 li
262.971 218.097 li
264.579 219.032 266.396 220.178 268.329 221.533 cv
cp
.870588 .827451 .764706 rgb
f
264.652 330.706 mo
268.13 376.016 266.596 403.152 266.596 403.152 cv
260.061 403.152 li
251.321 403.152 li
251.321 403.152 250.144 392.342 249.944 372.875 cv
249.797 357.411 249.881 339.341 249.923 332.586 cv
254.609 331.809 259.525 331.168 264.652 330.706 cv
cp
.301961 .235294 .407843 rgb
f
266.848 154.76 mo
266.848 158.678 265.608 160.254 263.675 161.074 cv
263.707 159.771 263.696 158.468 263.696 157.197 cv
263.696 155.947 263.686 154.812 263.675 153.793 cv
265.724 152.596 266.848 153.342 266.848 154.76 cv
cp
.866667 .596078 .494118 rgb
f
263.696 157.197 mo
263.696 158.468 263.707 159.771 263.675 161.074 cv
263.56 165.622 263.045 170.213 260.702 173.312 cv
260.177 174.027 259.536 174.668 258.79 175.203 cv
257.109 176.412 255.281 176.748 255.008 176.79 cv
251.415 177.431 248.516 175.708 247.476 175.088 cv
246.467 174.489 245.028 173.449 243.315 170.991 cv
243.315 170.991 243.315 170.98 243.305 170.97 cv
243.189 170.529 240.847 161.988 241.771 157.943 cv
241.771 157.943 237.348 152.659 238.493 149.045 cv
239.628 145.441 250.239 139.023 259.011 141.691 cv
260.093 142.636 261.007 143.697 261.721 144.79 cv
263.286 147.196 263.602 149.686 263.675 153.793 cv
263.686 154.812 263.696 155.947 263.696 157.197 cv
cp
f
262.971 218.097 mo
258.727 222.499 li
256.615 220.797 li
254.535 222.499 li
249.188 218.602 li
251.468 216.973 253.979 215.524 256.437 214.778 cv
256.437 214.778 259.074 215.828 262.971 218.097 cv
cp
.937255 .72549 .364706 rgb
f
246.173 686.895 mo
235.247 686.895 li
233.545 686.895 li
235.604 620.941 228.503 569.086 221.296 533.105 cv
202.859 441.066 205.559 424.383 207.828 403.068 cv
209.572 386.711 212.944 372.297 216.684 360.111 cv
219.079 357.999 221.643 355.289 224.017 351.864 cv
228.019 346.086 229.91 340.518 230.856 336.663 cv
236.687 335.118 243.053 333.71 249.923 332.586 cv
249.881 339.341 249.797 357.411 249.944 372.875 cv
250.144 392.342 251.321 403.152 251.321 403.152 cv
260.061 403.152 li
269.747 484.097 267.047 545.354 262.383 587.555 cv
262.383 587.555 261.826 592.535 250.112 686.895 cv
246.173 686.895 li
cp
.32549 .258824 .447059 rgb
f
255.008 176.79 mo
255.281 176.748 257.109 176.412 258.79 175.203 cv
259.536 174.668 260.177 174.027 260.702 173.312 cv
260.713 173.323 li
261.364 177.903 262.225 182.809 263.37 187.989 cv
263.78 189.817 264.211 191.592 264.652 193.325 cv
265.451 196.488 266.291 199.492 267.163 202.339 cv
256.437 214.778 li
245.795 204.871 li
245.732 202.287 245.627 199.597 245.438 196.792 cv
245.196 193.073 244.828 189.176 244.303 185.11 cv
243.473 178.67 242.37 172.724 241.151 167.335 cv
241.897 168.806 242.622 170.003 243.305 170.97 cv
243.315 170.98 243.315 170.991 243.315 170.991 cv
245.028 173.449 246.467 174.489 247.476 175.088 cv
248.516 175.708 251.415 177.431 255.008 176.79 cv
cp
.866667 .596078 .494118 rgb
f
260.713 173.323 mo
260.702 173.312 li
260.177 174.027 259.536 174.668 258.79 175.203 cv
257.109 176.412 255.281 176.748 255.008 176.79 cv
251.415 177.431 248.516 175.708 247.476 175.088 cv
246.467 174.489 245.028 173.449 243.315 170.991 cv
243.315 170.991 243.315 170.98 243.305 170.97 cv
242.622 170.003 241.897 168.806 241.151 167.335 cv
242.37 172.724 243.473 178.67 244.303 185.11 cv
244.502 186.65 244.658 188.143 244.813 189.634 cv
244.813 189.634 261.008 175.327 260.713 173.323 cv
cp
.760784 .52549 .435294 rgb
f
256.615 220.797 mo
258.727 222.499 li
261.816 236.072 li
256.857 247.145 li
252.329 238.236 li
254.535 222.499 li
256.615 220.797 li
cp
.937255 .72549 .364706 rgb
f
254.535 222.499 mo
252.329 238.236 li
244.334 222.499 li
245.732 221.26 247.392 219.873 249.188 218.602 cv
254.535 222.499 li
cp
.870588 .827451 .764706 rgb
f
252.329 238.236 mo
256.857 247.145 li
261.816 236.072 li
268.329 221.533 li
269.191 222.142 270.073 222.783 270.976 223.476 cv
257.225 255.35 li
241.876 224.716 li
242.549 224.096 243.389 223.329 244.334 222.499 cv
252.329 238.236 li
cp
.631373 .270588 .180392 rgb
f
249.188 218.602 mo
247.392 219.873 245.732 221.26 244.334 222.499 cv
243.389 223.329 242.549 224.096 241.876 224.716 cv
240.826 225.693 240.153 226.302 239.996 226.281 cv
239.47 226.208 239.449 207.865 239.786 201.856 cv
239.849 200.774 239.912 200.091 239.996 199.986 cv
240.374 199.482 243.652 197.727 245.438 196.792 cv
245.627 199.597 245.732 202.287 245.795 204.871 cv
256.437 214.778 li
253.979 215.524 251.468 216.973 249.188 218.602 cv
cp
.92549 .905882 .866667 rgb
f
236.235 163.952 mo
234.974 163.007 233.178 158.468 233.924 157.785 cv
234.669 157.113 237.023 158.058 237.023 158.058 cv
237.674 160.118 238.683 162.324 239.954 164.919 cv
239.954 164.919 237.506 164.887 236.235 163.952 cv
cp
.866667 .596078 .494118 rgb
f
241.771 157.943 mo
240.847 161.988 243.189 170.529 243.305 170.97 cv
242.622 170.003 241.897 168.806 241.151 167.335 cv
241.057 167.167 240.973 166.988 240.878 166.799 cv
240.552 166.148 240.248 165.517 239.954 164.919 cv
238.683 162.324 237.674 160.118 237.023 158.058 cv
236.193 155.432 235.972 153.026 236.602 150.326 cv
237.664 145.757 241.466 139.117 248.369 138.161 cv
252.413 137.594 256.237 139.264 259.011 141.691 cv
250.239 139.023 239.628 145.441 238.493 149.045 cv
237.348 152.659 241.771 157.943 241.771 157.943 cv
cp
f
230.856 336.663 mo
229.91 340.518 228.019 346.086 224.017 351.864 cv
221.643 355.289 219.079 357.999 216.684 360.111 cv
219.216 351.853 221.916 344.605 224.384 338.48 cv
226.465 337.86 228.618 337.251 230.856 336.663 cv
cp
.301961 .235294 .407843 rgb
f
213.543 276.109 mo
213.28 276.991 212.976 277.968 212.639 279.029 cv
200.064 255.024 198.079 231.198 198.678 221.764 cv
198.804 219.715 199.066 218.339 199.35 217.793 cv
200.358 215.923 204.844 216.375 204.844 216.375 cv
203.783 219.148 210.024 260.939 213.543 276.109 cv
cp
.631373 .270588 .180392 rgb
f
157.044 283.935 mo
168.453 272.442 178.36 250.003 198.678 221.764 cv
198.079 231.198 200.064 255.024 212.639 279.029 cv
206.756 297.593 189.622 342.073 158.326 351.664 cv
134.867 358.861 119.918 341.464 110.61 315.736 cv
101.039 289.304 112.259 285.742 112.259 285.742 cv
125.906 294.021 136.117 280.679 136.117 280.679 cv
134.268 278.252 132.503 275.92 130.843 273.609 cv
133.911 272.653 139.889 271.392 144.669 273.987 cv
147.789 275.678 152.38 279.576 157.044 283.935 cv
cp
.788235 .345098 .223529 rgb
f
130.843 273.609 mo
132.503 275.92 134.268 278.252 136.117 280.679 cv
136.117 280.679 125.906 294.021 112.259 285.742 cv
111.366 274.649 110.663 265.887 107.668 257.272 cv
112.375 257.945 116.357 256.526 119.855 253.701 cv
122.397 260.97 126.221 267.19 130.843 273.609 cv
cp
f
413.433 241.299 mo
416.203 240.155 419.001 239.106 421.813 238.115 cv
423.208 237.629 424.603 237.142 426.029 236.645 cv
427.411 236.146 428.867 235.659 430.106 234.999 cv
430.181 234.934 430.238 235.057 430.364 235.032 cv
430.5 235.007 430.522 235.27 430.407 235.352 cv
429.136 236.333 427.79 236.957 426.414 237.604 cv
425.04 238.228 423.639 238.778 422.226 239.288 cv
419.399 240.302 416.512 241.125 413.575 241.76 cv
413.328 241.812 413.214 241.389 413.433 241.299 cv
cp
.760784 .52549 .435294 rgb
f
415.364 243.736 mo
418.81 242.069 422.305 240.513 425.826 239.034 cv
427.574 238.303 429.322 237.571 431.095 236.829 cv
431.518 236.638 431.965 236.443 432.315 236.245 cv
432.392 236.206 432.315 236.237 432.338 236.247 cv
432.327 236.242 432.343 236.264 432.341 236.247 cv
432.348 236.234 432.36 236.183 432.339 236.126 cv
432.311 236.011 432.216 235.88 432.084 235.778 cv
431.497 235.362 430.48 235.539 429.647 235.876 cv
429.382 235.975 429.167 235.606 429.449 235.456 cv
429.876 235.207 430.353 235.025 430.863 234.912 cv
431.371 234.81 431.962 234.809 432.51 235.111 cv
432.774 235.272 433.02 235.509 433.151 235.846 cv
433.22 236.01 433.252 236.21 433.214 236.429 cv
433.205 236.533 433.143 236.655 433.088 236.759 cv
433.021 236.849 432.885 236.987 432.849 236.997 cv
432.393 237.314 431.972 237.526 431.54 237.76 cv
429.818 238.645 428.07 239.428 426.307 240.181 cv
422.78 241.68 419.191 243.013 415.542 244.184 cv
415.236 244.282 415.091 243.868 415.364 243.736 cv
cp
f
415.742 247.087 mo
417.76 245.59 420.046 244.49 422.338 243.56 cv
424.637 242.624 426.956 241.857 429.202 240.847 cv
429.376 240.771 429.6 241.133 429.436 241.247 cv
427.387 242.712 425.084 243.769 422.807 244.713 cv
420.521 245.658 418.234 246.494 415.985 247.504 cv
415.795 247.586 415.58 247.204 415.742 247.087 cv
cp
f
429.507 240.795 mo
430.602 239.984 431.726 239.238 432.888 238.545 cv
433.16 238.37 433.524 238.209 433.681 238.027 cv
433.859 237.837 433.964 237.575 433.958 237.306 cv
433.942 237.045 433.831 236.772 433.597 236.654 cv
433.371 236.522 433.045 236.542 432.747 236.664 cv
432.655 236.695 432.541 236.514 432.644 236.457 cv
432.941 236.268 433.353 236.14 433.758 236.293 cv
434.172 236.437 434.414 236.858 434.472 237.258 cv
434.525 237.668 434.395 238.099 434.126 238.418 cv
433.832 238.756 433.539 238.854 433.248 239.053 cv
432.077 239.761 430.869 240.418 429.63 241.002 cv
429.526 241.051 429.42 240.86 429.507 240.795 cv
cp
f
109.265 227.468 mo
109.055 228.75 108.11 230.546 106.586 230.378 cv
106.492 230.368 106.397 230.336 106.303 230.284 cv
105.357 229.748 104.548 227.227 104.065 224.81 cv
103.655 222.751 103.487 220.755 103.676 220.125 cv
103.918 219.316 105.588 218.686 107.479 218.444 cv
108.099 221.239 109.118 225.914 109.276 226.67 cv
109.318 226.88 109.307 227.164 109.265 227.468 cv
cp
.866667 .596078 .494118 rgb
f
107.406 237.827 mo
107.385 237.869 107.353 237.9 107.322 237.932 cv
106.198 239.056 103.802 238.026 102.374 237.196 cv
102.374 237.186 102.363 237.186 102.363 237.186 cv
101.859 236.902 101.481 236.629 101.313 236.493 cv
100.651 235.946 99.7998 230.767 99.7473 229.611 cv
99.7157 229.002 101.039 227.594 102.3 226.397 cv
102.983 225.745 103.655 225.147 104.065 224.81 cv
104.548 227.227 105.357 229.748 106.303 230.284 cv
105.861 230.988 105.494 231.65 105.431 231.996 cv
105.273 232.91 108.425 236.472 107.406 237.827 cv
cp
f
103.109 239.445 mo
102.626 239.728 101.06 239.833 100.409 239.77 cv
99.9574 239.718 98.4761 239.024 97.4781 238.436 cv
97.4676 238.426 97.4676 238.426 97.4676 238.426 cv
97.0368 238.173 96.7112 237.942 96.5851 237.785 cv
96.333 237.47 95.6186 234.906 95.1669 232.816 cv
94.8937 231.513 94.7256 230.399 94.8412 230.137 cv
94.9462 229.906 95.1984 229.422 95.5135 228.887 cv
95.5135 228.887 95.5135 228.887 95.524 228.887 cv
96.1439 227.836 97.0263 226.565 97.6041 226.397 cv
98.4971 226.134 102.3 226.397 102.3 226.397 cv
101.039 227.594 99.7157 229.002 99.7473 229.611 cv
99.7998 230.767 100.651 235.946 101.313 236.493 cv
101.481 236.629 101.859 236.902 102.363 237.186 cv
102.363 237.186 102.374 237.186 102.374 237.196 cv
103.414 237.9 103.582 239.15 103.109 239.445 cv
cp
f
106.586 230.378 mo
108.11 230.546 109.055 228.75 109.265 227.468 cv
109.307 227.164 109.318 226.88 109.276 226.67 cv
109.118 225.914 108.099 221.239 107.479 218.444 cv
108.982 218.255 110.61 218.318 111.745 218.738 cv
114.287 219.684 121.924 231.324 122.649 235.022 cv
123.374 238.73 119.855 253.701 119.855 253.701 cv
116.357 256.526 112.375 257.945 107.668 257.272 cv
103.004 255.035 103.361 251.831 101.68 246.273 cv
100.682 242.974 97.6672 238.699 97.4781 238.436 cv
98.4761 239.024 99.9574 239.718 100.409 239.77 cv
101.06 239.833 102.626 239.728 103.109 239.445 cv
103.582 239.15 103.414 237.9 102.374 237.196 cv
103.802 238.026 106.198 239.056 107.322 237.932 cv
107.353 237.9 107.385 237.869 107.406 237.827 cv
108.425 236.472 105.273 232.91 105.431 231.996 cv
105.494 231.65 105.861 230.988 106.303 230.284 cv
106.397 230.336 106.492 230.368 106.586 230.378 cv
cp
f
95.5135 228.887 mo
95.1984 229.422 94.9462 229.906 94.8412 230.137 cv
94.7256 230.399 94.8937 231.513 95.1669 232.816 cv
95.1669 232.816 94.8097 236.198 94.9672 237.06 cv
95.1143 237.858 96.3645 240.863 95.1669 240.905 cv
93.9797 240.936 91.2378 238.215 91.0697 237.732 cv
90.9016 237.259 90.6285 232.259 90.66 231.818 cv
90.6915 231.366 92.0887 229.601 92.4669 229.433 cv
92.7401 229.307 94.5996 229.023 95.5135 228.887 cv
cp
f
108.194 220.62 mo
108.633 222.01 109.039 223.409 109.412 224.816 cv
109.504 225.17 109.595 225.522 109.686 225.873 cv
109.818 226.403 li
109.836 226.479 109.867 226.584 109.884 226.727 cv
109.899 226.852 109.902 226.967 109.901 227.077 cv
109.875 227.953 109.607 228.719 109.186 229.439 cv
108.772 230.13 108.057 230.867 107.038 230.966 cv
106.778 230.978 106.595 231.004 106.253 230.879 cv
105.918 230.781 105.756 230.585 105.586 230.42 cv
105.276 230.072 105.095 229.715 104.929 229.359 cv
104.313 227.933 104.062 226.481 103.881 225.023 cv
103.854 224.797 104.27 224.709 104.335 224.929 cv
104.745 226.306 105.197 227.701 105.851 228.894 cv
106.015 229.183 106.201 229.463 106.393 229.644 cv
106.484 229.723 106.587 229.809 106.619 229.784 cv
106.613 229.808 106.813 229.808 106.909 229.788 cv
107.372 229.727 107.808 229.326 108.123 228.793 cv
108.434 228.266 108.661 227.617 108.695 227.041 cv
108.699 226.97 108.698 226.904 108.695 226.849 cv
108.695 226.812 108.679 226.739 108.659 226.639 cv
108.558 226.104 li
108.494 225.749 108.429 225.393 108.365 225.034 cv
108.115 223.605 107.9 222.169 107.723 220.724 cv
107.693 220.481 108.124 220.4 108.194 220.62 cv
cp
.760784 .52549 .435294 rgb
f
88.2657 157.239 mo
106.456 226.74 li
106.671 227.561 107.114 228.156 107.447 228.069 cv
107.779 227.982 107.875 227.246 107.66 226.425 cv
89.4702 156.924 li
89.2554 156.103 88.8117 155.508 88.4791 155.595 cv
88.1465 155.682 88.051 156.418 88.2657 157.239 cv
cp
.301961 .235294 .407843 rgb
f
108.489 249.603 mo
107.999 247.1 107.921 244.517 108.26 241.988 cv
108.533 239.942 108.682 237.87 108.538 235.807 cv
108.397 233.774 107.511 231.954 107.442 229.922 cv
107.418 229.22 107.479 228.487 107.835 227.883 cv
108 227.604 108.249 227.347 108.568 227.288 cv
108.826 227.241 109.088 227.329 109.336 227.417 cv
111.092 228.036 112.184 228.694 113.32 230.23 cv
114.33 231.595 115.083 233.123 116.026 234.531 cv
117.12 236.167 118.21 237.805 119.298 239.445 cv
.866667 .596078 .494118 rgb
f
118.887 239.241 mo
117.937 237.92 116.992 236.606 116.049 235.296 cv
115.072 233.986 114.269 232.531 113.379 231.236 cv
112.495 229.903 111.445 228.872 110.008 228.321 cv
109.666 228.177 109.265 228.032 108.935 227.926 cv
108.614 227.86 108.683 227.864 108.479 228.039 cv
108.142 228.444 108.027 229.18 108.066 229.92 cv
108.113 231.413 108.682 232.925 108.979 234.596 cv
109.252 236.316 109.165 237.938 109.032 239.59 cv
108.957 240.41 108.849 241.223 108.721 242.031 cv
108.596 242.817 108.508 243.607 108.459 244.403 cv
108.363 245.994 108.421 247.599 108.64 249.189 cv
108.71 249.678 108.297 249.782 108.183 249.271 cv
107.838 247.669 107.666 246.025 107.668 244.376 cv
107.671 243.552 107.718 242.726 107.807 241.906 cv
107.893 241.107 107.962 240.309 108.003 239.512 cv
108.071 237.936 108.089 236.287 107.814 234.806 cv
107.521 233.294 106.895 231.73 106.822 229.962 cv
106.801 229.109 106.837 228.104 107.547 227.225 cv
107.734 227.011 107.999 226.796 108.357 226.702 cv
108.725 226.608 109.055 226.683 109.287 226.753 cv
109.727 226.899 110.087 227.038 110.489 227.213 cv
111.271 227.552 112.049 228.025 112.686 228.638 cv
113.329 229.245 113.828 229.95 114.272 230.647 cv
115.163 232.061 115.855 233.49 116.739 234.835 cv
117.586 236.209 118.435 237.588 119.289 238.975 cv
119.572 239.44 119.19 239.657 118.887 239.241 cv
cp
.760784 .52549 .435294 rgb
f
106.425 230.521 mo
106.283 230.828 106.144 231.136 106.023 231.44 cv
105.915 231.722 105.771 232.112 105.875 232.15 cv
106.065 232.618 106.497 233.219 106.846 233.782 cv
107.211 234.361 107.574 234.959 107.864 235.638 cv
108.012 235.973 108.128 236.348 108.199 236.758 cv
108.245 237.179 108.234 237.711 107.888 238.189 cv
107.945 238.097 li
107.883 238.198 107.767 238.344 107.711 238.384 cv
107.531 238.528 li
107.415 238.63 107.272 238.686 107.139 238.758 cv
106.865 238.88 106.582 238.937 106.311 238.959 cv
105.769 238.992 105.277 238.89 104.82 238.748 cv
103.908 238.453 103.114 237.985 102.378 237.456 cv
102.234 237.351 102.446 236.983 102.607 237.052 cv
103.408 237.398 104.234 237.693 105.044 237.834 cv
105.447 237.901 105.847 237.924 106.19 237.866 cv
106.36 237.834 106.513 237.786 106.639 237.715 cv
106.695 237.67 106.767 237.648 106.811 237.593 cv
106.887 237.525 li
106.919 237.495 106.86 237.541 106.871 237.559 cv
106.876 237.567 li
106.928 237.468 li
106.98 237.369 107.004 237.185 106.973 236.937 cv
106.918 236.678 106.84 236.398 106.715 236.11 cv
106.479 235.534 106.166 234.948 105.856 234.348 cv
105.555 233.722 105.202 233.186 105.006 232.337 cv
104.982 232.235 104.989 232.04 105.006 231.909 cv
105.039 231.778 105.08 231.69 105.122 231.598 cv
105.207 231.42 105.301 231.265 105.397 231.115 cv
105.592 230.815 105.8 230.538 106.015 230.267 cv
106.135 230.117 106.5 230.361 106.425 230.521 cv
cp
f
102.143 237.315 mo
101.9 237.192 101.661 237.072 101.427 236.954 cv
101.305 236.888 101.19 236.839 101.063 236.756 cv
100.991 236.687 100.914 236.608 100.855 236.532 cv
100.732 236.338 li
100.44 235.825 100.277 235.336 100.109 234.832 cv
99.7901 233.83 99.5681 232.817 99.4 231.793 cv
99.3185 231.28 99.2501 230.767 99.2064 230.24 cv
99.1812 229.836 li
99.176 229.615 li
99.1803 229.477 99.2026 229.346 99.236 229.259 cv
99.3674 228.881 99.5433 228.667 99.7162 228.44 cv
100.423 227.585 101.228 226.944 102.059 226.318 cv
102.188 226.223 102.483 226.529 102.379 226.654 cv
101.733 227.439 101.062 228.233 100.56 229.035 cv
100.443 229.226 100.332 229.447 100.314 229.562 cv
100.315 229.571 100.305 229.593 100.31 229.591 cv
100.346 229.592 100.258 229.579 100.173 229.589 cv
100.158 229.59 li
100.151 229.591 li
99.9994 229.599 100.348 229.582 100.313 229.585 cv
100.315 229.596 li
100.317 229.618 li
100.323 229.661 li
100.333 229.748 li
100.384 230.108 li
100.466 230.608 100.547 231.101 100.628 231.594 cv
100.799 232.575 100.969 233.55 101.147 234.569 cv
101.241 235.052 101.336 235.56 101.476 235.972 cv
101.529 236.116 li
101.543 236.142 101.55 236.156 101.556 236.186 cv
101.627 236.258 101.736 236.339 101.824 236.416 cv
102.008 236.574 102.195 236.734 102.386 236.899 cv
102.512 237.009 102.295 237.389 102.143 237.315 cv
cp
f
102.563 237.052 mo
103.248 237.407 103.908 238.076 103.863 239.136 cv
103.847 239.272 103.806 239.424 103.727 239.578 cv
103.653 239.723 103.455 239.915 103.326 239.974 cv
103.069 240.111 102.883 240.159 102.683 240.214 cv
102.295 240.31 101.923 240.359 101.549 240.385 cv
101.169 240.408 100.813 240.414 100.39 240.366 cv
99.8333 240.263 99.5871 240.083 99.236 239.912 cv
98.5911 239.556 97.996 239.143 97.4377 238.671 cv
97.3513 238.598 97.5663 238.231 97.671 238.27 cv
98.3304 238.516 98.9965 238.751 99.6476 238.965 cv
99.9482 239.061 100.352 239.192 100.5 239.186 cv
100.785 239.189 101.138 239.169 101.464 239.144 cv
101.794 239.118 102.127 239.083 102.432 239.034 cv
102.575 239.011 102.735 238.971 102.794 238.952 cv
102.804 238.951 li
102.809 238.95 li
102.81 238.95 li
102.989 239.246 102.859 239.032 102.899 239.098 cv
102.898 239.096 li
102.895 239.092 li
102.888 239.083 102.881 239.076 102.874 239.072 cv
102.862 239.065 102.816 239.015 102.786 239.008 cv
102.766 238.992 102.801 238.988 102.809 238.948 cv
102.931 238.586 102.716 237.896 102.282 237.444 cv
102.262 237.421 102.267 237.377 102.286 237.326 cv
102.332 237.201 li
102.358 237.196 li
102.372 237.194 102.358 237.2 102.363 237.201 cv
102.342 237.165 102.416 237.053 102.499 237.195 cv
102.445 237.091 li
102.488 237.054 102.531 237.036 102.563 237.052 cv
cp
f
97.2605 238.569 mo
97.0566 238.485 96.8552 238.395 96.652 238.279 cv
96.5496 238.218 96.4491 238.159 96.3353 238.054 cv
96.2037 237.917 96.1388 237.783 96.0839 237.688 cv
95.8654 237.276 95.7036 236.879 95.5481 236.473 cv
95.2433 235.662 94.9968 234.838 94.7989 234.001 cv
94.6004 233.165 94.451 232.31 94.3836 231.435 cv
94.3674 231.215 94.3562 230.994 94.3574 230.763 cv
94.3784 230.527 94.3251 230.312 94.5023 229.935 cv
94.7539 229.569 95.0113 229.211 95.2725 228.863 cv
95.3537 228.754 95.7207 228.969 95.6742 229.095 cv
95.5191 229.496 95.369 229.884 95.223 230.261 cv
95.2158 230.272 95.2413 230.508 95.2771 230.688 cv
95.3202 230.889 95.3627 231.086 95.4047 231.282 cv
95.6142 232.125 95.8125 232.922 96.0092 233.714 cv
96.2102 234.53 96.3979 235.351 96.5746 236.17 cv
96.6638 236.577 96.751 236.994 96.8495 237.369 cv
96.8213 237.603 97.206 237.882 97.5082 238.155 cv
97.6154 238.245 97.3908 238.622 97.2605 238.569 cv
cp
f
.5 lw
251.89 155.074 mo
251.89 157.289 250.094 159.085 247.879 159.085 cv
245.664 159.085 243.868 157.289 243.868 155.074 cv
243.868 152.858 245.664 151.063 247.879 151.063 cv
250.094 151.063 251.89 152.858 251.89 155.074 cv
cp
.32549 .258824 .447059 rgb
@
247.009 155.75 mo
247.009 155.283 247.223 154.849 247.589 154.639 cv
248.115 154.336 248.903 154.527 249.328 155.17 cv
@
263.986 155.074 mo
263.986 157.289 262.19 159.085 259.975 159.085 cv
257.76 159.085 255.964 157.289 255.964 155.074 cv
255.964 152.858 257.76 151.063 259.975 151.063 cv
262.19 151.063 263.986 152.858 263.986 155.074 cv
cp
@
259.105 155.75 mo
259.105 155.283 259.319 154.849 259.685 154.639 cv
260.212 154.336 260.999 154.527 261.425 155.17 cv
@
255.964 155.074 mo
251.89 155.074 li
@
243.927 155.75 mo
237.362 157.526 li
@
250.455 166.49 mo
253.193 166.381 255.931 166.272 258.669 166.163 cv
258.577 166.35 257.495 168.436 255.135 168.768 cv
253.31 169.025 251.464 168.129 250.455 166.49 cv
cp
.92549 .905882 .866667 rgb
f
255.135 168.768 mo
256.683 168.551 257.672 167.584 258.202 166.888 cv
255.792 166.983 253.382 167.079 250.973 167.175 cv
252.027 168.367 253.586 168.986 255.135 168.768 cv
cp
.788235 .345098 .223529 rgb
f
253.536 161.722 mo
254.22 161.604 254.921 161.486 255.51 161.301 cv
255.649 161.255 255.795 161.199 255.864 161.146 cv
255.922 161.12 255.9 161.103 255.914 161.105 cv
255.871 161.127 255.845 161.186 255.832 161.272 cv
255.737 160.918 li
255.593 160.436 li
255.201 159.118 254.813 157.756 254.724 156.286 cv
254.72 156.169 255.138 156.094 255.179 156.192 cv
255.722 157.452 256.36 158.713 256.784 160.075 cv
256.837 160.247 256.888 160.421 256.934 160.602 cv
256.976 160.812 257.028 160.908 257.039 161.278 cv
257.039 161.55 256.914 161.759 256.766 161.924 cv
256.64 162.032 256.489 162.139 256.38 162.175 cv
256.136 162.286 255.937 162.315 255.735 162.347 cv
254.947 162.441 254.236 162.351 253.521 162.204 cv
253.399 162.178 253.429 161.74 253.536 161.722 cv
cp
.760784 .52549 .435294 rgb
f
248.369 138.161 mo
241.466 139.117 237.664 145.757 236.602 150.326 cv
235.972 153.026 236.193 155.432 237.023 158.058 cv
237.581 159.824 238.415 161.714 239.439 163.848 cv
239.893 163.595 li
239.155 161.523 238.681 159.433 239.02 157.948 cv
239.02 157.948 240.504 156.429 239.501 154.467 cv
238.631 152.764 237.961 150.724 238.493 149.045 cv
239.628 145.441 250.239 139.023 259.011 141.691 cv
256.237 139.264 252.413 137.594 248.369 138.161 cv
cp
.301961 .235294 .407843 rgb
f
257.608 141.343 mo
260.432 142.325 261.985 139.784 261.749 137.572 cv
260.265 138.607 li
260.265 138.607 258.628 136.537 254.942 136.019 cv
254.549 137.713 li
250.267 137.007 li
250 138.278 li
257.608 141.343 li
cp
f
256.431 170.755 mo
255.719 171.336 254.97 171.361 254.193 170.888 cv
254.163 170.869 254.136 170.445 254.164 170.425 cv
254.882 169.916 255.623 169.785 256.401 170.274 cv
256.434 170.294 256.459 170.732 256.431 170.755 cv
cp
.760784 .52549 .435294 rgb
f
174.245 301.71 mo
167.897 295.274 161.503 288.865 154.854 282.761 cv
153.187 281.242 151.5 279.745 149.767 278.314 cv
148.032 276.895 146.259 275.49 144.351 274.409 cv
142.453 273.365 140.252 272.903 138.042 272.842 cv
135.824 272.795 133.588 273.112 131.416 273.671 cv
130.748 273.849 130.593 273.452 131.287 273.225 cv
133.463 272.538 135.735 272.099 138.048 272.051 cv
140.352 272.018 142.726 272.415 144.842 273.501 cv
146.908 274.597 148.73 275.984 150.519 277.398 cv
152.299 278.823 154.014 280.318 155.696 281.845 cv
162.4 287.979 168.635 294.572 174.599 301.384 cv
175.098 301.959 174.745 302.223 174.245 301.71 cv
cp
.631373 .270588 .180392 rgb
f
385.786 269.165 mo
381.671 269.258 377.691 270.834 374.651 273.505 cv
371.585 276.173 369.376 279.726 368.503 283.687 cv
368.316 284.422 li
368.195 285.173 li
368.12 285.675 368.019 286.173 367.962 286.677 cv
367.886 287.692 367.764 288.704 367.785 289.726 cv
367.734 291.766 367.927 293.813 368.252 295.834 cv
368.554 297.863 369.103 299.848 369.763 301.789 cv
370.428 303.73 371.312 305.604 372.471 307.292 cv
372.82 307.819 372.505 308.108 372.099 307.569 cv
370.803 305.902 369.795 304.024 369.022 302.067 cv
368.254 300.109 367.612 298.089 367.235 296.013 cv
366.835 293.943 366.584 291.834 366.6 289.714 cv
366.561 288.655 366.673 287.596 366.744 286.537 cv
366.8 286.008 366.899 285.484 366.976 284.957 cv
367.101 284.168 li
367.295 283.391 li
368.204 279.204 370.66 275.369 373.964 272.684 cv
375.619 271.333 377.513 270.267 379.531 269.584 cv
381.549 268.9 383.684 268.611 385.788 268.683 cv
386.497 268.717 386.433 269.154 385.786 269.165 cv
cp
f
112.613 285.669 mo
116.473 287.606 120.866 288.475 124.963 287.335 cv
129.055 286.3 132.771 283.832 135.782 280.737 cv
136.003 280.497 136.355 280.738 136.14 281.032 cv
133.438 284.524 129.693 287.401 125.265 288.542 cv
124.708 288.654 124.165 288.844 123.595 288.883 cv
121.894 289.037 li
121.326 289.044 120.757 288.986 120.19 288.959 cv
119.907 288.933 119.621 288.94 119.342 288.886 cv
118.511 288.706 li
116.264 288.326 114.239 287.246 112.369 286.084 cv
112.049 285.892 112.299 285.53 112.613 285.669 cv
cp
f
384.453 275.104 mo
384.131 276.483 384.006 277.913 383.985 279.329 cv
383.968 280.746 384.073 282.164 384.356 283.531 cv
384.639 284.895 385.098 286.218 385.826 287.346 cv
386.548 288.492 387.565 289.335 388.783 289.911 cv
391.282 291.013 394.178 291.233 396.981 291.053 cv
398.39 290.955 399.798 290.743 401.165 290.388 cv
401.848 290.209 402.521 289.993 403.161 289.714 cv
403.786 289.434 404.439 289.09 404.795 288.58 cv
404.944 288.289 405.413 288.268 405.198 288.81 cv
404.766 289.538 404.087 289.925 403.44 290.287 cv
402.78 290.638 402.09 290.913 401.39 291.146 cv
399.987 291.611 398.539 291.912 397.073 292.081 cv
394.156 292.396 391.088 292.271 388.265 291.042 cv
386.865 290.4 385.591 289.318 384.804 287.987 cv
383.991 286.666 383.542 285.19 383.303 283.72 cv
383.064 282.244 383.04 280.756 383.157 279.29 cv
383.278 277.824 383.523 276.371 383.99 274.97 cv
384.15 274.497 384.555 274.671 384.453 275.104 cv
cp
f
174.526 292.645 mo
172.148 291.488 169.669 290.585 167.203 289.624 cv
164.732 288.676 162.257 287.71 159.781 286.711 cv
159.591 286.636 159.698 286.224 159.91 286.265 cv
162.542 286.797 165.134 287.514 167.649 288.463 cv
170.154 289.42 172.624 290.584 174.784 292.238 cv
174.966 292.375 174.715 292.735 174.526 292.645 cv
cp
f
368.452 282.276 mo
366.97 288.568 365.677 294.839 364.854 301.249 cv
364.82 301.497 364.394 301.49 364.39 301.23 cv
364.228 294.702 365.47 288.133 367.996 282.12 cv
368.107 281.865 368.514 282.031 368.452 282.276 cv
cp
f
274.978 316.369 mo
272.169 317.167 269.369 317.959 266.608 318.817 cv
265.225 319.241 263.857 319.697 262.516 320.211 cv
261.178 320.726 259.846 321.287 258.678 322.107 cv
258.492 322.225 258.199 321.916 258.377 321.754 cv
259.457 320.687 260.77 319.92 262.102 319.265 cv
263.441 318.608 264.828 318.07 266.239 317.629 cv
269.059 316.737 271.96 316.17 274.893 315.895 cv
275.142 315.874 275.199 316.309 274.978 316.369 cv
cp
f
408.26 249.425 mo
406.274 249.69 404.337 250.035 402.597 250.765 cv
400.863 251.484 399.373 252.688 398.473 254.455 cv
398.4 254.586 397.993 254.46 398.037 254.298 cv
398.276 253.283 398.772 252.296 399.492 251.485 cv
400.209 250.67 401.129 250.042 402.111 249.62 cv
404.092 248.775 406.244 248.673 408.263 248.943 cv
408.434 248.964 408.417 249.403 408.26 249.425 cv
cp
.760784 .52549 .435294 rgb
f
grestore
.32549 .258824 .447059 rgb
%ADOBeginSubsetFont: Poppins-SemiBoldItalic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Poppins-SemiBoldItalic def/FontInfo 5 dict dup begin/ItalicAngle -10 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 68 /D putdup 84 /T putdup 97 /a putdup 99 /c putdup 101 /e putdup 104 /h putdup 114 /r putdup 115 /s putdup 121 /y putdup 213 /quoteright putdef/FontBBox {-552 -593 2574 1091} defendsystemdict begindup /Private8 dict dup begin/|- {def} def/| {put} def/BlueValues [-8 0 554 564 698 709 740 769] def/OtherBlues [-274 -264] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings12 dict dup begin/space <1C60D8A8C9B85EE353> |-/D <1C60D8A8C9B600E03E3A8062AEFBB46FE249F83066D14074006BD9ECC7A25E8FC4DEC06A39B91B9BF2087310F1AE366B358B088216BE3053A29C23EC50EB0B21A465A19CA3CC5CE660BD33B27888> |-/T <1C60D8A8C9B7FA135F152C00FE23453C7F0E77E2A53574658E52D36D4865E612DC74E1A510CF> |-/a <1C60D8A8C9B65B43BAF99C890C9881A1B20E5F893A09594CD6F366D013298E29764E055DECBD9FDC20C6B5974916C20C427D2B1729F6578926B614F17CA183788DD6252FB2BD52DBD1D6DF62CB630D74094D314C42570B87E6A62695986E294E7D46> |-/c <1C60D8A8C9B7C12A005AE53BA4D7CB17E5C247DDDFC4806D7B132E0D9E736699B65E0C8C675080E9FBC9A864DC315508F11333462F5ABF5CE825C47CC90311DA54C5BFE25CF851A32A01AD5F7EF208CCD6B9C83B4663B354FB> |-/e <1C60D8A8C9B7D2D031BB279FCCE46178AB05E591D6D4D6BD64168CD9C6E7F042D49BBCB72784D320DA1E9AB417BFBBDD7B13234D32D7A4BB174AEEC0181095887B3D5A7CFDBE2E900441210B7A773EB89EE524F79BCE0C4D8984704F323AA79436BC3C11B93CB5E0> |-/h <1C60D8A8C9B648F66D7BC722A2BD044F3B0491C07B54BF62E8FFDDFCBA22A094B42A58C82ED843FFB5B58079D33E2C608AE3715D541186B2DCFB13CA6FFEBF6E575067> |-/r <1C60D8A8C9B70721CF3C9457C3C981EDC0C806A538E3ED633A0212B15C02E00E97D030390F75C896D4C00F910552D4> |-/s <1C60D8A8C9B79AB85D7E4B8D7D66E36FB058B8DFFB0586DF0FDB4474C1974C3CEBEB3D20EF6C120E387F3177C199D98F235A6614A7C706785A62B848CD08F29EDD9B1200A10DE5DD65CEBBD92F6C29F2509FFC59AE29AE506DA6C916> |-/y <1C60D8A8C9B7DE87D16B1D87140371B94DCB2609B4B5B2B3B22B92FC5AE50D934C764E300C5F16BE0A10> |-/quoteright <1C60D8A8C9B859EB3B389E67AE5A8AB0647D4D353C3C96C904350F> |-/.notdef <1C60D8A8C9B7A73DC5D77C30F36B8850AA4B95FAC0129777D76744C5394A9EB088D3954A15CF2A44E3180237C80400D299541B3796F3A32366C1D716F9E06702C5C82A759782191A2E207A0DA8C6B3E5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MYZEMU+Poppins-SemiBoldItalic /Poppins-SemiBoldItalic findfont ct_VMDictPut/MYZEMU+Poppins-SemiBoldItalic*1 [32{/.notdef}rp /space 35{/.notdef}rp /D 15{/.notdef}rp /T 12{/.notdef}rp /a /.notdef /c /.notdef /e 2{/.notdef}rp /h 9{/.notdef}rp /r /s 5{/.notdef}rp /y 91{/.notdef}rp /quoteright 42{/.notdef}rp]MYZEMU+Poppins-SemiBoldItalic nfMYZEMU+Poppins-SemiBoldItalic*1 [31.8232 0 0 -31.8232 0 0 ]msf134.085 82.7993 mo(Tea)sh193.658 82.7993 mo(cher\325)sh275.093 82.7993 mo(s D)sh323.782 82.7993 mo(ay)[21.5762 0 ]xsh%ADOBeginSubsetFont: Montserrat-MediumItalic Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Montserrat-MediumItalic def/FontInfo 7 dict dup begin/Notice (Copyright 2011 The Montserrat Project Authors \\\(https://github.com/JulietaUla/Montserrat\\\)) def/Weight (Medium) def/ItalicAngle -11.3 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 72 /H putdup 80 /P putdup 89 /Y putdef/FontBBox {-813 -263 1626 1053} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 0 530 544 568 581 600 614 700 714 742 756] def/OtherBlues [-208 -194 -114 -100] def/BlueScale 0.037 def/BlueFuzz 0 def/StdHW [91] def/StdVW [99] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/A <1C60D8A8C9B611AF24C4E3FB65E7EF3C14DBE446629F1991C53DCBE346E664F6B08319E64ACD345D06D2BB556702869BFA084B1A0A27D96EA0AA24C54A63876BF00FB30901EEC28FC857B37FA7E7AB77AF4A9154> |-/H <1C60D8A8C9B6A1B26A6FC1E1D39EEC8396DF754954F7D1E3DB77B3E75DCC8E71B44DF2988751BBF660B11ED4E65E82F7B711E03F22C94BF47560ED63982FD074CBC757A6> |-/P <1C60D8A8C9B6079F3517E07AA12A42D0278FF635F69908E2DAFDCC42ABB0BDE04ADA0383F0C3857AB7AF941DEBBEADF0944FD04EC4EEC6F57F4950B28353C283C3A0634918C5A0BBEBA85257231A587A7E2C047888A39B85E9> |-/Y <1C60D8A8C9B67A40F8E1EE4EF7AFD5D88CD12124CE28CC5D89F2E096FE08D6B2144C9A8903940098D5E81589CA53175335FD0243CC8DCF> |-/.notdef <1C60D8A8C9B7F000AD2CED2D91C87343ECCF9C077097569818F66DF60D0330D0984016D559AC87E6AD5A1B7053E73A56D42FEA76> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MYZEMV+Montserrat-MediumItalic /Montserrat-MediumItalic findfont ct_VMDictPut/MYZEMV+Montserrat-MediumItalic*1 [65{/.notdef}rp /A 6{/.notdef}rp /H 7{/.notdef}rp /P 8{/.notdef}rp /Y 166{/.notdef}rp]MYZEMV+Montserrat-MediumItalic nfMYZEMV+Montserrat-MediumItalic*1 [14.4432 0 0 -14.4432 0 0 ]msf217.395 49.4111 mo(HAPPY)[14.3271 13.1719 12.8828 12.8838 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/MYZEMV+Montserrat-MediumItalic*1 uf/MYZEMV+Montserrat-MediumItalic uf/Montserrat-MediumItalic uf/MYZEMU+Poppins-SemiBoldItalic*1 uf/MYZEMU+Poppins-SemiBoldItalic uf/Poppins-SemiBoldItalic ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 25.4.1%%For: (ayib) ()%%Title: (FP26 Flat Teachers' Day 2-01.eps)%%CreationDate: 23/08/21 6.41 PM%%Canvassize: 16383%AI9_DataStream%Gb",KH!fjJoC2>UGRpIA-qbA">hMP7:t4O."fbOf@LHhZJ,EXMPGG#o?,CWrVk1f>TBcZL-8Uk-A7dSQnb[D*GgPRWmlCA[`_1Tp%M)aaZPMcNX-TuqY0mC`s%W)Q#CYWP-UUn7M=Ad<64^J[UhY]$=i2nd'i!JGW@s^B<LH!gp>$]B'-%7NL9rmc5X<93lE0Y9]j*kRX%oXGZM)"cDTiK,"7i<J'"EdY'm4IYoi(_;BbNbpGr=1/`k.<.MZ`!_!*jJD&G$%Jc7Qe[to[Elnl-7`W>Z#g?P*.:+$?AeeBJ0t1&%Inm^WqV[\E3uS-'!D">M0$?7,=hp*^hn[,Uqp($C!%#YrT!m`u"b,*:KW\uTAbc1\m14QfLdgosU<#m\)ig'MJ(cPr>C[2u(T(.#%;)/<$Mo&LlWI[*Gm!"KgOmsL!9UcbB@Ut0iKDQ0e8&[`cdU27\jg`><f)lMG3WX_&9@Tp2D70]'/+8gN$mGcLQW!iU%B^Q,SK.af%id50+!eAU-"@2?1jqeD.LmA7D%GAQ4ItOC&;s@hG,#\eu(_qmiacr-L:an/k!7R6kGuLuHQV*sFW2)?f<reoC^X>*G=4l\HY[eBj%<uoLm:#Om=5pf@H!85d,Bl;)qf2ee-8UFCa+,!Q<V>2c-q+h&5cs\b?#;Tun9BE2m(*OpQ"rOd.B]o1TS.6-Yb5pH:!4M.^n'X#R%1O9+/*tLLFSnOSf*:kCU"F]rFD`U1s$d<f1dXfKJ3E?,U6m=.3a$dWFej?R\&4NHR*jNZZ#k0]Ee0`F&`3o.?,;in+DZnPK"McI)%4n^8>W,8@)):WqIdQ*6BoFS+r.][i[<F4d_mQ%6UVeO$tD$Hqc&&CnUH)WC!C!/#DGmT_?e9!6!*NMmt`)pa.B&;EJJS5,c=dE_%%H5#:o'm^E!O_mBZ,b!b"Nu\g"7Xu0iFpRS,T,G#*4[::o/R-S+RqV?0?[u'9,6BFV2@C<R+i0f[(E)_;2Z#sSMaU;+0k/1ur&!c"%`BH3tX,SJ+s2>J(rn."PB<'eKs1H^-"7g9D%9WD9c\S]C%t9p'@)27%kau?cKLiQI*s7,ng$1;?oFZ$Yf4''a"m)jFYc,+K1`5[H%,50YQ5O,Ll,P@No#pA??+iIV*1+eg58s>C&R8*ZfOl.CD%,(\,K'f?5+[uY]7\*;g8:@4NlL3/^D=0Ij)+5X:6M!;#e!n-D1Kkb+%4G"9L'ErCH%<^hWhDg%ibT:/&@L1!4gQ4_J>c[1lab[#"+Sl/.N]R)?">&OUZ5OK1C-H8Vc6t0X'd_:-Uu*\+G-*0P.T3%1e>T8/%Dh<1-C2ki5\CPhE/NmjdR1_rKd(Cr)7%\0"OPdkYJ=82EZll.j/Zi[sd2<JO).D=h1#ijJL\u\i&hO=#kIE&d3>t,-\Iu_RP4>,r%LXP%2`)La'ih=qbn\/,lad.;H"(Cj0@F^VgjKItt!.`:`%.DHLq'LI]CWKt;CT]!dBb(2Go-]2[5<,<":^K`0;d^]*&n&<(cS<lN%?P3K#GQZ-;oLgDsi"Vpj?k6W_aL(GpLItE?Q2k&Gig=&AH[?t;npR<V&4;"eO'=ltEM1>aPhD`,<19cYfltI%U!do^#W=(I]O927%Qm$_5V[Q!T724Aq;!_jF-8.h27/g[$n#Vk9Og&g9/C0[&YC;](]b&Wljipmo4YG.\"jB=Sn/U3q4m,3-,kY((NPVBq^lO89_&MhL%+NeqIJ;=D-ks)WDXYi>YQYgX@.:(d\Ygu)Fi4IDa_JmD0g[;l./?iIF+a=ZKSc%C@m/m.he4'%Ql.=qQ458eNRVnsFcM^<[il&RZ%QhHb,SAJ<fD>XIi%o.$pW-/I'S1k^?hCG2dWSQh\.<*EoUL.GVGDoBh0+;Rtn=a>MP2*i4'$rn?G?d1pnrDB_i8I`T,L:ll+6c?^%ZC),2nm!&.qeVR4!p]Un.VmohX3?LUW7,;55k>8N+1u"5"sV#q/DE(B+3^\63THPPenAHcH9a+rQ/8@@.`K[5gsU*XrUlNY,8e3Z%6Sr5%\5bVE%GB.2?&oOTYic#`d+]CY,?C@A^-@;-!H4aN$s=jR-7p0/LN0iGC#s_%m'Hed-\s-\!db"#K)sF+P$_fF@&M&S4et"E%rk&-f)1*]2-M[EFHoV3L5/9rY]G0V4H68_LD]:UJoRrFU'Eu^o2!++W06B#d8L2BQoZN[%QW+t',/'ZHK%^]"O#7Fc8]K1MRKc5g%!rSXMTarFD%@Vhn'oOFeO>3^2Uo&JE653P,CA5hl,S<hn^F3S>,10MW<kkQF/JTu8%Gf2-^e)l1@pVC(JnZDqP0rot\JB7_:[O4k%W7kSm\28UW\FjOt4`?p-Bl3r-k[kT[_NXRe3#RS%0o..oM,I;VRe[fs26-KJ9`K/`VZ*[j@K*=]`I(o&UEXD5)Fmbe`2L2a)KZ<_%0cEb7',lj"@e"\8)DIG::M-.!5=k64;dbEI$sPb.Qe3TNKAO$&7*"MeiS?nTMFV6tK&b2likf@3J<)ZU"U=lA-dciN\,c]-l%Hu!%J;>HgP?EPc&U/f`-q`b<J4W0YY:8=i=8X]SfT$:YZJZSYQT#"r\uhQ0<smfC2ZQ$A$88ZND=9*=72:]54t#i9gD^2'GJSbelo)18%!o6MPQ^`#Pl[`q9K^o^?#2qW+gFW+:GXF]5H\q%h#Ln(.0nKUp2t4-abj./+L4:=Q6U8><g!fC`Di>`9?D7K([I3#;f+:(Ie.J'T%`j+3tZ-XJC%ALi@mi^7_T=6ksZ4tplHEN`"/XXn$/jTjK_"e?Kc2ce"\:%9ZBR4AXCDm69&\'/AZ:3CS4>7lidU>*PpM6lC0Y^%M%oOq=bV?L=fQoO)U63Ee%\<ma##("<i#jTd`@jhe@L"ZfRZ2K`G;gQr$-*ZC=2jsb#=(*q:5%N7pA.XGc2&27Zl<6d#%3-.tHfkN_%*\q,UM+iOD$SAe<=ai!@b(p`rA-E1)G*o3gdGTM5Ns`S<g6n@OIrOe;K2>X*6BS)$<Fh5C2m@4IgKY"4G[r<Xg"rsN]MPcJ"p,i$%;*rYb/`mc;aIfIml$!ks3dgRuG$'!@o2QZJ!kfX&Co,cia@rSL%SYqa4FT=^9;959H$<=:i;_R8FI1WcXp#Y`'lGN0&.:?0@_hW]%GtqVtJ1DRXAHT)O^m,B(79&_ED*W;^fIIn[AHTLER?\6F"rjejN(&k=#.`UcIgEs9qhI.G(YJ0r$:k#WAs+3dKess[WON;GBg$,V%$_ln,HXFU@W4fm$/1/MhA.>qd"g#=::A^rO\_=PTT$%\5g@;B`^?\h@Jh*E_CW1SFq$QH%0k=MK*[@1@h$c`<s-]Fjc?"Wc)8:Fo%7qBtrQjaV)8aqeAR,br,p$ONq3aCgu]u+j!U#Mkscf(r:8&'A[IbgU.lGG3<[JQ`ZkX,3>/"R"aK55oe]J2"Hd:0<lF]V8-*eDkE%MXZ2m$FR-+lT_hSlM+031Q+JQr.#gG4(MTMgGB].=Q]F13+DB^F=!)"'*%I3ML,g%q2\V4-oM"dK9a2N]`2OuU$LVu:qb8ZRL]\4%T%mV,mDQ,_:fE2.$>F_OTA:s<gl6bW7&&.7%.9@i;08p,&kl/4"E)`RZQkgq[?M]=a,NnbZ`>dLCC@8M_Ya@Pq_T01IWb2[NP1Q^%lACnYnZ3`#[nMZ0(FmFh/3:f>Ni\,K/9YM%aJp6WSaA9q9Ul(@qAc!XJr\VE7uINkKkZmI1]PjXgG&HWJO`^H(j9;l8k`"V1E0@6%=)2soB2"4+=IsAg)r4(Sgf7lm!rQCI2)V/.f&gA"?WZ3n'Jn!>dkm\Fp/agEQfXC3Uml-9b=\X[M'_e<#.W[91UgSIfFb:F^F-tM%<JW1EdI&UkRqoQaM<Y*99AWsDrq)Ao?RY@%Xm)*+?c<4nc-LD\2Rk8\E`K@F$amaY@Y;j7iEWunJJ3f%VT$EAE2q.OYLoQhi^3Y>%(+%6;0((>s7.WBXh!c&F/XSsN='VplbU1He`Fe8KmQ^:`Ah[V>%CV%0*5TS\dT*5?,@NPBS.E`CX,ri@@`GoYGeG+")I]3d\pQ__%QZ$;Y5=,A.C9"(Rnum9&,Gk;$.]b!Wc7A>=,p9,)r<s$Y+(Jl13E=j?CMYV'r6LT=dDE[-\A%"&_4RjCJ4l=rgd.V3Y<BJWWNH.o%i;6k:JmAF_NssKPNVd5K1FJ1&A)Jt`J//4hDNgs\#^F!QII'9^s(aIaa;B(4r_%Rs+P;!.J=YDG(F3M2aUVFm?%L0K"pV7bqi7ed%ORA9_1?_Zkr.krh6X"e#Qs]9u8jU68h76i&gI',hs1(c>9$eNq@(X\"C]#lk&m43sF;7t/$HoSpJSu"/96?VI-YG(Ek:ZF<.4*tY%Al(&DhfBU_rSq<B/U+=`7D`Y7Y/4]a2WIC6>D:<)=tVo4RQkW.A\>FPYaN9&Y"P,3HWgTur8W>a/sD$j^_qE$>^"2r:uI;E1t)U1%B3_lQ(($LN^&B^T,]hS#=U!*P!b_M(^mUM3HuM^gS>#q9^_rIFaAq/W]@Y[O$CppOEmJ%*Lt**bQWQ;,C9m8:\lCW&5?^%lA_ccn%=7L@bl0Z5K)/cMhZ?Re@Ee@e4Whi7sX;p$n[1r3phoiP`Q>:V?mCug\dV\2!E*\dA&6Y9Wr9YHo9XVssj^_OeS]/@L.)*m*OtB`C%_U9;/La"M?@UMc;=NNMRaL?i'fOH5b<q:)sq;s:6?HG-maZ"E\Ik1>,Kc2K2:0tS_9=tu_5uu^o9"M.3[m,o*9"OsBl/jVlrSl8m%Mo;X>&`M]OBF&+$`ueDHg8TO@(Nic:aJFeCkpeT2gELYSFh[JlqO:**;(enj@oDW.VFY^L9C:0'Q\pF1U_is<$U04Cmt(dN=(,hb%*%nH_Q5LFAkDpRhff*g,G`ht)49SMI6]^-)esRRB8WI(;n[FtpS]t7Y9H:nV@BMq8<?KEnUVF)uR)&E@Vm9O-qHusY)7]@U^8*oD%?_bhf\%"(9"iXcu_bsB/^<W"FZ^!%^)un0JNKWK%6XFlaCB&8*4)P?+2uEOi\AlF'S@7o1L(ij%n-!8#gpG0qWf8$*=ilBZaG$dL%^KNK<>W!T7Cd#>@%Z.*$7>.*r"BSF3/(:pg-(DLVd1U=c,W`W\bdM`,;,(8fNfRCUo"mI:,B0DQT,kI9busm<lE9ff9)/Cl$/_ms%%!SSY@NAe+\Y!]AhID#J\;[6`E^hJ>Bn^l`$0dG]90(L0YW@:5D5-XZ4b#p@%o8j4En>`p^H-FBSN6]XB?mP>WE*ZWX#&qhRIf^f%fe#\AlHIrIC1jE#)#r45S."-,gK8"4@+cZQ^rj)ifX>l$4i0#.G/)[9O8lK^0!O\M([sQ!$S3IhS_sCknND'&/$SDH?=3t4DUk$"%[kdgZk=/fS(2MkE/9L>56s#\H'3Zp0De8aH/AK.U^B+Y;GVD1r05UGSF=cQ=Y!9oZ".O=tQW\lG:OTYV!1C\&9=P?[%J[[aRhLQ&%D951c'jXLLrNYhrj@*R5)op`6V-B"2*k>GG."gX>.NFFmR$mu\bb2RCl#lL];3TU.SfaW-i(Ke'Ku9G[.+^Is(3DsT;*N:eMeW[R%(,5]?Pr$R3kPTOp;6oLZE^n0B.HH[r3MTX#W0K/RjbtrbDrlp]3MTX#W0K/R"s"*+44/+=jH'0b<h?^Kb-O!].uO2HI8Rd6E#!uu%Ni7HYPp+9k!4Sd1WpU;O3g66hrYu!_"lHBCZF)TEKfPI*q@;=-DPsc7lVd6PmIXksMN1\bN\<4lX7@7uP1g;.kA]&+eH4hm>W*hu%Qfi<*+q'XuE8uf0,($5W96DhrHiD9t3I9JZc>ZMsq.^:CD5"!;=)L?8<T2*6(;M-KW%7!"C'V_F0mBb#<Fr3q>1q&h9^u1`[;sn?%rqJeDWiD>,Ye'/cqYUe&XhIJ3L,hjD\8/@Q8f<#MA)t0WT\A.iaLXC/W9pfL..cE#],r3KH<Rd4Dd%<',/<8Hpo[gE$a+^qXVJA/%#]/7Dnn_k<rD<sDjkPDq$N7r-j7^BZ057.=3_Z%CZ)YD5BC405&a)2"0&\:/=W)3d84EKtNOY4R-=['$c=Mg5N4:O8VQYrgPnCJ\%i`8P(15r^b>T5nW0h2"F78b#ud+i64]1u9'3O;\CC59c(>RjS-QZ;!fH9G$5MI;g/]*k/Y<=i4jG9&"p^U3muC+M3^4a,a_TjUm+%#p[a4>no@n.Q77mFc5)Z^5j3V*H>.5Y6;EXSQ-OSK,9%Mfoj."Ne+i`f_O<%Kk\J8o;'"d&:oAt;>GPH9!&FSXU6c\n&,BI!N,[Q%9QA/%Ek>n?J"<jfNddlg__Z+5Y#S7+39UqoN;L$6M#!&OOmK@\,?jm8R#*&*eEU:Y4`&UPHiq(B.Kjm-(mG[j(`$k)!X#CN46JVj%,u?*Tc?gPk11Bt0-K>$ZF`(I(AUecHS)9l<3BI(.N8"sss#G<'apn50V>#@`/GV4TZL/((=m<1nW/WJIgK2j5+^V=gBVicKQ$TOt%phZeKrg$q3dUaR5o*=<SlICe[]q1LDrd-Npq#bZm`f5l[jL>Vd\\iDlL;tb\a/)h0]@+ffCBV3V\!7R#NuquD:-DsPJL`NqAHo<]%5W>*^mW(q'beTJ]kQYQuAtU*e^b8TK!^"oYIEC5Bic^@Q)Xap-Q<7J2]rA-7!ZUP[Y^nA<GRR:F\4g#TI/Lm<XNH6EOb+-c8[D<U%k:u(P]7h-BA[[(nQAMADfG=n0_24:l\'6aV9WPekQ%%_J9T'kgb.,]c0-dsAqJtI-rk1Koggqe+!ZH@9c&>f&'!<2+j`5aBi-+ih%e6hPP?>1#jYud%TF?Ga?B)beIRf\AJV`r#mB"D1HUPnPGQEi7lH^XoDrYYYd,O-nr^B2(i.CKH]RAJ?4]@&,ci;^(SAlmj\3j"^/%Kf>mJ2HgNtG4$seeg$hXXs_EQ0SX>8T_G5A[UM$^1s@l8=XML$g$1Wn%;mD)$0Cs`g=O%aH;cf)*(m@KO)sQ7%J_d-Q1FYgPWr6S%a%H+'a*#.^ZLl\4V13[#FmG=GlB\JTBJQs6T0n(CibO#2P!mc$Qt,rgp"O1+rk8JeIlb[)Xcd2U>lR-Sp"(63Fr_'eebE*Fbm+AU%:[YC'[c5a&#D-eX"BS^;Cdt9IFOq[5goZB#VmdT".<2+]BT^"".tt=T\9ft42sU$<[hTleatDE.7WjH,;TMpDk\:KrD[U\*,4f`H%0%1!dha1V'a9#SE>:k@o[S^,Kj4+Y9eRiW?Vr[=:Nr9uLJ,f55P-/&os-)ao^L.)<^[S]&H"oD=h1^8_G*oZel@bM8o[ak$_Ng'e%6)d434]M\C_T]7_,@V^:O"DusV#7FL-fl.Gc.rN=3R'mWEoclT2M:qk@kd"GP8n-6M!,g7ob@VM(Fb<K.OO_o[,7:;PA;c6^U'^A%FqKb=]9^eF<B.k`ZE"`h_r9=WZChW)\_EJEf:H"%T>S0dL))e0EMl"0M?buS$*G_uK3)rkPe5AXFn8#3m'>HDkhiOS^'-H&/RIkF%:,)^^$hG%7"D/djrOJr'V=C4$l/HhK@[]IRAeq9am<+a/?\cJQ4t>'?]C:u1S:TuLZ^(P?Ar@qJUt8o$Z=5aE]B0#EG,&*TbrskU%qdKiFMR>CL$?lkWSJ!<[$a5iY`77Emo/fZObAf&IM8a:&I-A0;>",^qd?$C*F2kN&-0JSlBVMiHSu\fA\R&mFbY0rt`EdXMc29M&%IH1.s]>1pMkc_.m_QFs>2HF)LqPl7213DZm^rgee?s[:'cW2IbV)W-=='<A3ip`;$F+-pjGbB@V@Hlqpqp#YX%m9#Bp`q.KWV=Ej%D[e9e+E,t]PP+'kZ.SSIR/up)$Jq5uAqb+!B3sh2T'>pXGKGr.>@-iINrX[MXcCM5!kl,2%=8/X2_0i%K/tgRk[)MnHd'QX2?lAX%nh;C";&>mJ2WpomD/VhZ&<K;8hid57JM*UN'u&F#gaF37;C%+uKE'@tYiu)oCbn,iq$!SKL+[SbHTcn[Ub+e99ta-848B\I\Ir6<%#@J1$;/pI.CBVmL')WLg;\Qh10q01[%7aO;)ujdEc9)bSkm9VP!H5(O4iHT8s"QcGTY/DWpjkBsSbX$1#(ul#AKM2SF+=a`/O4E*%B.$C[jECUYV/h2o+Q!3gJQHS_P-;*B-kLD4UqY`*,1l1T%]=YeN0mXiL)tAoaL0OLD.X-;fqOsdncjC@[Z<,t&>1Z')na/47"A"n%e`.sY\.O%Z7NM5<!g)/aQSlog5XBj@agQF:TA"8N\1GHBE/SXQ?oG^;T0m2j\;#Fl"kJ%<$KC.=e[@-AX'F[(<9ba`"MTS7Lq$u`%*dicYr`,AYdM']GqFB!&8`S,saf&#@agSrW33"ZH+=3:r=4!!h.PN):Ka;KAh/"CX1?/u@2XX08Lil0pqBG:oPl3HC*e],t<E2oZ%no+"9)#6*"a8f7XCCU+?DgahUaQoP@[FkUhIehS8R!-h<qqbrj,IX`O[4^r9?9fA%[!OL$dTqDEZ@fSfPGYAhQKKRH*&CnmMKs'l%P0bgq0;+HO>aiK%I'9)XIuM?D?`kVD.1Bb\/';egr_njGAMB(c7=c,-4m&+''gXHHM7gX?Ek)<`Usb*E+pgY8.R>Eqi;`$UR?#0,%aE3YAa2!HuP_pf_hufMqj/Eaf5c)P8ReGTM4fWb=r<9p*J.E`p6/;>>CcL:OpYgu$[_[UN9+Pi`g\+0qL"?E_X+I*V!2sa*ZZO1s%hFASLGDm@]gIr[3U`"fq'j<c7ebt&^F<k.HK=(B'aT*u`aH\kPBTK\9N_$J?"j2W=A=MD\=*Wb/A;f?u6*2`,5]@!Or_,jYR1PrH%&mjhAJikqNk'CD]/."lLFZ)$:.N[mPQABdAi_R!?L+o8*o#7[WRps,,EIQC833/)8eY]k1'N^d`^Uu#8kYrPel1#T2:W$HmSqp<"%\Fktp4;J+3HR,"%P:=")`p%_!%CQ.J*:B0ERj,Q"'j&$,(Y]ZXR<VVG7tYX:_WADhi\7J-e^_CFg/h@qk&9*W^Y3;)D#Ic+K)2[u%0`Dtcq293\5uh[V'lV94qF<6I;O(:_dRmO9F/kDsd-f4q9KHkL;k0#-<&,@ZMGoC)5kdX19ThqBU6:?Mnl8(LTO,HE7p9q$J-goN%MWdZRqW%J3b-SDEX;KKADhIt)NVd6=fV2DPBQ3oY:Jhp!D[d$-,Y^WB@k%sh4g^^B6o'mX9:V`>A/\WC;:u=K"/C]BMa%CSW3l;b%0jjk@'1\aQ6a]6$^h;NHWUGi#L_3_Bc:ZhoBfdicd)n)M;K#TrTp9,$jVTbO9&7f3pVp)#"M'C@=XcB^7H^:DFFHknaVRlt<pl$6%qr7oG&l3C_Z^2c9eY]k1'N^d`C/\ASMZ9L"$pEAk'dH:0hm$]973VDJ17jB?RV0tp"TEtd+M\qH$/i^CN1s3kq6j?_pD:gU9>,QM%^G=j+kfNg'70\f>rut3iU*u-NdkTp$9Vp`Gk\a)4U1>/`X!X$\+d(Y:R\Z(UU1draVpP_tPH707);:=o;%$"T"N!Z'i,m0EXb6"L%1h%%dod8It@d,-IAS*-SVBk&5Op&Nc[jkKnnY?S&i8G<]09-/\`LjRN2/`Hc(k;;0>Fp.9!G!tB/:"1,TKDPb9]:gHb`hNgOj^#E%YC;](_/B7E->?ccUIF?$X9H<qL(YMA'H[8^1&2:r#(G#Jf)&f$_B+Y(H'O[)Fu17dc^;QGR!E>XFac:k6>#r+UnT-r9`hRGm3-Tn%!!%HP]09&.L+Lc!b6$:E3Fgr9oc>nsYP98U-,6'G;;N"PG's<&em#Xm#+X<H#\nZV``8*lmothRF#X/8>[Tt(eAL00+2$NK114oi%Q]cnp`F]*2a,`];?OJf\!*r!l"EkT,[b!&/*3i*H\<K@JRuf7jU@CbZ5qo(hA?O)Wdg#(WpaDj#^$:RR9lFUiAq,EIhJuoZIL<l1%NtlC2#C$]k;rRq"AH.NR'dSIC*]F/3'Jj4ch^\;D?C:[KQ%0XRL#XHC3"%:q/FWhZ?q*k*U(eI>YgqcghA-X`oM;Xj(*l*UmGA`f%XN1b+=YKfG'o$[!b:a\KX4"h0R$(Y>U<_3D1@,9Ske4,56uQoB'khMl?kp@u\hiiU+t:;@YTlH9*SM]?;.N1kCgmCaNQ:Nj?_tAs%pMi3m!OgrQHcALT%Qh(5PqjT5kX4C;aYQ9<S!mCPcfK0pOQ9h"Y%8Ba(K^O2"LA4@XD%r$7SbHr^9ZEgAV@5!L8-3O<![.c+gh_(%knM%TdqkD12:LMdX@7m^3_>&T.N+4CD<<GC(=Q5LR\4^23'caP%d4^(bQ'c-Yc2.Se?bJG`iY&\@2`qm9EEnVC`mYY.OB9RL6Yu9%\^AkV%nt"pi*+6L,0urdV$9b-]e/iW6P1_sS:,rHs%D(C5)l.VF:e)t&^pqglf%oseVLO4i&`0&E1);P>''iXIiO4C,o%ur'q'q\%o9)M*Q!hBR,;O5]5]37pmDNJ/Uk]f$is]O-F!/3(`ZgMf],$A`0\_kOq@1n-_-qXNd"BPd4S/UqMJbimiXit8a#U[13eph8ML;)Q%J02#`,LHX?PP*!&?l;SKQP472%b9R6gkVL;Mr2V[1WTVV0,@5*l#@NsIf-Gk;!`2(^LI(-Le,Q.W3iBOERKJ%WN9hFVIF8NL=;E^%W^_Z+!hK$%,q1=,N0,i]TqrOg1ue2O&Z'FriC]VhRAqTokYNm!j/3b59k::l^X0paFiI%Z0jTC]1]f;_@DR]j`AcH2m4q<9?K60i%h%fM.Iue0qP.O^;XT%/n5L_eo%cGMn^<-""g#9Fg.NUYLS$E-$h9Q_]<)djc:L&*hB(2?')r,q_<Iu4eond>OMZ#R+(>IW#OkcX.%j$Z!N<P@X20/IU)[G\$oQgtIsjk-j"]>.04le&YFdY!S-.I3k<$@lVZ%02E*Ro;qrF>NkFJ^6jUijg37=K(m#%*,chU-a$$-%"?-%A;7/c*qj$VUipo=1G`Gf0.6<RkdYKH;aWRT^p7s(!"9Wl49EFlP7ngt'-6>f4sS3Va!`rfYdK6k`5!e\OI+W]-8u#$$O/;P*[e.G%BO\iT6`/[?<_0[Yc&P<,pCa%69XEctZWA"a!tsdBTe5OYD"R"!.C)LZ/0l=@AmJ*P9qCK_Ye=OY"BJ/!`\LL#U;lM4dIN670g02+%C"mAATR\%BWljcg`u^Q\(09oY4m&-e0WsS2MLK8iq*@k-<PC&[*/e$D"U?S5/N,\8ml?o$^`r1:Pg[ZAdd@B15p>ZH",o.,#ab#`%$h_"9#XbZ!VH>sGN7l$D<nFhJ\PGuViN/_9L+tpji)la1C8I51`sNDf)OXEb%WUDrHSK-*AG)P!hq?kn0\.<?J/-l"#-:mj_Ra:3%VC]PPj%l3ligc"DA$:`9Ip0-'1b^Y:&a'<70]I191Y>3*8!uma/%FOmOLd<g;s>!-ZV]/>Z^s-E#p#Mg0e[:D@2qd,=$_XFcc-F7%rW!U<i5Cb(`,%5V&3'";;3n7!dL/KLak@^LMi\NKUW[edQ.!1oRr&(E3$EP3,Sq"<%"^dgSOma04G;mZUA%lI"5?[iEYRap,=hjd%:'dD`.BA^B)f+R<#*1_un0I!+dS0`D0"i_bG*M@uEOkh,"e4aYh/]9dmZ#qF1^&0'rB#Rc.bj+*IEdDBklX8YE/Ba`7Zc=]nnS,@%KI4RWY\+gUOCf$Gd&bb%o:<"DHR!F\@j_Lu@MUL^rH[40KJPlO8[HOLTjC($N?*n2///PNIUYSh%=)X^V@?,(@2tN@=Du:P6JP*4%*'%j9#A%^U1Rs]qod/*SQ;^kBS>%Rh1ph:J\lg)Gki_%@rCcO7^7J<.m9I#]L9Vnf<[!!82579#->HpU9.e@cB==&Q26eD@C1U*e%8uj!DGW!jab7.:LKR>EqhV+&l1niW;`:1ItNAR>TaM5DW,g0HLeh*Bc)5/Q!Rnj<,h>(/`_2:X\W6,6AmsOWL8<Y"c)(8F+o#2=B%(6H4l+1t&HZu4GL1n,C&[6hlj4a_*IjPC+[$\c$&Lh<Y9]4LAU6k/rN:+*<E>5fL2hG'q(eP9cc@cVAgBN[\-\e=+QlNc4Rpn;hS%TIiAB=ka-W$"@ihY@0LHFCX<fRmp(Xm@k%a;+#L,c&K0ZOu!Lq(b)J@"@L)(R9VVVC%2;05Y$u`l9NbjfY4C-2maaI:a1QU),uDk%V:-'K(2pO0oLjJ*@2GiMJnc_;m,oJ(#?J_J-G8!4;P>*C>Jje5(WMnQ6qNbRbHr<e['63W6YP,;1m^90<hP7;3d/pX[,Qf6aENS$%*IGY^\=V7d@bTrRE)q`1rj-Kr8CA.;KE>mD"R6[[GiQ'.X'l3&MLDs?*cH[.Utt>eB"]Xj4X$Q.0O*"FW1b3NKoLXHl_@Sal`J29%m:H]J.;2&L*L_kLR!?8$,Xm]k]87c2heg@L,>cX8)he?kfp#&!ef#Cc=f807.(o(Rp!\:ZYT43iAf#V:Ngk3e5mC08V.Pd&FWIE^%gFlC.Ft7HDZYr[@di8Wsi6e;BnJE2n5pN%dkXBdHU,1=a&iF#YYd4hgAqc)=RA?s<!&&<,1id%h0f!.o))\5:>$+$S>E]ZcVH):b%Cc"Tn.">'E[@c$l2ETtWI,qXHWKQ(,7F_+?D"LGEh?*rT%<+Ygg\g.b#_5Ys[jp]/!j<-3X:sCqrQ$7c\^g^k_m>edr2@NUSrA2E%=jD:C`I*80-PBiK@Zlp6eVcog1fG/U)mFut`M]Du?rK+Q,^Q[_'l)&'#5lQ.(oe!?Oli)D+=YnI4-@f0M'nM\NO;tfb.ai!o:6f"%/=)1@<_]ta(/LD-)*O1OXq]6Y/O^$$/32'jL)CRn4h:B-BX:6<1O3Z1*CeAJ/Y("Uk0Ok',q-E/_1'L>!Ku/49FsoBR,&\=HdKe8%7%l6k90NW7`ccORfW1TM31/G;lJps\$s9%g2?FXPKcj-eD\sE"@"T"YQ:JDpg9q^-g^n:YK<@(/<>E*sZWm.%*P@qA7Dc%9$/VBo%WDE;$"fRY(67Y6].2V/t)&esZT>#Gu1op3)!N7YZn*Lrt.8$(]_#.$9APCFE(+4"Hm>3&A2i?X@JkBV$otmL\I!.6>)0?D>$`00k%.uq,jHlg\q-AIT;.s4F\<sGe`=>[Z\dq7;fKH%X.(78G_?X8PhY!BO`D=ZS$VKVNBPooLtNkkBlp&.g,J0uKeJ4m%WQjSiFnd7MY%inh0O6^qiS'*+hl^_2/?.u\rH6MF09a"]-To;\[g!Zj/j`FrVe-<J(H9lr4+3hce?nT(I<UX5k"*,h\jYP=eI7i5*f:\pSgS:k6[%JJ$UH7VBpuG+r0/]>i(*f6B]W3=+$IN--OX^MXUc1G9`g_bIa3/s@+:_T"GsdqXL_r.C+_1=Rmp2MT:ePcrbgJ!4d#@q!KE5OHS%%RWV7]ZfN"@XP'+r)&WYE9T4un8q8EWF7lK`:/9o5.EQ;aO=X574.`k_a?W6q,$Bk7J%TV[@rg9L$>LD3>YglHD`'VNarts"/G%DW%-5$V`I$sA5p<sAJW1R'OaQer.$8W]FOZSl0r`Wj[4'*>%hgCpZ9^g+=!IebHD;c\,@!3i8I>HH5NPXY^MTr(oRC_f6D`,O/.#@Z7%kS!H=Zdc@DGo3!8DJQ9EJ7\u@GJ!pn!s.6KbYSWZjB1I,U<U9SahB\uZ`mB;VU+<\@!_"FL?o1T#^ER`?*O6]6Tb=/<n'DY"SNVo%`_n?:B4oF^!,.=Y5oWoI(]je5b;Zj96WT]r:H71Mqk^M-:^\b1bM6QNdGUkU<j+Q7pUib=Gt/n+/"=1X_#BGo7.60H47J+91jji+%pM-TIEk.MKiQkDm-np/a*?"AKR0'u'J+]B2ilBn!i(,NRgK9<UdEkd8n$("IV].&F"bS8-%KHRe&J)KeZ!In\=u5"Vo*\#s!`f:O%:>.YGEN92XWsf@!CfTjl)JoIf1^;=sDsHh^kT(2FYjb9gHdcX7gsFp>WK[9@>DM@:.?KLWagYZm(kP":s2LW-1OGIbY3i'<k>Ko6%dGBGj$@\4]Xh:t/XUJf9JMZKA);2omd)>"lC.sX=H+gchm)gS7ck*cEA-N^n[q8U.e9&b0A:&H"J48m:HTT8BD!c$`?`Bj\"Vu+a%I-C1t[Mn\`RQofD4#i$3LtZip\&A&qrESBb\ph)SD>8L*d>e0d1:<lSI%8=/r[XLp`P?u]+.mKK[G^ZDCp!M\JWhsP+*I4Jq@DfG%(H`<_.MVZ^0#FfOD"?i(#<ls/Jj4%mEpe`8,<5T@HlbM`H2?;#+#X5bC[q)U'7SZjK3sHTh.[5clP]PFFHq[ViR^Tl[J8IUSA;<k%oPQ:Mg-(*+#16M5s6/a^Q%;.>U*!#'\#93)').5kVqAX+f1LD/bW)%a78L4gk3tO$gURT@2LACW]5daNGe88p'cCV!,9,oROU)JN%+e;^c%ItQip@Pe;PXnapk\)T^H1ITt+-.NA6$.gF]7,qm\'r$WIK]ZjM;.JJeENFjC$Y.Uo,Z3!n-f(Vl#6/5+M%L&"V8\^acC3Z%.IcC^%t:ShPogOg_=rjh5R(idrsf`MN<r5n:lPPDW])u1UacbNElJep;K4e$$rCBd/1Aec"^UCuC??!Y;(=nF%',h;Q$)jDa5"Us%XpYN"6BG$F0n^F1LQma+]9kkJV),(>_h'?,-'Tie@rX$X>-e\b^#_B-m^-%i/Z5GKm0%d$C-KJ*-I4eF88<W/PodbophMX0Ggdp/%,$59Z%m-O7r'\U!/i$;c_1hFd4kP`8?B&uZ[rf0-]RIE;']-pC"-O(KM(nCFfqU'WlbHB,OL_#4DJ/2';k`CK]q`g;k`Ih8*=\d5%p"^SXUg>K\WRSB]H2Mu/#QQ;q,D6mu:;:+P7gk*gk$:i/C=\:"o"g)+@[&r!NjGX[lu=4hP^>Ph>o2)HiG^6Zrc4<S3[)e!D"nRe%0<(LYEY/!,[kD3"F9<WQ;8$q34l<r",YpbK,P!Eb431H`*\'[JWc*MLO+c,F\t?B/O$C2nc(1T&$ufjNl@hW7b]LQ"nCGpD_F(B5%H[h>-$L;N.RYV0&Jc&GX>YZ=.EA<!j:*K@8rRM&kSFf*KofOE^"MNsf6YL0?G]J-U78i3;OFJcFqQdNlX(rj?@Ntar<]B7M>H*cC%p,!lIlt/25l>S9U$o5^Oh$OG@l=DnJL!HmQBJr_d+BW-/[FYNOpk8nB:(Ro&6+M42d0-+IA@!Gn'En&7]*5"E56[iHba5IBA%)Hl%4ja[7$nshn#jD!0oh.?9XnKoOBW:`p+KG?:3L]V0MtE#_+]>#[`'lM-?Ys<YjiY.8:]TX,1E.7(T,aE!`</B@DikZ^+1is/O8!2D%^3"S\nX&sUq^jZ%,Z/'TK*QTr1uPX^49.B:d'(1D)AUukgaKr?#)S$diMRZ?m4jM'4\-Z5I&OqQF.6A:fo63fO*VVSgE&T;hu+PF%bh)QKlMTu<d:X*Yh:j=4<gKd4m^%"u\W0)(;PW1LAYK8jV)P:'d$Z9f]AaQU4]ES]=<i>]da!c<.ZJ?0B>1uL[Pt1:L=EG3iJA9C%i$dXD6.r^R3'jW@fJ$<cV*9)H#3?nNpTC/2oMKk55$jmJ_:mKO$f4TAa"s"DM!:SY)s:k"K-n+WZJTIpaCBS2J07a=_$jC"<MpmJ%CNO1/Cf#+%<"3%?)XdfrXh,bqeDm1<27EH#gnWa[9F"iR4ic-WLV5LM6-0aAhe%Ler*\0qqSkeQhDZg$m-^8m]q%++#;,iH2Q;n,%/(6f-a7L)b'[#KN!n6lK=0H:6^oP_SITF2iO5kjK39^).S-JDU%m=YH$l\0V6,=r^/"Me_);"`9Q=8-b]`0ao)Y?ICl3sgH#!HE.%ajLBIk!_A5bY!YoQWA_[DaX]>O62)_q4>Ot%XVn,'T=4FH]d2LptY)*R11(im:?bY#*!hM%e#Hnk(C\Am`8:p49qXKiOW'9:MsG2%l'g:uAEi?XA2.b,h;95Po7fQi..XSN=Ur.%Qk*@IZWh5gH"Tb+d<b"Q*qV')0Tc%u4LY:ROk)!^I-d/@\DH\:B?;h2#MkddoU+_R%QV<bNK-l@C9[=dJ)8i+\'H,M5[p=<g)RMb1GFm7FK2t/ldUm8QBOc6:$<Eu`Y)2gM[Ljf;#(6c@NL0#io0H05g%1!rm=77]A4K,,%hJ<YX/I--7/mb#JK9jWKe)?noTP%-:a+%AUg=nR*ok&HSAi])"96kAb2/&!IG'I1e#6hVNL92L2?_/pBSkKB;Wc]hXK7;UpgEhbD%+&d]RT>Y'g*7seC@DA+'784#8WItMBK*qTId&.?\G;8Jg]dAYBs29$+e9Q;`GOuS%JjD2b`^M\48\W8u2P]#]7H<oVhk)VbBNTTH%+E4F&oo+:Sa^jA'+iBtGgQ0[;d,,XuK8TTh^-(WC0F6f0O/q`3H.\Dec.u53]dO9qiq7j5%N:b$8X8cJe,79@.%o5\nQJ6tp5h<E%)an+J(d"(-Rcm3fJ#XT46P,XI!"MU>0bpuF5N1H4T>tm*b2XQ]H)E[H>XSu'?K9_j.qqdjR?rRJUuUdcB0Ki!'^a!3j1>]!Iq/.p%#O$[:Z/nn,H4-2X:VdHU#4m:H>*A4WRl!6'Uo9UdggW3RHogJmh-*!:egm.Yp$'umVs'\p=3J'O*ThXjnnFEH]Pj3$Q$&J#i8B^*%I/C!JHeYrU>$Gc"O"Hs#N]3$nY/L^dhR5VsL:=@=gdF;RUXh3?Vp1FF_"-_a+kROZVc+<,k&1krbI>5L(,GcQ:LF(HaUPSS1;uFH%p#31;gYEf0G@C<Sh^oj2><N.c]%Dum'UsQ#6H9RR/YBHUc,Q1%dnS_3j`/>0@[k>Q[E2UdI6o$Y;-$K!5'g^#@nEs#0j3;hR:)Ql%ll+GsnEN>&Pb7(_H\SG"YN;=Vp8Ml-a[U\B]T\,^jjle*Q9_YQ*dg/9*>kW>\0QB@]QgS:;N[r.gs4;`XM72hGBV+C<I!t$9D=GB%;1,lV-SC*di@*/(?Vp1mq<@E^cPiugZA:T<r4j$'JjsbN%b[D,qr1obr'm"C\O\6CcOm'@!-_qO_?HcIe-O=8H?9N4eFNS?XcWjR%#XgO-fHQ1NgG+r(%mY$Hm4!eN3l12B[t3I@.fu8#;qFTM@?'-tYD6\[[oKKoFFNV]5jS+3q0;Ks@s>E5K<CKnK]Sk7?:n;0$]Xr5%%LTT")HULO#(<lsZlDj,FT2!rk.3UT+D-5"12,0&i7Mo09]<d-:Ij9LJ9K:A@m_7N=Kgad9"Vk'#7^+gp+J!%9rtOJ-H;,/K?!=9%F"1<.)`e&pC!/fa&q>%83U#TCgM*,d$8(f#*G^K^d#TesXTpGL5EmbA].o-0^8O*-&_Dr?=^B@,jPeK6REm[Vm<4W;n(\OhApE^O%lV]ee="XLlB*m*(P8o@hV-=l4[%`>dbTZ*9?l3Qa.?mh6r"0[TVF&Ft#Hd:lC#c5ORL"lq;R%i3Y+pXG-BH(dGd27aooHrJ:Z?gf%q?*YeRoUgoH5$BB"_`fdHM_58fo:9=/mm5Hf1j$XLUks&%C5o&/6pQsTg0?b`3P9'Wf9B-%uPi3:T2E/e<(GkjHilo"W.4Lbj,P5%V0e6dYQ[8h!uUTjX@VZr)CX*+1C$C26H,&Y8#@YFjtFH!S6Xqk@h9[ZOmte>^+"MRT,E)c'HMqlc_];'C??$TcrI">HPu9G5Yhk9%*]%8]QqEcW$Y!Pjh_)-?AgE[:B-GI$4FR]^f.q^KDMZJ==rZ.RZ_4%62\Y:)l)s"+KdfgOe(nM0/A:8(n5H(E/i;&eTO=sm=:`Df%'HnB+9c"/X3mk:IM7CuK<SiF!p@'3XNrI,,6iL$ug(b]JHtHjBDH0<33YU"n/U]MjC/>j.0ZICC*J;ie>E<SA%(Gtcjtn^Bq^PW-%*n+Q*.:Hd?7\>Uc]).5?OHkJ"]VF@/U?6i052DHI?di^=&;ncJ&7JnHGA33\>n`$.FI^RVNQN$-2+<JLXL]>8cX1"XiRGGSd[qB#%@)(tP:'S=Y2dN\VbEq`7d.OC^71'5MfRbR":ZL60@6,]/8N3@4Nsr\^Tq:BUJ=h:kf'u3X(Q^qO^a3u@ck8*I.R$rW=h?B:_@0A;%pPuu-5,Y9RRhG(!/["=-p]4^1U=I9ETJPkYZ##Z)b-pC$cT8i.1<"'G*RCNE=fqX?g?1l*rFQ$3,W^.A5-`fl'mQ6K3XF0F,tQ24%a.#@[cgHOi@^5?oo4r!c6)C&Zrh(5%3[gPV/toT^p;S.+`6"C;kr4i0i6lqSUs@i*5&ZcU0h&-I#0#FSJbu9@bTP;FV3pU,S+pD]%#G24<Q-S2L>7)Nhm9#'B52ub7]H8)O5oYO/I"OV;7k_okE_NNAS*C=\U$gWt<on>j0Mjm&`DGF"R*#*_kf3$>3h_W"@XD^]c4"=B%V4q04WUgb=FsC,JU'_()on"to0+M$@$Abc4R=aE@"gA!#%D(Y+1iZXk'0oM9=ZV/)hP*IE,22MT/OOVd3C++ZO2_\D7R3q]9`UcG%$BP<_&UscgVZr%F)OS)nXMfnE!r8csWZ</\9L&W?7dIAg!"G!g9<PQW!UrrP!aldjh\*\$E6Fj6*c.RO\cSHf6`\>pI!pd$_MHpf%I?^%JT@fi;aWU%*%Yg$u9b&_Go&D)%J&35ZR95hLgsYPW=@nTV1G3YfZ/colINr<(i+T=\TBMWOL"5SS?&EN1f%+e&,dtF?reZW*%BBPGKp5g7lP,#h76fRHq"fP;H6;fdg%Q?uZ,^O]V<Q/oq8<VkP'8g\'5KQ@m4ssa&)rBVank!46ADC*Xr&u/,0--FWPHeGgcf+Wg%p`X)*ZhZj;r&#jfrYd"/X)_/%C!`p/LRJ"[TLq]bYPk?D7+AojO.f6CW'!25dq>QA@hLng4Yp2U_Ksq,)R_r6VDRU.3':1uiVD*K%iV!3DJp]aE7@Tos?9+oB)QMj^rOup%ON2q$+n*>b'`b.F'`EJ>+(5QsSXqARs7B?)U!#dfkVkQCI;#@ub5.KSX4m\#YA\-8@_jE/%hB1rCj(u<l$snYB`kpmPaSB`+m7^8DEW&nA1D>8=RCC`,k\gWqi@[;5R1,Dk[4&5q=kaEgp7a_1F7*[R:1uIsii&L-;QpKGHI9mr%=o&HN[-r;<<]_Dg/@*&<W];/cpAOAmPOeE^BdX=u80?=8?#spC&2&l.+1j<m92`2WBjrF^'?]BMqcoD"^iYEO)^H?s/]5m[d4@F+%\(AfbBK&kfe^teQBkOje9kWoV8[KFc:5PiPQ)rVt0"go:6+g&-c*R,AUE?#!1%ehFIW/hR1Gk65cX'I5qN[g;HKjq8IDe;jCX8;q%_LaZ][.`^F0[il5h/]f#TZsfQ%-do/iCjALbZ,]HW`YiU@qoVb2eGBWot\m#AoD8oZJ+Xmo?Ls-I[FHcGCYlsX_CE3"jNK"W6%rS%3;.uug0=7PpI_9S77/2n?;(cBPEU42I[oEXVH%[.dfcYV7=E_O?AN]jEmV<812CM>2N>%CIJXK@KaV(3d)*ZhApO<!]-6AH;nmPK%_8=J5f'hR#W6sW\f.P(E<L:"LJUVR&=(c34&4)!G_/[tM0`%IsG!l/?:m!H]>'Q1cE,%&M"@DB[W/QlGb\0FI"9IWc+:f^7MUq-Z%]&5"p%)Y[R!,u)1UH2;I<U"K!#)n6rIFZeqIam$PX4mW@@;S*H>2)k)JNK'Z9OTH0#gDB>^85QfQuA,MlGh97_$HqpJ7Qe71+-Q_%0>kdtkAKb*L2CWSEl-M%Cq2:VfbnMdO_ZlK5(K_El%kpJE<1s1jWb8D&T5Aum)mhG5ERY+SDM',YaO.3@WuUWZ`"^A0o3;_Lm./W%r^_sdhA#@/Deg/nU<\E>0S$HO$X58:c&Op9/rPaS@;!a.#[11bKqc*$g/7h6mZTV;cgsZ_>]iTF0"4%/67&.s6H.smWft-PnbA//%rR$.!28pBAgdq9.SWAL9fK3`[E%:eFgH")dI%eF=2dbe2\`!q0['+k.L[?ho</9l3^@:A[S0W!a8NGL=TC8djK;YFWJ!E4./mslJ%="!WScItB>EGL3YVQRgq-mUD+jLRTtj0EH_kI1>&QX'8)[N(M_jUsFVS<?)5923?n*q\mR0"K7D2[kS<e0`)!bJKf*W%n1m-I6PT%pLKJ,G&_W'Mh3i4fBr:7cRf?\GBT"\m0p+[lg>168eKkdJ_s&B6-7R(Z#rO.^J!?=XTiA/=_WVL^+u+]*)mL,:Y%*&of]H*Y15f=%/ij&hC^)Ik2@Zu"77J+'O$68ns2OH*ff*hP>A%r%>c[8h0\XA@b*T:)W!?cp'j`Ut\DZaN^p"@(q42;f8Fa*I[krb/ei3I12pddJ%Ful9%C"B;%Bq=oQ[++nk';X^&&cd&b+5!m%;tmC[16#qum`>5Im:Bnc=_FQ_1[@dX&MYr0[apshXDmFb'QXG=<NQ=D[$E[D\bdrb%GNLV]f_@H2AkVoE0S"2"<Q+qE770A6S>*<kM67**1hmbH]bk;)?"dW129!W6cr,'eiqb>Gp+@W7kr$jjil.`7l9,pmL9Qs9MI?kL%L"C9@K03b2$tb<mT#24d(E.%9j,7HWiE4G:5,I7<U?c&UJ'd3(kIAf-)#M6(AOj3"8/XIpNZkZKDG@dpHM<_^O1>C1etOagA'/=o%m<6.,R&eXJA$03OS975\f"W>AI:g$02'&qU1ES4H$d,K6V_L.O:XC^UKrF$YiOUJc53H^9N%_m%&h"D3BfXZ?Q7[/`bXAKW@;HS;%S91qaYM/]9+MiJUFEh6qPcRR=VCq,p]cits`gj`%flJbtnmAj!#7g#Arqr&II4*ikL<^\>bHBoSItl6d*"3VL%#D31q1Mo/HMh"l%`EoVRL<NDtVL95M'?0T$'U$=4ipc0I=pWf^NJ89=k;583Z(!C@d"+cgNW'pNYmX'QF%&ZMSDs?q^i<K4\AfS\],`=T=,t:l75C7H%%rBk6g_k;#9Uj3e^aeX3B9b(43()!5[M+qGlKn0\A*lA*F-9d`AQN&uA#AY<g<Y8-Z-I>"8Q"n[1SWJG.n2\M_9B8]JWdA)E&cOj%<!"PFKA-G>+"R5&iM&qZp/>t^3^M>rDuo!>S^PP4l*N=+FPaHb[rbBE_e+H0j]#$t!0f?3[N6<IIhn]OF+RrT`LO:!n3Mrl9:..h%)7"Re'@E2tZ]Q:I/NS5"Zgc$U;Q&/b$Yu/XZ8@V9rrd'"cFs[!Nsn9jb8rMO7W?Vo_B'Rc1$W:c+8goQOb$YJZmA&k\HsXAG\#=&%:7.-PW(.&T`QTQ:&j>Fq4p%^ifZCa3=[!`CQ"?=@j:lVgXXorACn!MK:4o]5NR"o"f"?i]Q7a3(1)&p=ngg&n88!dEOtX8&6oq5Z%gZ9^/=iO+YPkFC-88">[B9MpMIj1Fd4;1>^PAlp=OUgjDTj7&eX%qA!k6XN[9]b1J=8b>*=cueK&a4&>]H&ef@rf]o3a4RJ4-(ZE%_E8#Y(9t`9N4kTh52$.tblWlJbF>j3+R01rOjuMiWF9$%Dl1UY#)_cQG'qW'5Rnf`;beP+S&Q4J1sr<XYRE_Gf2TQm56]En#W(jf%7*p6dXtWF]R?KRpPINDsL&c;Pk!.GE$4jB\2V;J[VEgF5EF.88p"=*nYd6._P:#V4V8bPtq5NYto;pV\KDob6@c`hiBWk0=ef@3X%bYZ((\ef$B0:Xg"qf,Tp*NNpGrSS^X=\:O$Z9Sf9g*)2L`)NYVDefjR1o&hWBc2MZ0I@pdQ'kNtX;S>Tm+$CCFue$sbUWs//42d+%@-naPmnAZ,ba'JeCI[>uj)>g,Bc1)d5eqga?\Y3iPG0o1bX^H;B!nI0c7DdVF/elq?0*:A3XOhG=irXJLKY'\-*gEa@AiH>]^RO6%LMgN\L6Y,]Rq8p.%\3VQbUf5dF6McUp!&UdB@Y1'1:WSh\qT..Y]K$pHU0il.V@\,F%2B_#+`V@$g,ghB@+mED0pWAgl.r/rF\c7%EqYHc9YfA/3b-0+-=H,`R4i%u':>nfQp&Cm(mWZ+m)n)EA.6-WbKLg7>unt,U)FrN'Me4^k"uQ[Q1O*J0^KcU`uV]>U&YM#PEG+@%oM3M0Fsf2rko4NbL:]GRj-]Y^@:pE7)fTndVMNAQ31hL*8E,#MYWoqnkW6'&*iA62caZ"!/.2`J9f5;nbsB%\N]p)[FuG1#O]9*I%6u`0b]fu;Jnct1m,4ok3>@.3&>"@g5ir&"ZNG96n:U7Ugn'S<DFPu@lrU,u90'T1NG@,T6nH'BcMS=$fqX!bL_C+TBS0`BB^4XOM%=7FOu0A)/P^q@6@9!6WM=MAJlS,>jEOG5C]f#<Uf/m_bW1R]g:obXfK=sg$Oj4B*$(7]bj27hLGlV>o9]OlS[?L7+:0(nXbda,WN%q<mX_@6#aKjgAYWB\P(0$clj=r@6FGi2Y*46Pj&ZK,R\Wi-!WYVM9c2D(,if;r)O_8)Sg-/*>9U<U*k!*F<sgC`!khI2Q+UN5)c`%(pb7t??^6H.(nuZUO'&%Bnd536-ltj#=Y!C)?s3J3"tWI)Vlq"XKq*4nE?&u&_m-YFs!X<o=.$3qI(pY-ItDRMmkRa*oe9/mptAY%F&X3e6"=NL7(<Br;blN(fK)q6,<X[^D`f_ed6A<bK=SAj>aAH:Tc;[6e'3"^^2Z9.SE%-LFI4NGnD(:R"]\-uXj<&l3q,tmgV]me%LNE'Rj/$mY:-^].d84Flr_,25b>$3.8m)"E+)`T0"glB+$SMb"l!0hUe)%0A[qT`H_b1M^]$^_.^$Jphd'8T^2'`8=*tNPEF)^C1%[C@33[:RIhR8/"!MbC+A%KLX-X2.Q4<BSfie4tKG/tmGL9V5P!E,0GR[F:b+bG^tlm`\nJFugnm67.ec`_3G4@rbbrPUp`(Qu,>G%bo%^>Ag<f&FuPIpH#hNmEkD`SGMQuH4ncA@9n`!uGMUMc=5)GRh+cdlAp)kaX<Fh%]C%6A/?k>fE:1<d7!CWGG%[stiT8=`R?(+P%h9@X';g7'BTD:Ii?$B&3O3Z_X36ZoQ"CU&/\&_j!F&m%HnZFrDME0sTZV\mA[_"ur\snC_oA=\gdDt`#*(L5D"\Quq:]3lEkRdW/%9FD[I9iHE2B1_c#$N4sHh7;99qjT-r5n(hUAK&R-Cih/]k+.oa0G+iH[kTpd@6@AS09=H5k.sbs;^7aocf;noVdc:=kAUeE7NS0K%nHUGb`_(<'#iQYO8kcFB;@7u405LWko(Z72I&fBD0;$9t!9l'.Lacc>4,D`;g)j&N,uH%"HVX`]?;gf6n[tZW9L,pu09hfFZGaDO%rlHqdOu>)#^k0k!rlJ(/P2JcP9?9c[8:N7>`Q6/AnrdBIiNi$;?s_g?nra8]ldPZ`L8Rd*=^lZ1:(:N^\Y@Q(B'PH^?neNVClc-T%*Bh&1DE5$_7ca%fb'RF`p'lQ+p>S*FVfQGp)=0t_;RgDe0M3b#'!hB3(T3buArGbMaeI0k:7%9&"LAGX$FCNqA&\lY)7a;e<!9rR%R:.Sn*]$W4[N"ljZT4oNe=/ZS$<D"I>.h)aNI(@^[`FGS`]NOgn'mgM0lcJJ]m9(NS*aV'4:7N6\PmE1BH1O?%Ip'Kgo0D@n&u=`%3U_rR[ZujF$$Qd4W+X<h[D#QM1OII?7QnfUFH%G(s,D?UkEVFVbr7b>lL&cO/)8u$@d,UPo1D3PfYnIF(bsI3.q@r>S9NUCB$4^?%NDR;p=IkiOEoT"RR/LFCoC2MqqcW][hHP)CYtY\?g$VORWbafpSLK<7MFk7HH$SG<4n)i'B"+F-il8HtmTmk/<S3IM`loXI/5m:l%S?,.!D&h"$EID84*$oPV^'np2.h'X&n_e$)Z9$!2lt.]inA_[<-1@ecnHhZ;aGk7l3kq14N`T`KEV`WVre>,`:[W\;]#P1LP=pi[%IX;-j;3l?In2Eut#BB<N<sO5Eh5WBV'n-!b_O["B>$0%,R(oL*lj).3AJ9,2os=FaQCo%]A$o^CPE`anIB5/5]lCPIClYH1EpOM]%`jcFaVX)(8hraNG9iZ*c]2!:ilok"s4nDrqel4,sbOdp')")HPVJ!=eVlnL<4(2iDRGJSC8rUscFEXL7i4<4h1-Ma@_=BY#3>FpS%1-OGA<nHT\WYdW_K4*-J?-JnRV[r7*b-T'dS.CbKg7(M@-T20dl(^0!00Q"p::<>Z_S-$]X,Q)^GR*7]:3[3h7M-!\dqNff,\?FI%DgK^^HNoR*.S-LX9$S_bjNTtjfO9$lR:n>s;Z1e'-a=T2EkBk+Y_s6E(R8YdF%6gBrhu4O*3P,gorDir.":hibmnp,=LME5Hq2Q!%m%ED;X$W/qkD5=?Km!*b;)etBY4h\C?ik^*f8ka8<k`\Q=DH;h#AXKG;aTU)['"M7<4UNSiMDjiqQ'/;DsloE*DiB7QH;AHBshr/%f%R63;IG6b*0`":4&s1kg.\Z/jQ6*!<IUP,I=/r2oq:F>qeM\uppMZsaLbHtg:#8VGkJR$4&:2FT=C0A'U1nC=6"-&%Ng!t8V+>'%Gtc0=5!H8o\lZ?X1pQJ0SJPV7Y/Ygn]oTA0Og#n6I'J-=0kfk)?fS/FeY&7Pp[P**:N*<>/JbN_qDmA^:IE8P3I,SVZVMENhkF[=%:L^[U?["8.ZZ_FoFY/4`IT08M$,HBiAlO2D4kIWcS@>U*lPsSSaJ5/H\eZiLW"`GE48ijM^'sti7L,2ie'iu%F7;.989nX@a=ccd%p`/aV5kQ]`>Yn?FiLK/.<sUY:70,W3dt(8?5HnX.QSk=YI9?R5>6(`\2XN,$Z/d:=Y"\8cSsp8cj^k7ILO3c$19luB:buCj?jDk]%f33R8n<Q!@.F:a4+g&`6Zu^PRUd+Il@EZ$m3KsHD]KNcJ1LAM%B=>1^7Jt:&Bn(1NrF&c@0.p/p<n7#Ndf/B&qD5+tmR3F&P5[!m%ff\Y?cD3\XT8]952eURrjLfMN0/?SVT?#I1A=<-MB@<F2bebgrDpG.C]naN\m;L:G5NBkA6e\/]I^,+9YVPRh0#3o+"s,SfDpG/n%)74DNr6:W$B+q%RQM*7EKJBJ82FH3US4S2Kb@64OAki-.bSi02qjS6jkdd-*m;L:G^UYaNF4-[$`>m?XAtkZ8jT!a.Q'U-tlCh8R%pK5rUS[6c2/0`GbgYPKMhBm0+NRdQ-lM"="FOqM?nQ5RTJq%*D(\Y-(`7:[5N!Jsmp&,`&fSnq6#NB:@Khf+Ilf(%=`#jDnNHP5o%K8&PD6XU_".UY2:rh8^ZOWM156ei;0(;t0J;f]Hm:QLTKDS1[_Ci^74CV7ekeP%6%VQh'),D]Y^i`(e3TJ0P/faDfj7g8d]:V3s(%MIh2c.kdE8L=U$dG$Vo5$Wk.U)L*IdUOkmgm_ij83]Yfio(_b=eA4m"2FC3H.q'(M$q7"/6)"f23Q1OD-.gC<;G*tAAdMFQiMD,k%P0Wi7-n8d1;Sj%lcNKhR_6(1f9hO78:R2]9FYZlVKrGnPUeWk=DDT*dnY-tjaJPg6`8emW3bqQ]08W85]n.jPc@@l/$[4FRXmtrm%B2)hjc`gV?Y%[Z1Ze"bm%Eq9Yr$3U\-<nFq^a)<`<sF*dP:S;\LK>]uYHjcQVi"^Nn2e(nE+Q94.7X<b,T=h^^^'b$_ekn:@E)Km%&!4scRV+]E207s+kdQ4ZG&sHE).VW#QZ7p$bcoP6hXfleqIU(O2#"gQ_T[2XVNoGRM@O'63#V;hZhebq=nirkk\Mc#@l\X>N`F#+%-9ZT4aXn?7XLZHOYt,Xq&MF$"2s5$\p&7Wt.HWaIni]S!U?e1LN8#c+b./"pF$IjhZ%Dp*?:PV#j!;;mK1/X=-Md6-p[B)>nn`6!%!er6FnCtZUh,.Fl/aP$,Ip3\;D((Y8kE%W:TB`>HQOe6EX8%5-SAmH#>3p,G183YT@b2c]'f-O"g/<&Pj<ckB!4TUeYctHFAO>;D%7SA-3[4c]Cb%*Kg0f2lUHCgX8`6#Va\:J@oV"7iheYjRkjl;FMDI:_8[[WK=nk^-r8X6X8Dbf$_gmP`6C$RS9AA;M)_])hg>-<!X%_<uNbjV/t*],9aJ=j-;PBU77(UG`VH4i]/.e+\_PUGapn-1!JcR/LDG+(K.96U+\>8NT7+3`QC%9cTR]e1dlK5"e1nd'O;k?N"ML%:n,rVZb4DD>+:k/3]Y3]h:gb;Mll,lY$NrI:"C0n39_-MZR/H$X[A]T2lo[[a,:]Z%<gTt4>f]M[b`RjHUV@`h>FNUg,gBh^WFqE%Rd%0F=gC$rG@Sp;SaOGFCUX_i-Hkn%-GPkk9bS(\bZHTt<'U2;&+bf4]F3r#c1X0`-\K]V1#&P4DeZ`=0'CeBR:9:L4&uu'`6<b@%Z7E%p:#"C:YnkP>7Lp]9Q>gW.H7B7b`o/As0HY;9Uk5E[hBBkbntp>qkW4,a?,uMFkT_L>B1g@l7i]_sZP+:YH-&R\.[o>GWQ7RB%:1m/Nafi7e26=,0X<ba[Y11rk6DFBF]1Y"ofc9G0Y^FnL1pc)J:7,i-pX=+S3fpPi,<h'hh9L9![0qF>3Q"g+']m\go?\u)eV?27%P,:hD@3+\F2.<[\'S-Zb5Y$J5Y7cR8C2?51kIJSF,m.U#bjX=,6oUlOSgjst$X%cq)eV7m@/oHeZ[>&<hi:/I5J>=jhl*jMbsqs3%%t$X&Z["hr\E&[+dG@H\8ptKRM39:%13cf3"J>]K\ESX2VgM^p`uSMts!&K<4nq\UpNA4YJlc3D-]>qSJh2A(1Orr2du+91ijgkN%I$"o&B9i')nuVlb:=a`-LMTqbC%A:@h2p5tkDd+t7m6G*H%/M:$f;*.qp>!oq:&ZMOjD@_Drf)QF@<i4Dn!g>C>_DiKH_RqO8Q0$%08umHNA,fQ"]2WMR((8$+OHmc0\8Lk*M97eNc(HVhgISUrnI9=C:BQ$f,Nh8btcm*[[&8c"7*Xd^Cj1Xes[\iKtX$K$Dq_])TL'2%<*4;$nOo50AP6*+IWC'XK4!rWWKsY]`$k/;UKYU\Laqk0<QNY5m85^P7ik'NN-I^[-Y]/)m[[DCp>@*=oHB`3,0L$^KK(I:Qa18#%rTnu+57sIRXk`(c!9B;F]6d:`2B(K($i]ReEONj[W*#g9^%!Nk%2.j<Ds+#a!,H4kqu3[>'2/LoK"!-pcW/^a.);<"2[hOrH>QXT%!@=b&TTWirFj*#b_o]70%q'bg9B'-S'(uXe'*3.e0>YN-$2RY`7m!%U4m;A!Q5i"pTA8D'U8G)2oNF)\\O@KLDF18K;XOFK\9tHF%aHKFS%@#gD(-I!sB=Zjb]#PoK>\e3'`AdneoLt6@b+N\9WAK@]Ibm\@K8-D`DLI'iZNb=P4b8*+iI.DB?^TJnp2+la"*fsl,J56X%%;uG.?LikpZ(i#-8[cs;M:p?rhk#ISOFLLB**4UtoC"o0?FCqN_&e(BLB;Z%`jLM.JoOn55odfb7JN.0eW]duQLZI)0.6*X5$3&>%cnY=%c_E#YTm_5,P/$-(0]_4QU:a#"M`8,c&=Q+^?k%1&NZfg63/@`17Cig,52Fe?)+or,O8infbU:1r61(GR?qYbVein=RZH<8l%]Vju5mX'+4?B%k)Jn>upbOYXmqCAt;Vfq1aja9VjJD&$4:EEIZd*KH/B_N?s`7h)\`"*ubbEiq>)Ekb,JZn_kWFq86G4C1>7,ZZ0%UA#.*;`9D5$-MKHPf,#hVP$M?J-h_h<)N^D]ggiG6oWQm&bu26-)urB'YJc-$m)M=Xi%&&FCH!LPJl9[=Fp?l1<M,?EoK8f+IKje%bkkf6]!POtI8"4JQ>\F`lM![O=8%M.\q>?k?Xf([`J+0C5"T%U;aBY!*Gr&_Kh?^L-gr@*\($(6Y%Vt;l0[?NHEl$!9S4Zc9L50L%UQ!XlKJdOR8>6Y<C2s<g?5'V?$%0H5WTI>p)glt),lNO4519c$$4Z-ta[@MKg+h*24LO!<e70>paPcA9+huc[+=EeQ.F%3<_*36i%+N)ZF7hn:YoWp4I,-B#>lDJ"/V;"ee&ge>fmBY'mDu!/&<6Or4lR@f6$Q#Ti`t1k35E`T;Yq/FTF;n']D98k7H7#UHFVFhJ(i&W@%9rmZ3TXY."NBUhBWMgT(punT^Z[K'I]EtcA9<V?F)G/-9k)5TP:WgL5R&d-<Z5-[6lo^0$:,KS08K&9a<Psr@Qqbj$g-PZ!;cR=M%0kKidk0pH%m(#onAa.P^TB3M^CK)hK)\M6<[5&bIB!OqYSV,+%[1sY00B<$A$#aD[4#5H:2gsG-k:n)f[r.kS/bh42WBE]L*l8.0%^<l&I"s4gOESLb=qY&RNo=5?3l>8I?;3H1&)A/I#/HQU-#Bs^H*GXr$,]L6d)`rk@d,`"[[kM(R,jHS"poVU[Aq3XNLb*]7Rsc]+%6[G.nd"UsVO<ii_+g>;6[;d0UWZV!n++Xd]XXr&HVirplG_n+=*KO:Ca`<)ARYe'La_;TD++Y%O&BIP@Ba17CTSh'`]ub1_8@A\4%[Q18tAA!0pVs-%4("U8b=ZG*pa_@0%]KHnF!l7Q]h=^i]I3(e8J_5l15=_@gjueSN6'[3CW-P"f5KTDTr+e77!i!+l,`^Eh<LJgD%KUOmQTg<T%:t5(MA+se8UNGgl8>m*@?$(/;#\E8AD2!@!^Shdq@K/=A3>dT0)`t)$Bh?!MC.F]*a.9"%Br=$ir;0:N8Y+Q?IkjO1%_sQ8)^a2s7A@iRe04)ghmGBe^q9pE"*3>c1E0VflPNFHnjGKD9&N'?-Brsd'\&MF@DeG(YWnQo?Sa;&TFT$6!9jD_$FeF!nB3B+:%7aTJ/G>jBCfo2L\J/(I`Tf/L`J._6B)>a#1Y9DM:Om="*OO:$$bG%gp27i!54cXE#=*:`u%DkU7T6f^0Ra%O0(-3+"\lnt;.T9hK%RG*Vkg):Re\$^U,D5(^%2er!l,[mK$[^BCo\>#[T@".-4ZJUah5mPh^;:QLM^TFUY*0qmV<S6JY<-q0ePCY2enuH&Xlroo5FE)Y3%cRN4>!M/:%pLKBfRD&C*)ieh(5#>W'/qi.\#YDGR#kTWLVDf+Z.q$Yh.+76)P2TuJA+B4Dp#:.#0p;0toO,..X$X)!L9</\fC##B%mn!',3Vp2%BJ)#p@S`tMncSrPQ,*PPU,*L9K?:cbI;i"))V!gA`PdO+Osn$=-FIL7lS:T9lZ91_IMWpD'[(?c.X&Vt;e5:U)OUTR%Sb:>01/q\ErK[GhE_n)L6#7r;Ggm@7r(p=J@&S_le<&TSLc.+JE>2Uc%%G"M5>R(8i6`/\.@:]57tR9@%1*O9T=f>a#7?&t-)"aY%@n<%$>9Y1&J-FUPUd:ct>$!$O4f/X8i:3k<TI0f71A7i2-]/NKK\YC9ap3L[`oWs!+)LDE<:os0r-Q.Z1KLgK+ug5h6;)^+Miafo%\R5[^3^BqWZZQkJI7Y=I?ae&[B-Us0dthHg=$,tp-tKS6SEQV<r_N_"NTebY+<YmE*7ja9:mNe[r-7c]6r1BbXK/ZNY*DfS\ou#P%g2:C3h6"j7"%'aulR+'a.$&3uc==fZ0Go(o>*R(9([&%DMtqM\5f7)?$oZXY@78#%PZf-7V$+=78"^N%_I4*uKRn*(I.An%gP$@k%EMo"VGl.q)'nO9T*kuP.jJ$<aZ3Io@)Dj&Ta:Dbf7F[`ia0GSX4t(Or*5m!]oNl5@97\+/*_OeQR:(Q2p_4F#1)1f9/h/Ge*9G2E%%iM/h^!ICI*DlU9ZpB`"#-u3i?fN=.=$;E"qOuo%r[V]u-*@J!Y2A(Eo,!IeB1ZW\o128u$MirI'W6%qR(;tdMo'Pr5'reZ5L)(R%-Qg_#NmkQ9lU0@+&C3ilRp9m0)`ioOR-1Bk;se0*9-7IWI.mCU$oP2_SX\sg^Af0)DghDe>g.Ca[8O\2iprB*dt-\;I$S)g43O46%=)YFe__EIlNNiP_FoFW2%<VS?[5p25+"QO#[KM6Jk\+feLK)nJKolf,+cU,%C;P@Q'[&[q4M=7Zp8!]D9UVKZl)U*k?&NKZ<-XW*%4K?/9Fe[%I+-7jY#"F,C5-b8t\UO0R\K\?7D6YEd%!(PZps^-Q:9-sqS!%L^7\(P"i'36aX\$64Iukpq=,X$&bJa(&-D/!.g`7C%%OuF>Y/$u,3]k/3[XDhOX]*bFqQ$hP0B-XXQh@>FRfCRA.&KsWPZcDTl06Z)1$`P`Z--/8'`KZXkhi#n"X&"o8mU)Ih%mm1&qW/k?%dmcYJ:G9gJA+7S'.2b5r567KKI/3!bp">a*gF::b,?khYTn^qKd6esY`IAo[`K7%JR;i261*sOd.B\uH?oJSBquRXp*ijBTShl0!%kYskjVfY7jo<gFRE\AK]:Er*r_.NGME[9Damjh_E1u^egO1VsGRrePt(Pr"9h\aa*J/7c33_e6N\FlTuo_.pKUF7IGi9K\Z]mYB%%+]kua5Z#-tMc6=pcDg0[GpNOalSn6(%R+Jg^WF3fm>VfOF5pc_<E`]^UOuA'MhgnEgL[15)i<DVYlJ=A:$l*XH7hI%+_mW!T</:I%(d6n-e7EmN$po&cAM=5UMSKmk7S!pND>+5qi*b[O9u):K-p/Io@>\Z;&r\a1Hj6HjH&(8Hh-Yd`adadP`kg<+>KIDiZ!0>IDFTQ)%!;Nl5]cE-PU:F"49"kIH9CS,#1g&aS!:B!DN1>Dto;oA>c+`''6I'k@Aj>qE5G4$tp8S,0641r[lZoa+Prfq8CM=tY"hXYee?PW>%6DrTR5VdRP[>o#U6$.9_FC*PN&FouJ&!1hs3H9V9hiB-DIj*.EEbktmMqEVK*RTT?E<[tPj:51eY)f?Ik?"(nX=8$c>tnmE)4E\7%`@(!LH6[[S\aKo4XQAB<oAFMQ>_aAF&piXmAA=][Ir0l\UtEul"s%-E7bL(iVhs\8i3QG`_$3?AqTBRqqlt3!r$3b6,[9UQKV$Ir%e_!2d*"X@&Kr"K3d+<Q^c[X[Y8r_!(:Dj'"?@rl=-[</5)l6_.LNRjV2$k,`LmLjLjdkf$;u.aoG,u:;@SJ0W4JRi&0LR^3cLMK1%:9qub]l@$/aq_7RmcT\5[6?dKV5E^930.-)WFfcP8s!;Cc<iG?&#J`/X!%<+_+lbBl'2aF2H(cN]=Z?cTtET\D]^%f.RG?r+4W=&%o$`$Y6U$mKmB4A&@sju:p(dAO](bTfM*52gr;,j9/m].(n><DKg]$mbp@s&e_qqqG*,^(;pbE=UU$M\,MK+PlEqa:"MrtK/Bu#5%%8o2)cWmNTl7q*+PLpJX_oc^Bp0j.DlLn?\=]*:S8aUTR)Q>@*(NNt_65HI\Tbkj,&W]C=AY%>Eg]lQ!O/o,n,bP&h-d<VL;Gdt8\%;)ht5h^6ZGTTeGATB,NV>G;eC9sl98rD#QWN5%PW<J)me=d=(Gp!co$]*W=s[Y)SG(IYYcg'*'9aKb5(KuOqu:WZnX%.+Z=etX)W%/[e0WP)0n"6J<a^V7fllA)RD%4([p!#"cT%%o_C^1^<rT'D/>dUnusTG7mb<=`,%'9#naDCo"n)kepmTH33FTCFC2$!R2N"5g2^(%6E;HVAFTEePUaHCc@JZd@s$Z-rIcdmn+WTH5-d^ujkCd*Hk5)UDYS8P+hG3S<p6:H:m1`u+Zq;Ra3!+SFL.>r-TZYGO?Cc8;rgNZ%[S%E\p5[Q"!opsnY#VnT'K/2\,(q66V2-_b9N;FAP>2dM69RTK*4L"]FsW\G66/O<:8eDdT*Efj0I460EG84R-LiO"FGe-=qr1Q(%kS2+[^FMK:ND9MLr3lA72*+0`,5==k.;Er3gg>M3I#8i5U7(tVa/>l`.<,!1=+#lDSYDWTs+^:_2*(oo0>Ar"7?((4pjZXuMAhj;%M,a9knL5qE!10P#VndA`\7LJOa54sG;MYRJrV1j*2huXN)L$Cfh]1X,4<uu6a6s<(:ikL4s#]]qUFF?T9Vs6lEB3Hl6;?Cp\Uc^#%g%>p0$:S52g3cJ"fdldZW5,m^I<I=8B"UO?Ofq_^nH.J)gT23VK8I>i'aYM=OcYtoC8*9-WiB<K9:*92l^.KBiJkK3OCL&[FZ\"!%Xa$3"*:Oos)<Vs3ZjLF6.!)^2+r[Fa!#Q0]N@]Jt*)heu?WZ&+'.6EBZZ'9/+(pYp)1UU!fQkQOT$r\[l-WoFHu4SbNf+#sWj,:t%J+gU(4-/BGq[.EUK!<lEah9>;!G$a95nG^e0_qsj)2LR6?u0lScZeb`4\o)(]8aHo$;&N_E^F))dke[:f=nnAjn>/T=[)$m>^Y#6%)u&cLoZhjPWS,BYq-NmG>Mn8OqXElFmiQrNepHjLpG$/bh-Y*VHl1_OiEs1on`B**L9KM0nbQRo00Ka$`7O\o/p:[l:ODj8P]le=%gj/(X'k(HL]jo!fIf%p$iS*.0QbI_?bNCL,o6mrif\:Zf;Y`p/d:Q')de,PoEnt*;]lraL]l<B3bO9q$iV!!*(Vbf1E:`ZGp\ihg%s0<GI^N\$&'TR\!X&kqnq\-p/MRrAc;7S?`8Nfilo4V=HRA?E%OEn8U,P=_DrGml9/H2kC&f,t!8GjT7Y@$$iqU:cA^Nss[3H0m@%/:[Yi.i6`$](G*.hRp3@kq%8YSSQEc`)j6u2aoiSk?r8@GQ-_iGV>IqnrBY3\-L3i=&a([1<+Z*I!95UPom_L(];1'>nWD".SFF_%i.ck"mu7U$ppn+>meOP%4hln.ls;LiId::2jJ?G8D8ecOi1=.+5)+Qi-Nbs1kH,\iT9LFeU$An$]]j$e\DQZQUV?KGhC![E5#^_0%lJGtE9(DZ8iTGE?M#.M4]FFN0B)-hh4a;*@#Z<S\m>YD:J):1>[k?sLgWtAL1=:]A;?s)m.>[WM]DMi]*fp$L+0l59.Q7<KEu.HI%T1h+(o'X1!qJ/Z%ronT.P'!";%R9oR#/C*\0<O>?@5?H;5HV^^1#!0-o!JWRik@PMqdmuk=6@3jMZ.r!s8I=9IkAqB_%2[4E:qeY%\(>4j^,WiUo[`airq=I'YJ'IOg3`:0pErKmY^_%B_'i!)l0aH_R4S(t`$$@'hcr'fn'T6B'+q\!D^7f&nrj>d^OQ"&UGqbgb9+K@%rPk>kp1r:S_M@lXoDT\QZkm%sn6:8h?@CFTqobP2O!2@V5PX5iL>uTdGi_<>@8VlRHhHA;T?Il*(Y8O!8e6TAW,Z\t_^g@uIf,*e%Er/olbZji'H6c%N(XtJDon,j6HC=JBPe2LEo_LukhS+L8f1T^g\b.c+q;q,:S'QM^P+L%X=4oNiW-e@.k7;_n5k=?D="[Vg)XYLb%q0m@45'Uut]USc*KoiuS0.miKV.6_/jjFe.p@IbP,-_"dF&7F6rH._rq0U^o'iR$t=Ei>01/@LjArFJLkfq%ko0Sp?SAT(66dd"P%?rmB\?[21J8V09h<W?<%H5AF6RnIPqXS/!%9.*C*WZ,c^\AI;M@XR2;CPc"D]_tj%JjDV)$"Hn2A7mn:oWZ$<;W*)Pk8mn'D0j0V%)m;f9]X+*1miB^XK:8S+[@R%.:?=o$l,)+Srq,!(='p2f]]/FWNE9Au]^uP\mIPQ"i^+PLL!0\=jRV-YDn\sC1_B'I/]I>_rUa/X%M=-`!rp?;]ak'krL'UG:>O9#)fjZ1uZ_5E)+5`HDe<I/<a(gcqBp^(bhfE4`IeV8^@>`d`Cc+nKiVORFMC4*,/n0j4/hgeoBSV/k%2W:^u9jmatD8I+4iMnZ&jXp8,rA(h>c+(+a(7JX#O=i1E!V?,$]aFb6@l</Ro$b:W"g>!rm-ZD.fpjZ1i@b]_)m4MWEs;uD&@;8R%Pn+t,11p:/;FrQf_'3.N.3i0$SC*PZiX"LKIt`COdTN;^@=!EGnUa2.bbo^i;t$@<8o;8OnVWf;/t_5^?jD*k%B"'`'YPQKe+>*6%?Ah>A_f?\;UjMPmDAfojqdArOq"H#jQ='.)^71V0er*<tT6=OcfCK`l4o`h#X-]\1S;:GHFm6G\Y5WapT"F]k?gQEK]1uc1mB9k\%'97ooEoF)ZG*$m>C(<$Zp=5Z#CcM.Z5;&H@a5"@d-^*="?a,Dt#FAbF/=J3+@Ug9_e_.'0_m)`"`".@.HqK>7#nQJE4MQ>R2g=7Y%EtEokABMC>@ZPoU=1e'.q1Qd;?P*nAYrD[0F84k>@h>.-j\`43<-spBq!1#ngdp9]jYF!*"9/LFfR!'"ZZtM"Gg%/q^WsVqIDPUK%@/&f!9/$)6Wu#,GE9'sb`4%s9](De>Yi+5p=o@:*KN.s?Kt;=`C?Z7Qrj)E#Hq6*.2,86qp.p%Sm0.F@qo83A?N8cL.s1.IURQVm%(s\^ESNCW[1L@\CphP<DNE8;X;e:a]Ns`u+lgZ/9rPGfDY$Ch&U?hEQYD-BZrk4#XEFBRp^%l?nga$XqUt-!ER:tEC(o=#hH/<sp%PSqHQ)?4>qDQYg[]PK'8rl_@BH=-XKn+Ut!p53XP-O&?Yq^GkNa4HOOX%qNR(['SdVf;40GXHqIrnpkl+sI'S[NE/foXL"9Do^n4%="jO2LNI2*__1U3:a2h&\<%E_rWh9oml,,P@e*%4n!;^_^&?%%F[>pUVP1[!rm0kX&PNE"I<:mC%3QCom3?s06:11FEM`<CormhR%l2'C7!eu00Zg7g#NZ,KKok=)T=8"g?r;M5,KTcI!f=P$6V<hLt(U%1mmEBKRIc!X#Ip!-?R3J-S%soB_I,XMJ?ekGgU"l:8"o^-D%ZYt7,-gttW>52<?e-T,=;f>]]l_Am)ae)i[M#WmUqqEctUjhH]7HuZu#lT]hEVbsm'lX-J(icWafGhRhjM?=#\Hfif$TnA)IVD"'%KWc^Am2'd<%r_F=_JnoAQm^?q=UsFRqY8%=?gSZE)KEERX`(fJ2^VVe91sQRb8J$$/ia6u9,IV_:&RuhEU,D_/ACc*YH[r[q`c@/%ji]J:T9$.'oBECU[k>(Hf<2gcrhjW.PE3'Imb97GG1%\[`_6&5kt7]*Ks**>3qiQd`EHsDGXSXj>,7e;R]h1(D0pa+o%iInHq=dq%m_\C1[\#n"8854*7nslNRrHc,!:uIK_[1YfeV-d'\\-Rcl\stP'*5)EZm%kj6<*7Cb9rOk]^Dk+ns"e*deFL8Gn>?R1@[::5uO$]%FKp\f]P$:kPcJ(9As6YBR1[)\!#]DDJ,M.!>)dtN2URGgnGh5^hV\95'rJ?BK-C8:&Y&Hg)CL65GuD#7+<(kM-#6H<WrMhiQJ>_)%F2*2$hOS4Jmad:L$KU79*^'?(&*0ptIeUb9HO%%[p"fQu^TINYnmD=$p2(o*G0!hc,m/J_mFHulHi*9FF5q0t5BuMRp;+GE(Vd\s%GQ5K`G7PeNrV>=;qu>Ba!mp-!+5D8<XmIXn/!'^Uqh!&6I4YQ^Y8?.br`\I[op4@hPQ-(1:RT)V0CnFInisVLHHnf'Z5[8s%?kbC%]p;Uuld#6V+16inqY'*]\"(]KhXiJsQbU\(*sM;_D==pjhu<M>DYjpXEapU]^V*QV7E8X+irD;+J+/Ll5P<@[T<Q\_r-S$WZ[[2r%B`#[6]2u/jq!RXfm<_&;I<Xeq^7<2epM]:K\.]q;_uJsGnt)mHs#fnEURr'HqWH\lm'-rehY[9FdG6l#[kHXOG8IFYO!!/lHgc`L%EAr>qGjg[jiKJci,6-esEqK@Wp[<NSIq@t<CX>RigqIk(iGVf#pnrBsSmb[nTt#OHh0TYjSp^:hh$8.B++<eNp7;)iml`YJGN.(&%k\7MOooNu][D_Q*V#">gbO2/tI<PA1K7?#OU$LUlrS\ho]/-K$I]C'fB/kRB*P4@,)uXDtm,7=#hgPE`g\A[A\*r3<rls<5nr!5r%/.K:Aqqdm=n*Y[EqtRf![kElYK<%V&Keei)n*E/k2@%T@ct3$f-.;_#X+,PEs-&M9Lb;KL5+X/eh"k%M8#j5fK8V%=->+\OGrLEu%@NfT+.Jd.4P#HQjr]g/:C3qGYS7::@V7#]]*5c[YV$N29D:_2uQ='q*==A;N\sNW/(d&12)Z>Vb59o@kCZIUD]\?pJO/M5.SrEWd%[lu&'IhZ=8'PDVqC6$6\GF(i`A*l!oQ"YpqgZ3i1p>?<,AkSe8;5fd6TNY4VhujE>K"M8K2dZg7RfcE\%qa[C(-3iWn%Cjj0hf40%L\-NL5,3qs9bBfI"J%W2,qi-6#U(>Ar/;j!LFM4Mq<ogE7@\eloYP-0AN+oY5!-%"?(^61YlKJ%"Xr`BkM:YCnu>u&7,HZi0(-/!%`uh%g.*CFjP4uQt^CI_>BY-jW-%K^=PV1:9Z5[i":a)YqM'Ns*h"AchJ@^+cGn0L&0qmY2p70i[O<;GcJ:\@/St^b($r'<c8i:2h%`J\dkTQ_U'!p#gE!&aR^_9fJlAXPTASm(.#]UMP;:h0WQrAHnE]L>)+.7,[-RS*.^<ZcXnY6H0-fTRXLHf47*P0FT#Hsck&CR$]T%R8:q:k1mIIq5S?F45Ar=A=i?&)&`KH0\:9eH`f>^-3AL5*<T6qPs*.&-Kj'pChB^"/V%Tg%DiiKS\a2oOun7/1(?8AI2Ua_>8'Fq%JF]ZVj:eN[[LV.0MdT4rSSr9qa`M$YXfOS>#Ti4!5/ER8>8Vt)$l^h#=8!Nq&Ai<".KWG0Fd@Pr$;c`cX--Q&dLr/[NSbF,bH=nM%APQ<m=$ko7!Z5+gDmij9\`U*t=ePLKAc^"A3F+YGS>-Nf%VIGFh--#f/nL)>jL-"DAEq"^?>p$.18g4Vj1HKQT?CM+EbN/O4CY:W%)H<Wg`dD'oG[E<r#"FBhV:N<F@!;]2\CU2Y.Q>>g*<78iq@p$)H,97AM7m%.0;:pqEZW$=enWg+>&BJaP/SnL'!.2t/3mNE<f)LN%L3QDDa[PHn.Vd)i@%[Tgqk@.sG#4b;].al_;r6J(S^7jQX4RSc]O9=LQ4OGN&Nn[Vg^_/MhZZ/2ncDAM:_WK>;mI@4D:i^^NM.NU%mY]48k8Z3Uh@[<l>3$mm7nYHo]ILuF;B2SbCPeX<-&_6%=*h]=j0I_MFS:;$QphdD8Y#tF#)=+R$??uWUp6&t.le<?.7GT,:W=`R%[&k(#QZ6qTIe"fC+%A_oK()#KKTVqkGY*T/are7CPe`2H'%uq4hfua:,^Z1;o0-WpEgJh*W5FTf"G*o[DaA55_a#B?fa.jm(JE[I%",M!bgfiD+7-kS[4I5(h_:$?Z(2D=)bgm.FOaGLke3KT!\%E]Ul_)R+Q&)h-(%@7soSs9Y<ItA<G\uba&mE;Y!^U;E$Q3]`k8G4q%>Y&45_smaNX@]U*CCYQQ?VP\cjkPbV->QA&+h_-DK)$aLnTr,?qC2a@[8DJaGKJ%98ZiaPGIRi`&?PV>fFa\6?Nj>jYK7SOU?$di%`WSjSo+3BM#]a(I%#"Kp3)l94/%SPY]T0((0HaOR"T\p$G(H=-G;RS]prq8Yi!LeYo8Sl*O<)Zl=+Z<<Rp7fo!ZW[8`Ub\iM?oX7%I'+8p]q>W`(a2Lq",L7P4Au8MSgf1=kngp,"6>o1"B,DuJ?[0e\R0BBWrd\]qX5(^:>D#sG+i(0*n^^['Q?c8,htq!F:\_@m!4[)%#=92i+=>d6i(^.&PJoN?<<<e.O`7"Chh%Gj+fbsNQYTs/>acj)U4C!J:_VX[N0.A2cj&GQ*M4'/F.%8O+U3I9ac(:98pislCG@'s%*1it2>lZBK6:aOK)e.OOX*]VW&!(Z,r89IS?-u=&g&a5"SV.X1#=7=9^d_H,N5GlsIlU`,RR*p8Qg5ce/6b@H0%_LA5rJk'e%+ME%i]thPJ>+9?#bjd1<'\N1Bq%rHe@`&$+l:=[gi99Sk7FZMKjGlE#b;WSLR0Cq,L8DMfT>.l'>+RY"Yf\p@hqN],"(H_&MJA3Z;8_8%qe-W<a@),gX(igA5mbLBZ7Dk+;J/sjG:N2Q6'TYpaZp_?\48G7iM-hb"Hm@i/aG?2;<\IA'N[fe#!<3Ccafo'!-?+G2c&S+c<WhA%:qWa$?4^Ru1DaFBJV?WCF@@M[OAdS?9M]=N5cLd-.I65Pr'l3Wh7Q@NeN8!`4bR-,$7&M<m*^0u7*p(l)p!\bXif_@a9'ap";8eL%,*iqrD#oJm(*FqN\WU8ZZHuf!Ya!B7L_C=4_LIUL$%>1c+<!M@(Qp#U/fKJe]V>O$,ppg#beRb>WZnQQGn9U$3C;1+>-)!ofa7k"%S1h&L(*K'$Nbh<\+?sKo\KKt-!"C'N-h'*h?G]dUm[8$bb%1q=9tK0O*TDrqH4&=f(-sp='I)2.W8RFhfXks'EI>Ml8$PM=g^7'(%`:jCdO8U\AKn<cY8`[Fh5h/1d1(UNe=@I.<W"ARA'5a:tO*nf3)P=j@F2H:*DP#$UL5%-:g]V=Z`2_0-KeeM7TOtZhs$4s?,&>*q%-J&i-[j[Va"m!0<71#)o'(eg-kp_^QK=-L^[dE0i?(q[f@F>fm#*<4i<KP:9\@Q!C0kDYtZI)LB4AN11AX$]J@)S0"8-af%"qrt,%TCW3POF;i*LhNgZ"f2un`(-:'+WYSIL-kC-3!??K*gGh1AWa$WJ-rUBWMEuu_:aQR6_/.Jr^=hGnd2LoZ%-"oS;2(YCih2uSm]9a%;+^#ACg>r)6t.\SWfZ;XS"&[Q'unY:V'_(!7PA?In=4khWDkJDWC)3p%>ZpJOHaudpQTMAK!@;'T[0+?"^+[)Y].sb47;43+ZKI(%<9Yk^BbM2U4X]f2,:N4o:C6,3*1B0q\o)fq>P(5fHk(eR5hu%,,mb#SW[<SZ9Q:6U"][sEYBR'<FpOn@WD4_%<9*6abS[A$,[O8_%?1tfYO;:r7Y\p>Zc2gTELD<gZj[1NGajbCUVAD,;+lp0<XedEo5XFpl;pFi3"Va,E%79#b,J6/UTh9YlbM8S$Cu&U#i-^B%[A[+m%crGAqf>oENJ[Y^-;^^[Wi(:1TN[W:Ij0@Rn`YDr!9fKp2j>!UZTc-d\p]e:4%b`;q*A:WJ3i]!TK6cb\aN8^=?,FNkSUt^9Pp!5)%kU&5iDFMC,TcjQUXqt9t>"SS<(]o^)G*CEuC8/^hM]`#ck/q!(fL]LR,nL5Kc#Jh*]I:k<+,V,F&:Mh?>-j95o$0NA&WgoF[70&Q%,S%[b)b_7TM+Z<K8'o7tF$Ud6T``4nZ98`O]]_9^M0shS8R2j/.I>1/C@bR?[5;I/K&a/1!g<NJ]dRf`NCh&o8EA,<7I-'nJG]P3%T,8:g!Xp]N0VD+M5UHDCHR&i['e&6BQ!>4t0$jm6]8:h^+EFU(_3@\q#THaD^iAkCUarC#e.&Dp;+=U?h*;1Xb^bQH!mHA;9\1?H%j!%_>Z\l(P.\L[p5[5KSZ[<oT=U\97KH9+TU/R&R74JY+!1fi:1rl[?g!ZSGje<kXW2s/=c&eSt70aI&0+5pj0s\[]\H=Ln./KJW%\V=BUbq$aK9s8(t+H@r:Fd.=5-fjl>#A!))a-?0.DE09Q*X8rM:&bO(j+*dFoEl`)[(m/bMlg'/=hsjn4J>2`-Qu+R$\AB/K2P$/%lEMZK71m2P&e\nk"KUSKTH&e`cT<WRJ<?*0NJs)88;X5S@P8.Xg3X"0_2/M1LM/fF_;3h6dIe!X5Z't``g-1(iBfQ;m"A%bR_],Y%bU2r=5<ktPkUcj-=7KDV0dV_f95.<<YKTf942N0]Wu?SD3Yf=FhDYTqiV1@gA:mU^Y+Pb,]>7-plUtP40C<UA8lU+*-._G6&Y^sN%=NQcK)d"T1.I8;ECdjA[<?]/FSS\["47p,51-m'bUgi"GaPhsg1TX<%l2l3BQA_i!G!t]uUA.H`2>K)mVLel6?;=SiV4G38Af6$i%/t:BP6TN.C8l.fRR!A;"F\nsJb07(nbF0k#"G?>W@[j=lh+ZqTn/LY:[$f"?GTMJ+jJ3.p18X0>HD9RJ$0+dY_J)@0JmmeD006HX%!Cg2O5pM9@2Zs9,PD]R#hM](h0Tmh3(<O\i5VdR+YcP\j`mqkfmNE2KeOYt4]TBpL$R(U_OU=o;DSd24hK?Md1^XL-J6A:a)DX][%$WI-k+q]P,$CM,37\U2G5o^UgD&ZI.'iJpPBiJRqq04-u_r1!&"UaZ!Go7mFl?'a+(CtKlp(J/^KYf)=H:W/njHJYY@MQ,D!eIj\%!EFpm9(h;H=hj50,o0WNi$H0,Lb8`QM\H``0pflaGNs;g#>L<a&u;*7$j<e^D4^$BQ0*2"?j6>FEhf_i)E]MAaGCPb$?[MS9K`Xg%>Qh0@F4*KJrpU+kL*])QN*opF7XO>^6"NA+iBlYb!QdWm<B1nHjK**3.fPQ)_O_!J&c!:I]?KHRcY>1kY_c+E$be!0o^k1B/;M'e%X$]XdW^=Vh\8E"34?Onn(2?OU)-(@s0%G&8H&B=hm`95`'Llhc%Go-)#a@=s2<i6Q6Yc^!0IP<ZhOl]k6m18dgq='8*t=F@8un@]%&61V._&fhKB4"@^as;ufEYY^P;!SaIi!t@?"uQp2\=%C_Re*5jbD2'kR>+kCEq&@%pF*&gL0gm+@KQ0g.`29R:/t@('c9IaF<\U%%U#&'Y\/h<6Se#`s++lia+/ka=1VCoKoAJP;UN]PK.C_n<W.X.fSXG+M"gUD=1t]Y.?1i1#mG]<QHiOuhTh^Sb64Kon;7Rj204YTI%D?dM#_:0k$cuXmlU1RT^Tk5[9J-!"j6N$/k:-85gMI(gekWg`RC/Jeda9hf*TU;(rZ\=2T(hWt"a&HbDM^f>/SYFts6rJ0L*V(";%+QF;LB7q+QY>H%8lK:jFg/TBN_7SY7JM[U.ER&Cs*DuG/jlF[:0+4ToT"6G['L%kJg=,SdDhGn8OJB15Y@atY3XBi'4&0B(iN1$;%@T5]bJG;nhPYOjDX9aU%7tmEIcRSu])Qj+B5Ji]4eact.hOjp76oQ6?"L]Jk()>gaD0N#6dV"`6c<M)l=+g<sW'\n3OhH;c>t.5/%=&o+???Jl-GI%(-i:WlT"1eIc*LH'U?7:Yb"$p*NLIn?7\g,S[5^PnbG-2\'O^F$:*S's4cZe#EA4mO`RBu);/0T`q$O4Boj<]Xi%c(Lg720^FtQ4h^Q$F=)oPQ5'Wf@^JtK//4YOq[-GiMJ]t61h=o,mOT3d72XAj8]/h'HCsh[<OCA%8B/;^UFSS[oF)[L;#*e?-A)e%i/PD!=;Bd[a1Kqr<jUYG$>.bHr)N#.Ka&.G:ddg\`qT;3@0DAn:n(U?A%1arN)X.l!7274G4'%/Jg!>46f+kgRUi*Lfa!rc02JH%%?9nVf9)V#r?r^h@XRdoId>lF6Wj"*AI1D5$-q:79<,'sRf*<H/.8Zf-n-N0EY!]2-gZ2be_49F^V%fQO3Dnc'-!hq%Y1bU=23>46%P_Qf]e&DW!XoueEeH<Dd!SeX?6'qfL:%9#s)Mi=Jp-q3n#,72YVM!dEgZnpCK*WN;eNTGc9,D:j-h8%@>4Jbbf/BE]Qns+<#GeX&%#3GF``.>D)7<:=?<.MQ"XsTg"RU8bSNC70Yig?7iP*?YGTb&c28hs\4_qsg9?n)sIQmO"FH<U\KZ_/3A#9<4qX6r75]cK%%<EGe_%"qF]lBP)0M)\$MkgKl`@3&:Zi$(g0#6<A+3d+#OI;]cui%=V;7G=M<TpVZ@od&1V)C!El/(7Q=T25SH;B?7B3hddCU>PG#%6thT[%,AcQ$\AVP1K[jVnEA\WNJ<Qq'`XLPo%U0m4X1R<qOps$cT=`h%jOW8F"/GV;(sDVlR"BR8YpZG73$o7AN^2Z!n-jn85q)9>C`-tg%(>6[6&nkJiej`1iM(;:qr?RJWHD.Z9mKJ55e7G8B!YPIti-`h^lEc(l'iGJ8F=!E3Ll\KkI20mcc\dB=AB"c%a:1qpZnPPmZspJ!%X9s!o_h9?-#di]:\<3bC8(rPE(J]OECFY<+$N&j&]eo5._XEM5%%3Iis*TB)fHE9ul^!+'mSh^)]Tb+B7/4%F`h!7I&=)6(<%s+t%KAGIR_PI:;_516#Y_;sn6NhUUS=chsJRT56<`W-o%N9`ub5e[5YZfSmW#sug@G&1!<,R[ZU@C.a&eRGUPD8=q;8J!J)9u'(=\*kc%!>d$PUI$ER<$m3O`jn&b5LWR9DMBII7\pXD-KIq\9-F,NSuO5;b"#uL)Splaj:>p(.L_T8*tsA86,Ke9-H,g%$`28Wf:lRU5K$^&%`bS8)NaEBF42[`TbQF?O6jgn-fID3?Cl,qFf==r#fQgO9#8Pe+*C.7oi$KaB4.VEK$ba\45p1d!CXCY:prb!A\>3O9[EpFK>qK:n%nOgb7PuJXcfFWn+<H,(NX6[>d%=+t"bP'Hil6mJmm%Y^B#_%`47VRN\7__*]#bG>8FV`qp1o9TWT9"If7-jPbLb.@GrqXi[Gj3JT%^4"u"p?/&&d.HrBVMGiT`!9/W+pe5=<WmD@$4.:dO^2]FU`0>&V2-)qDd/++jp>*?Pu^N^-g6O$DNl<d7Z-T?ite"SAX3`=d&W2j%^-GI"!X]''ZJ%r^%ZSd@iN6iq&=SZ`69!(W_'8f+paYn:E^!$U5QUWg,GPk4cH8`#.5E`4.Of%5c4$bH6C#bom(`[rQZrj-TK3Cq%9T2/-<3-[<%A,OB.N@WaftSc5+*9c&8h5:E.6VT:'2p\fW#EL-PsQOo(/6$$%k@hKncf==VJo$Re)"o4&Zu:d'_*n@RP?LI1.Ug_%'kF!b-M[f*Pt^L#S5t>a&4OkUbq19RS30hlRCkQ:'%d4*M_t4e9?kl%MF1*,V5"1NE8u#bHW(A0*.L*#>2#)"kYYi?M+2I+0-M]&%I(0ki^k4-<DhEF;eV,MU'<3Z"k,;[-@i_ti0rOBO7GbfrLW)33:kZ!8kU-P\X53m*+F4:";@@#g2D3_2[YiuM9$4L6kH;^ZW?W4&%i+s2amYU=*VfL22hGBoWJjBfsL6ihTJ1.JfLI=ScJtTClk8#R:!]\oXU&dDWrEl/$T0`a]C\+\_/dB]=\;Y1_6Zb`D5].DEMu!^q%(IW`ZnG)La_oW3^3XCW<Ui@,G[0o3VK<+hP0IYo;=BC;nX=D#"=b7c3CV22(n]:?=a]3jEA,&7Xk9(a239DoWJK7.6\/=dZ7qEQO%!9o&t.1C)N-3GOYL'?.?(cqc@T)*lU+&fP?,q=%-+G9##5_1Z`5[Xi_9a'3NitJL*JWc!h7)[>L79bn+A9&_t^e29Q??0Fo5T%&<%E,R5C1)+%`VZC'7iFFDD8?H%T.A:&*Z:#Z<Q+YO%X@@r]>GZn%0N].<0h)[fYXFe:&9<<ud)*"*`N1=(J[U#\ZUMs]:sQ+E&>C)V%nPj5JU-]ioS1q=%<b8UN_%KF)=oGf86@sn/Y:[+IihlOM`)GlO=r#s>lW*1>Md.(^.H2QNkW=Z=cPDpEWN:^k,",Ug"N46SpN3bG%ip7MT"JEXI!%<M:EUA_=,7..\f+M%[T/;<=2<M_`,Y3G]eF)]afd]dZBY6c"!S67Yc;/P<U?C^u"?7UPWPVp(JaDGbSR+1B5S5SC%:t(du8jC;iVCPmTf'>JR+pbkc5`'1(EI2;!p:%2q'2^lggqr[g25A9s"Rj!n'OlH3)r^/ue3?iumS:XNLnYb6Ips.l(O1Ba#8*Q%%d0cTKbVd;Fk[67P-o&T"?U/:MUjYNb+^gP;cr+i/KkOGV?@gMaLd3eR;BWhd8Id4a:I13U!MX7R"*iOh!:2!))B7cl&=:&`X")=`%1HTV`VhAI??CM*id]G0l%2Wn]$U#o*,;(2)7KZ,BOoW)P+e9m4AAk!+:%Y]G8lX5/\#YsiTV@%LH75npNXmB=,r\8u,11%qZZE#,%J-q43Gsn;9Ab\Dr'F-$A<!jbAmKslC6k6A"Z43ndd5/e9^_dVpH6`%q6&2W1agl7I!cWnOcob"+h-"+r81826cpIq*=a['I9GBbn%<OKe6>b=\\WnjJlXs"keL2;#G3._/"9he->n-EETJLQX^S_O`8[B!'(_D?X/@!*0`iECeJ)=t?,%Ru+=QA+<7SIKGU4V6G6ZOK>9%()^jX[WICs)k1hrUuujj(m7]6mE71Q"m?G:)'B'_,n'SNTC<GDc&G7n&KNpOr1;Gh,l?qI61@hap68?H=!B=00bG/Oos)_#%mVTI%-X(p1G]09c$.^Lu0<56_2DCgFQq9\B3jgmd0AIWLq%E$S-Lq-N1e\ZC2)TOjW)a3/@9">:o.UqLfL9F2jkOa+LY%Is$fGS=i3M6r%D.5OBd)%#Jj+qGB8CX=Mp]uHPbsfN!1+eFhE\s:1A,r2AeSl]7'`h!IRA`?T)CW,`WQR.Vf)d4l%Q5<sB52%16<F?3O,"9]_$(7e%N3q_.;gB>/MkHe24<:o,4ohT?%O)gJ4ak9!5T(?+R8#]FrE_B5SDL>48$KsD3^i<A%AQ-J>EVJ\Q\u.=ko*8%qWg9.C?B[p4/=SB%*XO`-,;*E;L!bH,@N$kX!<!_Z=%eff#RERs!/a*YhG,.Y;BkdcWa`RB.q7@::_AIXY%H[<Np9/if,1EAoIWRU[P/OE;Nbt`1_MgJ%B#\p8'h>Tk$G<2jF$/Tk"jrLH_*ucV=3lu:0s9ktOmhAhfO?%e3hYC:'5ETQLe'g0d1`J_=D!5[-E+jh&@;m@<ti%#5,9%ui_I_[%<NGDpKB/WR>n1^3:ea2]-s8WjZ`VuIDrrN$NZkTg8M:de+Itl+7uCJG6deL&KDJfc$2R?^iF]-ZK9.C)(]NL]aI@2US`I=qgc4;S%e\I6T$N>)l>je,Mn.SefOFN/C)Q!ff$?H7I:DGSI6)*VZl],Gbb`*?n:t-&dm]'T&iTVc"B)<6!-JE#?\u$aPadBGmEWr[7aMaa@%M@.>pg5Sbp83KDKCL>f1f9S+7/RdXKF:e6S1+3u&WR_mk&M,ZiX8-YiGfCRcMEk(?3fDtE5n$1.h2@.anp,a^XFk7"NZdCk8aoF$%'pL7EXq;tA^ap\fRK29JM\Os/<RBtM$:5C5%>*m48+*u;kfeUR%N;S]Y`>O#Es*hj.Cm:PTtuc5,*o-G)lQFR:IXJ/1eVu!i0-1K%DC2._On7*UK;7Z4G2YPm.6U_RaE9]Y^Q+GY<m)Win)dR<KC==1aR%I>;/%-UZF6jhdh+7K4,Ioi7g[<I/%:QhT0i1UCdU8:Lut/&%@VF%H=r8NrGP21N0p*GEp$+e@^N(CJ*.e2I,/F"\%;\<Q2:r]m6n^YBJ<bq@:C.%p3k#M`KI.5`<MO3&:EZod8<_cDN,hn_KB2;i%jdJJ1&2+*nP)gc0"lB_k@k;l:9!3e-GD7pWKJOc:''(Da22`T<#kL:S?<Tg<e(ojaY6!9%PNS5tO7<nqi,2VW!aR?b?NR6e$66Q;%#UD]NYJH'@)T4V"dDu;W6mM::N9dA9i(>=e0![DIPl,sT05>M_KKd>N*YBg#;HKM@D+N2ECd13:]0MH)UbF[;A>A5&gkr3M(P/2L%]^G:Qke#F>jH61Z;j"oF=qBO3d_Z51=W3;U4SXkA*J\U(8qe$GNKdg5=&s.EkR:Q"/&Yf9!1L=`JlWimJg/'0nK%Tq+8B)9PY_oZ%7e%Rn68%>nk(`<qX.'$B$UnF*:8Or[)t$9i1.WGSUj\%KL@Lg;kM72:l>D,r<!1klHOSpnK9f*44AAe(HY-(!n!m.PC*>]jard^G%/MN$F2d2F<Og5&g,B1/]GEQ#3SjIsZ"q-%O+M@k"h_aDN3D)C\!(h^^"\b^'b$m#FZrodFW8:i-Pbh=L#7]!;4cdD7,6FpN4%*D:%A>VX6'D*R_.sV"t\#2X8Cdrr5EAGI::dmq!6.68k&H"Jqj?J-`i9GGc18H+X$Gnt0L8)<`h"->pWe;KK17ECab^p;^64k*B>&_>"%nNiQd'/p>S>6]o4$uuAK(NlCiBnD<g/S/:W+nKZIVTl-WJfN4#!%EeUA3Z/'J/\O-pC=8q``nq`)?Gp.&kd/U8,*.^c]-a?Y6,-&%AJQi3hBNI1Q6GHi,Z$`3UkTm%.-a\a9L=[E5f%63.159L"h?Th[AKT`*MW94&i/S_TP?>m+D8LeNMj-e%<@k8:r>E`=gHa()'pAb%#V:Df?NkfnTWTXlTUL]D:u.9tPZ<$=CqFs&1Q3X\7I&6^;==#1bb"a1W>6ISWKSc3Cfd=<1a"(hgXI14\OQcLAY/t>ZURZuO48R1%\>#YMCqC=#_Fu1,j*dWcaOnKRqFJ.';;br&&rgOoSYks%[Qi2V$Xg4:;i"UtjrIcf@#nke)$8m,`W=TT&;PJTX("n6?pV4Y?IlGO%#eC3niT?Grf-r;q'm%.fl,s\pBb%/6e^(Bl#>:gcp@PO+0ooH)_:"EJi7[C2_oA%kM+'.k<FpSZKCIc'PuTYeP+9SD+G=bG]D&WE%K`C;2X>`m)ea72sn=`.YgaNL?KluR'9,"`W.S[^2-"(VL6\Ie>(d8=4)ZJK*$"?.?S9Rr.b@^tJ)+"0Z(M,05DWI#Fg_)pFN-5tf%nJOdn:K,1fPkJIaYFh58;cbIB&(je!IMDqk>8fU3>`:kKJ-ZAl?ZA:%con.Zcfj?&WGK=6l'Z1Kn;f+rNC:mKj;,ddCf%anCDL1t%Pd'9M@u`nb*-+,K`i%@>at`0*+qQ9BRoVBD%PCt@BXS4lYRCqPA2m[44ptU(5;b16b?R1`@e`VVHq"O((tR\KM<5*M@Ll6a*u<*b%I7=qNe)I'i$ZcpUD4>\BOO)*bk/\O>\WBP\?oA^n#a3k56%sW>"sO0d%Y?7Hi6"2hL':U7=JpXi5T>,*o>WSM`$[;_53lbMN%R:O%?&\&1HNM(*O:\s)O!TaEK^kiCT+T(-:0LV$imTtep)mr/m=2:#1??F[B[=jYc[\Mi+3tV1$WiZ76CcuaU[RX,q=+*1IuJ8o(Z%7D%&a\OMUs<F-BLbASk43<sGTa=qIMU>[9Rg/neq!)4QJJqI<eAnp6cr\*CJPl<jPAHMa5+7>D%"%c/bF'glsP'NX),;q*\Ok'4dBMo%V*cHMq<:)i!YVG&TJ.bZ(eqeuA`,m<=;j@2>RWhSf1ZV+H_s=rA!lH(0H$fpruIQH1Of/7Y"55:*9&8"ZC]Dol$+)%K)(,NUQu5E%*,l<NR!\"aWT#^>iYcJ.pQ.iITt*\*G*d?.-YSJ69U5DA+H>QY8h;A6MOJ(U&keJ9J:Ee5Z'YtM!O]-i)[!+m^ECBg.Hnp\"1\=]%l]eM7Wj).DOaW\ig7nlMmoCdN-;bo+dkMfhO,p59$S$BRi<0e"KQB=DQ%2d6-0/*+M#gjY-'5`uqR7tKEu)8&IVPa:U:a=kSuE@K%puVO5.e1_3nXjE\kGLtGk6D>tY36K>F[Yg>Z'toWi<OGm4>U,&8SNUM90Au/J#G!ibV/M$6Q=?QR:'_LT2p[/!W9j#$1saEXT#Og%)[!7"rOs]e?%(:SCX34Im&m<]"1\=]g0)f![/@!+s81<&[A'UA;4KP_BgoKr6_tW%J#T]E&p0$Li.1o15tFbIZ;EI;$@pD?C[`?=%KsdV[MR)BP'"/S'?A0ED_b`RN+(5%V<,P4@4/Q1n']_^QeX=NCWnW_)abG,EokN)RmB#K'7Q5l-*A]0)Ao/Hn$DY1E^pnVc[uAQl%1.m*tCI6ZMnjr8^UEI<P2J4I`g/_>tI=H#:G]3]qh`t`o3>YX9le4=;\s`f1Yr<G<ntGEC6B:9DJ&J=V65N-nXesp[d"<C<Gs$Uo%$$`Z\jDIEI:a.,&'K9XtksABaA8p_QWls*VPhipUc`+6^faR@X!:q*?h&2:iM_es$[Y,jWfR8G3TKrA9.NW_,+qd35+)t"Mg#&(%%)O5ZU6T275/Qi>L:_Xb4SigE@]A-oF%BAX(k?0g$+B6.?-V1jsf=aYSY0`,PXT8r-!(J4U,@_Y4S5A#F?-oOGP2W\,rT6FA5*s>!%r7_0D01o[K,>_im.Z+csAq1*g\-bT9"VtFaObCjmT*[(o/@*-:2TMaEr_V3;f*:_P!8AFV68`ihmDat5]@nDQZ&iJh/2XF[<7g:1%8Eppdrpd6r]k9?iZX&iL`arZ\."kNE/.3Tc)*'P97EZ<CBO+"BHn$LtEg3NJZP7Gqc7Z1g[MZXWNK;k`qsoTtoMb,%WGiLsS_3Bp%UIeo&P]P26#q_])8;B>K;!T&Q6rHpI+sEb-NG+9B/]tH<@:'3[&BG'/dmt0K$-OtlD'[]UQmT(&2`#9uH5ZWa)Z&F/!7F[FS4-W/%f,iR@d(KGk>;m2c4!%/"U-K6PpCZ6)nf9+_PoFdl!a7+\=>NSdTFt*e-!l@<a;[rK1D3Ze%Rmu0m4uu\.k(1KP!fn9coBOTLS5Zu%YeP[)"VuiqqLsf=84R`B3KbZj_%U#03`L6;SdVLpZWgO\VSjcs.beYmK*h4#ZLorNW7-6t5jcAi@&_+#P=!l]#>*Z@TK>VN]+V6L%?3#lH[9aQ343J20iJH(k@$7E1"[MX2jg7m)Pp#L\ohS+U8$Z3n='12%K`*I/=pNd_=+IfVD:T,+4+Y:$2UTl\05/a2;UW,KB#X.1%(V7(4'%OHoBf!#h-gM\%LkQhX;(+::mF.T5H8>Bc;4Q!JY@KjGH!YidH>0)R?:X\<B&/aTlS>,/Km)$7iD(oaN,C,)"dUhW&T(CW%5>],3$;e\:GCH3i"=:LcT[sgWRlaZc5m'=#eNu]I/"VeqgWW9spm+_R5XR%K=WeUe'^\!=A@GB9$Bp]M=XU"YH\lnd<d4^0[Bf-F%]A7.Y5*R&BAn>4&Eg1u#=Fbc4NE"Ou26sk6:73EjUG[+U93hhG=Z[&M;R1[1gD[=0#o^nd)_a.QIDUOjO:7IAW3KYIB0--lP=P-Y%m9>:M+t1:E"sp6No7PhuIM@Oc?l4K%j(R`u$_,'n,eM5$fuQIAfcZ'_0ictb:QMbk\[F^mIp\kr&dUpQ66M.="%<f\`6)DeSKCLL%bhUZq^%nVm9EsWOTOu\WLG$UobD##Z[YC50/AhYNi`H:1OM9a_RV/nYJ3m6b>OgERK([A',)_0a$"DNM_2Ae:3/5ef6nnIMYte;o%,E;XS;#:EmYg=F:=Dqpo/f1@$6:goT1DP8T\n5cSNP9#[8N3(]#sP*eHIIllm*-\1Rme\d.WoM3UF>]B"(FVic.9db'falEJ3D$%%F%@(f]m&[0hlVlZ6'56W'OX6gW>dfQ5hWEBEb(6*:=NnIW2f;:6'fEc*:-CPhB^=-@l%HBA4;ogY36b1akokA[MN$]0Mo_L1u^jH%+S=Z'NTSBLDVYYdMX6>sKE'M'[&>$=L19NnY`^+)Vf3F88F;YQG_jGB2&k2K;@CKj<nP7UONWFu<"TiWNS8QHYLSu^<gs=Oe5;sd%lIQb'):e]4!KRucd037F@0Li6@+@e]>_.%t]A>P)YQc^rU*&lNB$67E:,n]1".VC8%>:*7RsFXp6c0dPS\s\$`1OR[lZWVA`"kE"%a2+Vd1G%S;edQ>^@6c1o.Q0TAM4g6lb_H/#o]<GT-8\&"YN#i;+fauOD,`fU)`eJ%+=g'&2Kf\$5eh5?Xo>j.*97:3.9cis+re\E%"O\bjSlKnLc_9k]n=aE%XQZg9CMO6r?<?W(U#%lt:@g0hR)?obYUH!]+\j_n@i:UT6cmKhC?ZB;(F%f8$1,0_=sl#oi\XWi@c:E'%(h?R>L@/h#N[hhXZQLsT9eFJFg1T1QD2tF:4<iL@&CcnA%7C6&a`,F(mXF;7DXjrHXs)^gS&dQgR">Tn2=]1sZArU2*cU2)1kciZ%jX$DNV6-M5.k@+Ld!Q"5FpWgK4>*`'(YZ8"'KrOW$k@ETP1?V7!>X3/AW,p'=W4\5ACbecJaK?APio+g%[nOr[D&?p/F&V-qmPYP%7r=$mcZV:9*Gd(\_%t2LC0qX-I5nT/JKS;T].p!n,kg0FXh_qIhLGcl[s29,l\m/aCl65]iOj#e.Ls3$;TS._..rTY\0t!">$t<+%`HeaW/ZUl5K_fgpAM"Vi_a--pFN-TUfu+)p#o.:(Pp2#Dl'Z]&h7P&n'oM&u2KaceL"2Gk^mL'4M_YplcqMX\-O.G\M*_YP9$abU%CA'!Qii'7J#.-Ic=1EWdQVp1?JNU,)pp@(Ac#]hE?2M'1M6.[9Pu)l'GJ0eOJh--XB&3q1\!Ag=SW0_Y/L.Bo#^?o/Y)MY3BXtfT%=[W^q*s"\MLn+aNC-W5N<7K.6YME#so8"o`4.ok.0^2H$>O0kC'7h#nZ#N-1N"]feWM?/&3%eNU%[o$bp8BHTM%gFs$dDB&6JmJO%kfm=D^Ql>SRk4ACCR0%fnFp'G?q+IiOXfLh&+h5[]jYkHcdKSd2dKXUFYmK`TZUZu>&tbh1*Jof_RB+oLSZ\=98Mj;0;M:ASKjYJ%!CRl-<r,<<>aANffF_tDBY1au(-;#377YF2`INXOh_:tnXd;gMV*e9U%b+_DD#lfMJ1bN3bOV>EV:D>(kO]EAl(\d4`o3GKkfu)A%0c;QVJS%8k9l,e`[*[t\Z]QGY?%G0RW\0]V.Urb8/YI9(Xk:%*Ukl3&63@"^24c6AU%JEN18:4O@CnN6B(se`!#4ihGlj+oZIK)_%L2c/.Mk-N2Jq:S7M!VOkMO[Y[,$ROZ-edc\mU^D),2#l".f0e^\jNptm+T;c]q[jf"/NQKp,O=K2lLH"[K*Z9LF@sVoWb3?_nd^.%6O9auRSBIb&.W5k+BmJ3*j%lYU+W[gCpoW2V5',!A/J=U/'B5[?/"#1WlZA1qYf&6XVRtYQnS`[TPB!`^jsFsB]U252,!@F*WV%e%R.V[IBqnfHCi#m>13tH'(a%Jh7J*1j;`.VAJ*gIjd[][\WCWY,?X+\tSMLTV[kN#5PRsqRX-q^ddOj:bbqjQmK/O]IN:98?aFK"7%XaD'N]6b7A-Ut4P2MA,gl,e3&J;u8&7CB"MC9]03c6C!h;sCU>&s^QDe#c`1<%Go1h2D[lE'1F%Np:l[Kim"Y:JbAE2kkSN[SR?g%l$>c_i?QLsUWGo8a.)5!(NhtN#h:MGK/;0]J1`qDqL\BS1c-3qKJC\UI\eN,[WfUTUlCh4f%m^m]fZRD=DPE#fYlWG`'?1^[bR@;%'/np.)6)X!l"!8@fp$Vk73]+Cn?rTl.6qoilmMmrW15=MXY'3N\8d<oHfVlEdKS9&!\43HAm6+X:fWW-L05,#MH$,Xf\@mY39AP(%ertaEI2QXi5SH.X:c(UtW5^lR&[Ri\K3r\E3.nCj=?VT@1UgoW/oBH*X[_Vd\&Q[/nAi\Xlm*j`XeVf@m(ppfn0T&i@*@N[S=I8A%N6fZ5F0bb'#-adMm*h8m[H/14(G-asVWG08W8X*$M9oN\*pru2;<!0@V!3J*b-AW6J$?:B]((+=<h."C__\:a1OS8.lND[C_3JWC%f.<9Ci.W+4F.\E@dC<Od938R81=Rg)#]1TTZ:3KofOumP0l-DBAIlc&*_;]S6X(J*%2[Fh%%S!2\)t$">F/<r44"IpW3_L)L<paE%=X)R0<`ip`-UN%1IhjVJ];PL-eXVDc9AjYT'/kq>]kmD,>G)9;H/Q\+?UlgpZL<+Gm:@)[FC#8%QTiUO8]]sjZZ_m8&N0Ulf8-r3%DP9A+-J'X#J?Gj"CLchWl(rf*d;65q"Hiq1)cT$ecpignmDf,GCsDD>k$`(RpRJbIjqU"M=6_`/IiR^-R/dVMEPeiG$.+nt=i%+o%c==N&M4bEYcMkN]R*a'UHnsXj!n>^Vf\i-Y?Sbb*@c\qnQm!_r"QrI-6L7?<]W7.>F'"#s!23jYAI$1gT+KY25isFI-mV;C1Q%g7%0THVV2HBl<`,jL1aa2r!K@&^`Dt!ftJ!Z-oWSaD>/B%2"7q"**eU4"/)8TKlb/%Ro?:)TEkO"\6Jo5JOj`p*E.F0S^FTZ_'R:7V`%fFid^O@:P(FpPoSD;e`b*hp?5%n[J])iJ53X?:G,&.#2IZ-^)ne-$SO5'h(4V;_Js;Jf,4Xit:cg!h$of^&kdVhZ*;g6"*7<6EZQ%)q\dCi]p#/jJniN.'?#G62R"C.8"*JXT5]2n/@j'!m[NWJ<Kn^,3FEk^Qbkn6gp&m>Qn#K"NVnT8^sG@J'-re<k;q=,&2]8gFCbS%VrQc&:TN%#$2,'4b!C51H@+&<"Wbhh]1YS.0'(A<qfaNPd!p8dM(,-J3UV3$Xa\>*U)R\cK4?"6WQB]4Q_UT<0[kc^6pOCJJs`I2%TM!B=j;?]2KEXX5fV*Bq!L0PDT^ld:l^Ubfo_BF\F)TX4fCt4:O\lZVkpgCiKZ_f;2@1$/iY&lU+Sa"KS:QZll0PK@!tRrOEm/Oj%8P%?*hoI)oad"(kmJ#P$%VX<qBtXRtJK\HV/+:f)n'+FRH6-++@(Sp=k@H0Rkc8+O@E"EA(u9^rY5gjS_(]V8+u@/Y"?Kp@.q5YM%.1m-hK=LCS_Q0F<1,u_IK!i"UL'nrWLo&J47.?'C_DBo.>@\BC:2<f91jrQ?:m.[WLBG,F%E9-E9,9XCbbQu!*c8<X?oX-"-84[E%4Nsq3V\*Bt"8fET(r3F(+NB:Y\cDimh4iS-K3AB'[oZA(9M";%,K8ZjDG%Ms1@[I/SRo/am!+e2+3sHN%2%MD@A0ufS:%%R+rbCP%WD>44US&'n`X>4;<b/=aWH)gTL-b+!H*X0;%5m!Y[e'a[Hod%+#A<,nRr%#-CR/8M0U4Z\1W-$N=P4!3Y>Xm90[Q2HSV]V.*Gs.C%FU&"[+g!NRQ)b7sR9E\#@\gE[G_*.n%?5<M1Bl+52!b\ek2c'MX]`2_;n1`3!VX!7k`W"JRH^8)5=9kl!uA<=3uX\gnV/DfAU_"=%WI^]Vfh7Fq#_AK]]tV"qk[d<mR>g!BWM8NUK!a\`!jf7h*:==L'OC@p`!KO&Grmu!"M'3Zmqd9g:4eG4VX]lH5?kV6KS+h"d!4Zl%:.5%@Y'i'L?^1\1D9W@pRf^R1gp&<#bXaI0dLMP?'H.j\>^/eSkiJCaC:)<"6q0NsJVp_7&i^^p;Vct!OZ8hsE;"Nl#.kC@(?in_%<N9?(V$hG@FOJsmnd[U4\\'B8Q*I<2g=5ga_H`S+\MP\YV=jH:PigQd7o=1,b@\#!")!JAIKcq<YTI;%ljjHsMmgM'Q-:7=@r+!/%i`5Pk#G=YfckE2#[_3Q-UqAj3n=Q:MY1aSV:6;O=<HD#JG^9oC'5Q3RbWmE]Z4%:6:DCTV7("i('K3^HI):9`'JJRuq(/IR74&8P%=G!/3>KrtjcnK`DCttXihKbK62s5WP^Zi)&ZYA]$3FU0i2.Pm>1Pj;eRl29c#J;6@C$.(*,'jQbojd$HAe&3uri"+Q:Ri/a(I3Z4%<)uj)/9Ql'4om'pW`J*b$p4O!A,Hk5bJ8k'YjtI1;<J"o(N&t.O:dg\5maE=je4.R#<)*X4Qk?U^03c2"C5G?*nlJUkeLU:dXsq7%e.L(.SZ#IQp]N$:,OpL#6%n+5IWu:q6,Y^`nKO&!M[HaZLloeg`M/,;7$!_;"ZKqMOJb.7HgI@M/oKO<j/ok-2Kp#tE(6[]Fk#,5%^H)&QS==Z@)*@/kSTX@<H@XTe`J5GdFDan]C2E_Mn'/Mi-Eg&a'pdOB>4^\pYEVI!"JX9iem>Fl-t9XIA[_Q>'4e]m$#im@4@u9;%dthZ/k4NdZ4JT34i5h:enLPU760ZXM.'T;K%S_bsBSO320oK]n9]#ie[*_<hT0nOVTu/_'I[.d)2%YQ5,aj42!#?KeWKP-@"4k\d%9#MT9R/;,;g*@^K>(+S+prSthJ6NL0F^k^`JXit`*H02+QY(&1ZVp7NFSqr_9`VH+<o+m1JVj"[qLWo(&'RaH.m.c_TP)iqWlQ!S%=GY8"C?G.Zo;_>VIG3K&R8)QuRmWp'f,OgH1:EuR^qX9s.`^\5%,>E=N.YE4kYV'VUJ,'5'=hGOG6r[ABl:hRKZ#A(9*61+/IHO8%$51eq6A$R+ZUMM:F/q#lhX=7Ee'6P:2N<0T[_]ja)r`3qgc?NI`iO*(dqgdL>FDt:bh-Yg/NP6rIY,o+Fbo4ub;rW/TaNP`Q';.!%1Oeden+`F7k<-\kbqPr'!eWru#d>OGQM)u3P_aGHV(&?2mOIp3HS#IlP9;aiU6e6q[g-eMbtC@/@&3D3?E8a_1-#?G'S+Fsj/d((%/s62cG>TeFrUmZ9&Ej6p_)/0?Pkf[%nf:eM-:UVkj%M#S9Z5IdACc$ZW1iR.j.+cS8lulc>NH@VBOQN"Yo^V'Z('$]Vlu]HYl1\l%NLec%'99&DO>'Z9PX3Yf,]1*Kb\9@"'EfANk\Hb!Ye&c+LWi8+<-aU7gQ6R>6-tb.aHVYe;C+X_3d<HX/o,_q)2dVoSI0Dh*E&:;%?(!Q_JPDFT1Hl!.?qF%rA&>+!Oq=2kCl$.ca<.q2R=rFm'&`XU)2F$p=^!i5q]/^b9j*OCGu,LF\-JMrN(^sW#;bk2GM'nQB`J_c%)*P@`U*06l$g='M_88[>@mKPiC_QGW7T$B+Z.tM1UBV4QbQUE8B')4^ZAfmWTA-<hrVUc\K3.R]+WmI%2N[*38PP#'7']&4Q6^:&%BakuLM>,!3*"%jH@D1l;))L[)Ybsk1#6M9VBH+He:hp9!6RGCtG."=`bXOK6rAod00mf<M*XH,AY'NR4'8#E\ZW`I,(0HhI;8Jn7%6kJ3"_'MtNTQgKLMDRZP\^eP(Au`[,fXlZM7npN]>UM6k?e1n.b&0!HP\tRi,pit<35ssLl+A&`GS3Y#N3q#rOh_bF<(pH+-1DgG%M"Akqi`q72!K]"gW$<;qm?feegqJnD(N!hpN"1EAo!'/_8N3T!8;P)LlCgYp::;]9Pe5>-8^q9:`Y\cEeV5ZKcB!QsGtRnb%ukH2%a`JH@d$TQ?PpR_@!$UeI-QN8RFpK7Ng!D^4f\+<WPNsHQ&tS3`$q(qe(`1:M5U%n$@\:[\_Z7ii76W&OY:(gY>&PV&r^qe7c2!=h%WDqT,H_4RCqV@4IIW+\m&,3fp^Nnkg[o]oXQS\#9r-BU$&_<t)n5CSl*b$g]CjJbNm,%!,@`Z"O>ifr),u8u/VT&>t$[_Vs^:4'i%YCF1]rEZ%RqtVm\AV89U1CLi14:K0]QVeI*0nQ!RWJ)->_@3+tOWhkV%iWn+J3-(Ua8O/\E&OMSLLOIY8K+lfHlgL`mNWaai<&I(%2*1UmmOKKh!:#9lAOH#VN6IS'c+q[j,\eG)g2TBe7Y\!.B96dei%_Ys7b0OgL-!#ngN00C"CZ3_jSF,$e1idSmt9;YT\N'"H/n2c%eS65^2&ki$q](&>O59,>Jdo4TODDs9UR@aW]9Kl=NefMC&rt\*E+GmSA5$^a&lAb;d1R$eZ3!IJ<:'=T)Fsu:"f9`8""EDN6Q*O4%C4uoo]fh#=$""rGV"\Qp;0-IbK/KWH+>+FMR%C:\'?G6g,,<gM+UmQMeN+I!4>8Q)hi6uBa(;-ANFJ;iUuhp>D8.(o++gf%"$:h;%&cp,<.W3TMWd6DZ=c$rd:$db#\3$3KX7iifg\@]Tj#gQ2Rap<LGZerR;5'gE5^e36>oB/OF&6lE&G+7n@?@q7]4&Xji]>,".c.JT%9-XCh*3-Y;KNY5si!lF'"llmr@(<%Qp_fc=6?3:XpROqg3WL30b)jG1RJJR/OQI>]eS1[C3=4J<J[j!9PE*!s&`mY=auY6KU!an!%*L'0g]"A+L__BK5m92hf"jZ#[U)]uf>GT\s%&F\l2B0;E<U9B:AY&rk/hjTL7HekcD>!O3FX=aOBV6D6@3.'j*mHK,!"UmpC4nSd%B5J1hZ*1uh.m)*UBnI,L@T=gkoh$qYh+qGJE>5+&%)_=YU6d8j^^+IuZpH%2T[>1Yi3\UVMYW-EeoV5jOCK\L*kJ..I98Ig%`6?<%(Kg&=SN;,)A!aKr1Q,JhPAOSpH69E@:mc96fq-mT-UPG0r$]ujQk-:r4c[^I^m(dTZtP8&@+F30N8r)-;p!r._'GFj[dAbZN)i["%hkD`.`0)A23X1jO<4Ik:8C/bYO\I)*OXn]s."Y8f=E@"[-jHS[YL#!)L^S?aCq1LYC;<8g\mBe?HOqKRE]$[8`W6a)Ll@u5\gK\n%iXj?b>UZ+405](nfPIMUP\?CH"JsSAj;FN6^]F"e</nan@od&CnrP4kccTd>Rbm1jMAYosOnb.gDVl1+-l#]-6no5?+Bkf]MlD!C%0VJ`B0T(g6>?Fd+,XZ#_!`5bqK:69+KQpODd@hIHX2RMHBAcAGb'Fs%Y=!_7FepOug>TtXfof0c\XVmX5h6&8pnXac>1FOXoqFe@%W5X:=LY\>E1\"8;,c<L"80+3.K-QLc.1ioTGeo@9[+pohXWd-HgsQZ.Y0>k3"ai#tF<u>.=75k_gHU/VktaMb]`2r^j.j!5.300F%DS2.7&5@c@iKuls.J-Z2jgI\5RHmnC-DOt-G?':;#`=oB"(3n#(`n(W8<>1!<rGlfLEHfl!@4*XD-A=hRe[r0:G<E,cK%;,ecT%V%5k(Dm8(Ke<*QUHBN+_p?+eJe"R_B.q#$F5\=V.+HJ_iTk]4Z'bgs@Hj#f?j^0$kgG(H/?>M2#DgP#-(Wm'mGc[LSFS'rNd2o[RXV%5l+$,A$-NGScH(W(P/^YWG'RopbQC4SiINhOY@N:NO6+/P2u\$YVLa*l'*DeMc:M/B*g=$!7DU1ZfCViQ>mpdk<:cr6]gg.\6oW#%7QZ#G6!XRN%ZM%;r"A3//Up**L(F]9,sY&NKg?I4%L"8Lf`d>&_RtZg0fp&t=jkEuYX^YMWl0]*;@'WYhWs6aOfeN;5qMX9C4X<`%Ajg`]^5gVl4K4ln(Vn>S6_%ThUKBu>'J1hH"qNG/#$j0-q?5;d75ZBYnZ1YXlHq/q"a,P*MRjg7`-Ftc!!Wo!@JpGoGumq3PZVHY%ceseW'CstjSpj"XdP9?\-7t_c=h&UnRF.n*:nVI/X_u@t_Ps`N/r\DRX'Wk01)t)7`uN6$FBk^*Q\f3bKf:e-,mZK"OBZtPWKS-Q%3B3'\@LW0"EbGq4X;M(s1kT@+</N#cMnC\r8)+*XgX$n%T%>FBGMPVUW#T]3aOkgGc-?n#H_.#PfW0ZJi0iYcZ3ba:k6t:7iZ13V%]Y.6\7oD%Z#Ll]DRK_8MJH`>t_H:q4/HJ&k@OqtJ*L61+2MtS#(n>$FkjW)[<LdZmBf29=aj6[[Xf^8,138RQ\o;HZEour<?Lh6.%YX($&8B]+#BU)PF8i.@CB95<RL;JpEQPIf3S_iqfbFhpIK?G9Rc#LW1N]BVG:S@>!ggHF\XRh_q%Wi>]l:o/si)*VMd*T6+GD@!S%WUd,U.SO9f=$8[>`L(.L/3bXA`oM4P-[=*t[&KO_`.>fGZBSoW@g_'?jC-&*+;d&t:mc5abdo/AWYd%'G9L2lOJj%pnAN1g#YYj_%_J0pN:*(lhBu,af*M&U<BhC7>XhYW68#A1XfaP\YJM>@\cl"UNM1?u3kls%a@(hFd)iT0!h9Ur^oA[ZbOKlW$AspsRM`QESc*4hi%`]2.,B4]:)8T[=/rI0Ll*cK<MlqP&T:]4pN`#9`Ni&2S,gb9rCbP7[&A;*m[Jc$=/Ul:X;M5)(6R@;V:UTo&*1^KH+?Uos^g<IB!%XeI%C^)Ad:#]HQq]c/"lXiZBfY&<II5o@HsXEU@@V+`05&5mUmc-m0B:_GoIpne0[@,PhFQq0M_=B79:/?usPC+G6'8QesCb[+JO%1bfb):/GVaF.ST=O@6eJ]AX9EK@6)WgoZBNmRj*Wm$=-3OEq7q@"KK[@.?^l1[BU-d8+!kJ@a88c#?M[;D_.7RJ)8)1f[/$!@503%%MYk]0`\8'eD,l<rQWiOetTF0)Rqp5G)\>3lL/j%h$"H23cm^md;WF>PbAMgdn#C"Um/T69\<>Y9@uH0XJqJ)=(74[#&<gR>RjXC%OITdQL(G\.&>sMu\DAMJ]?@TW^l"sLAg:Lp<2'/VTYNZ;^'us.P_*R*!i;"@P_.DTNIk[XqGbEQQS`u!YU!-,3Q<BJjO=H;)3s21%p3-mFAu(/?\Nd*B(qUKe92lG7*CN6AD3ABdBN=OnXT]4X96i8SZdT^ds/`18Q0<o4`,(R04nN,hXXR%ST]jmU)DWZ&+^EUa)VU9F%)XO$+_9Q[,i&kJJ\XUk`F\=$LNo&e-o2=pB]iUsS[KL`GPc,(3YTXGX+H`nqG1RM1%4sb=cP\ke2/iS2C/jD7OG\qn'k9ak9`/Yu%`#KY&6XudXN\'l`0XJeCr1o^]A8`mi>UdsYX*F&X7k'I5a:IU,%P:roJg"<YXI#T"D]$Hf6c\RLWrc^Q1E-`S"P%Ju.kV,o\QaG6%9,d"j[AQAi8,D7sY+Z@m;A46k>Y2uQ3Yul^Yp>5AG&`]D]]Q\&KNR<NSa.Wu#GfJB$rAfr&_<*VMetL*h#Jc=grBUX"\$?Gbg=SS%g=A/^k@9.97X72YfMcg?*IK>>SjQ:$c&\Q)aVX53_jefDGN5d;$S(pp25sWW[IV6_s0Do31.IN"#&V_q8DM`%4b[$OU1Zn];:/[j%75(R\.C+Fe,:X&+U3bPs6jN`8;63g[LK/I2hWnp<OR`t^S_^gjkX+JAD9#\.iZmgX!3i-T'd/,aTWoSlL#$?;(Wb.7>O&[O'SsjB%WtWkmaU:XKVJ,>h4UF1$k#NmnDff3P_=`e!"5,WrEO9bf2nluup?1o"$3.ZfcHF?<JtZ&pLaR;u=p*ub)C3L$3B]EH*MV.7qkA<Q%<,-tHfSKGn<\pdufO!(o<8*ELRo6&`ol&b?([9?P7e<k2iN<kDRiTNon@BRM"Ci569;^p91gWP"+dc;n1rpb=ra>7B#$I6jh-J7U%WO&ib?:hQf@/1TRNaS>pdCWU?!C_c%Z`jESS_eA<#,u(-/[)iZB*aK+!HomAXp60rNb$8,7>A&qTrrVXU3N3U/scBdhAns*.Ke0C%\@e=![_*_Z%R[Igat)te3,U@[-i%Z&Q`#WCO/I3actO2b&@("bV50].\971D,\TU9[%Rs7kXNU_;ifInQHiG#Lo9rYhdI?N<hk*S%"CGh>.B^7^,/G*ilnb@\9m,Hi\URO'/@2T<F>9c-87aC$^l_M9f!H@F$6khYW"ejT<T;O;-B]tq;H;_K`Z7N0$;E!RPokZ0QpD_C%Y[kOMlpAWI!)^^c<,!oB]DBIAPID'u'U>j_NGG;FV>tI1:qIK0+5C-('9FUWe$t'*GGp:upTghs#adC@(=[AXq4UVA3Dp_%IRi1V%C-(Wu6q5HU-KStsPfXg#d^Ts8m8YEbPf@?D;"S7[\JI'5Zp@g")aOZ3]SZNLgB^5e@=0jHMMY/e]A;<Xe;FgeTUCJ0l=7l#NKMc.%as_bm]iY'Z+^fU0@e?/n'WS2\r\Sdu_&%cC#NJ5*Jd7h6/M0m^h,k*s=D$(KZ8,+`A99:9+G_2*+i"kOSEMTgn^/Co0>0/-=16?n%RShT9>%5`QPeEK$(l;22nR]V+ejl[l6l]3VAh9/rWh@,l[mfXV<9:-Z!%Wk*6T:+(l`_gicR.+"k=cnXn#>6q@Mp!'))9HOW$NU_%+^U%R@[@1SVfJPE;R8n^M@NKn4oo[IN'e%AnI`.m6X[5mCB\-c6u\tk(n-jE!+67'AStn(U]RY8d<Au"!,9psVX(!,d:aicLM:!N%i<Yl`oY\M=#Z,6gDK:S68I?mDd"[.l;3.`2ge8tNOKqRfF4%30:dD2s/$(NjOV9PZ,)obg'"!i0Kq<"SIiD@R@4ODTJsOIa/BY23%M\S"!2I+[Hm#K_8Vno1O*mcDL+@^/\<&0<i#-!(R_1+oY;&SV_;M`'Y<-!d)4f'E5K&*D:&cM2JV%F_q8pLPCa6=i^N'+49K!D5=%8sX&JJ,]B(\%dCgq;.)Q&'m8IM->n,XBCkE1nDue=)=h/8_^f3+4g@k"OS]ur-)S#dU3qh::dSF>bm]')<#=pWS-^I:OSVD>bMTn%JAn#2/"'_%@,5EA'9,XN6tJ&E)D&dV%M6P<Wg7bF6CEie,)Eei9!!Y0$L+sC(?SDmP&FtJBkO6%5J1te;m.Eu"[F5^\uY$,PbL)t%ArXo8ltSnZm;O\"/ap](U7t7*SlAR^iH*-tbtO/)_DKoD2ie/qj,A=RDn_\LWd8'Q_Y?TW7T4nm4!CgqF\NrJ,(Ij[GS40t,MOmk%N3FXkA/,hK1j.:7eW[1JKY$gt]K&0uoWG?o4HVYJZY^Bm5q$X;;F4%k>sT5Y>W"W@I6;@+ZLd,XAKWs`0rnec0$hVi+=hO\?(!3O%Eh=X:?71t=NKt_7o<FTVEO&8XDW'hZZpIAr8;bR%@Jd&_Zj/D6qEA3T@^6SXg"XsP\A(39`rdqL/IHJ)U\/?B)TBS?BQ-dXTnSI\%oI?7tEC`C+LLIQ+lGmF[EuJ'e&Yj2u;pR@(/IcqWks78iqLIWjemNe"!1'(nlb[a)g+&,u3eF<`:5fs,2_o$!JZ,u`CKId\6LJ?k%?2_H5ObU+t%Mquq'p@mT;A20_'5!t=UC*dfUXCTS>pT`TRU[ocMj'KS?L2&g[\uZ$N-5B,#6Q/G'auMLL/8MXH2[='0s_9EQN^2A%HKNlAQUA*9Q//j!:"FLh'XK^rWiLP-!kVBm&&&SR;tI6H]/o./e)t*pFO&_Y8lj`+]pd:$%r=R7T/WfXo2um\e1_4fT`0%:b)I(#%3iqKk5r7c[W,sshPaf+pa\eWp38/?1Wc3&p-a!e*Vf^sf[!"K#/d@s%Q2ATi1jaBH%!E/VB=g+BSb,4=I&@KGG]=T8^f;k*BO!H)%KR5VkO+PX0/o`,n#bZYL'$5bL`Q,ecc.dqho6,ls6u%=$*'qK&468&=68M&(&b;l\@>m39UH'A^]CG\4GS<4I[2;>gOVDsq0i=LX%pF1j;R3L9?]HNVRkM:O9pq(4-KmqukJ^JgL@G7hl>o6YB((8S!:)!XIjOQ'4\)DM)Hh0LReT=F:qD)Fs`rZ3>XiXldm(''l@`YSS%$,\bnoD]Loj`M"m9l1jXaW\NkMV2RNJ%EBDN#%D3/&M[.2d8=n;UWW3Q\T3$H4,?/[B'Q@JV$mTlcaHMf#>uthhTpSbtf,5IQ+f%%7G^jUInaPl/GtN2)-eYd?YmGJ7m\T^NhDH)[k/cP-HIQUfB/dJ'55^'<9kjOg_!gpWBTF`d-fU)RW>$lo87L46r2mtoPKQ?;c%7>%_LD"pKS9L1]'4W,g%kC!V^Lkk0b"Y$DB[^2iWRD4Z*ZWJ)NFhX>YE&*d"md\JPg"KT_\WHK:;41<&Zm`J=B$+U<LlM=TYL3.7Ugc%\hbY>_8XVgk?4@/Q])4Z,QPfNDU)#!OLP-KoTn\cW[Lu(!4%0h@S2SXa4$d$8u%t,iVR'dF(cdG=mKK.R%d.lZpuTZMFt/*jZG#;%GqC=7)Au$,6c`8a?]Du$&7a1_/L7*?8]r(Cnn?96co#u+a49F,P0ub:Hd[ct3A?abLXPmmPh?Wp@)"I*<=/'tQ%(PY]G_ZeN;1o-%OViK"kXb[A.H;ZQ3*)J@>c8GW2hO5RAnR62dI=e4-1o]gOB.*afgiB"N`or"/1JVn&<qrA.R]7oYG%<pP\V:,9-2*G$I,)UNk08a%n0/MYV^/+AA_7ko=@NM+W3.%;f35Dc&YBN'MK\oKZdG[:l@TkJJq;K7Pn5u\RhCs4[&Z$[\@4:c]q<$-#0CPY%5I=jLg##?!'F_$%S;%X@9FA0iKXVB5]PF=pK-,.$V"C37eb2@J11MF'YjH_3/0a^@%X#.__A51S>Ma/EF;TR>/^M9XG`K\K*$tY$FW@/4d5?8=1j=>i%Pl-u@cFTe`l.nuNX6WC3+lO37!__#e@[Lb/,+5".LO:&X<&O7QI/l_s@l7c,0*Ym^&mKAr1pQab##2;`(YH-qTp'7h.8bt4)D9$l%0p(_:1$>+-gbk+^WEohN7,k)K<'%CG/aAu6#6sK%TH?GfL(tmOW4-X`&5lAVU1m.)Vs!`ZXcKAbYCh"mIa%lT1-X+W(sM9,H3mar%>@;K1p?)XUg)#JifYMTE+.-rS/'6p3m@;KpZ`73P!HN>L8@;dZP8ONC17;?MZcb?pT_[op*X@dh*djARBW*gp-QCc1H:qs55e06O%4Hk1K%*Lu=eK?d'WdXG[@#Q=M3[!?QpFPGuM(!)RV@77tUGAm;lNjXM$6IpnXsqI>NLBTO]9[g^)G,s$oBCntq4>XRP`i/bJb81h%;B(<`5hn@ZCP"<,Z0;)9./IH,k!m!?R-*WXVN'Q+.V;klk#4]Cmr)t#-RLbM1#0/]C<bFSaGAD.AgWHo=biaq1[h1%O`;5#iWuID%!/*sE#bKI$eRsHIeo:kJs2Sc+`//@leSR2"H0h&fb5ab$*$+6Ydo7==VLgL]Pp=YkXGg+V2N1+X1cH_S_J"mQhDF<.<.ec!"BEcU%WJ97s[r4!BG(V:MERn'S4tHC^L:T?WXtbu,o;G]V9mr!L_gi*c)SQK0Ok++GX:4\sn2`,_@L`r_*<akK`4'DeMmXER_l3o4aJST!%KEEHJfhK2UQn6[tjuCj0fV.7tp>2AJ..+lVKeT6kMag2](bV7a[A"*]Fu)+1FQ`kKCguR"$D]i<\El`(C?h7K'M%A06eF(V(X1JC%$JjS>=`G"kYBbQ;dZtKs>eA:eg3S[Co"hpchbe16^)"pXjBt8Ak.OCl+Yi,h@eT5?j@kSL>!/7)$pel,X*h7[!Nef+9m,sSj$`f&%`eH;@]EiP"6Y!*s:IU?DaLBHNF[dk60VilJ!Ou!@dNqMlO0pYiAO1iQB7DjM0?mE$ar6Sg)b#T!Jrq.!.KCV8:/.I%5s*35C]8R9%4-R*<kc#12AE51<(\l8JKY!/5]:$T")7Z*M\!c<dOUCk#`FcAh&*9Lu?Y&>;S@+j.T"H1as-*-8Rl:%0'Pf"e>6`MSgY%u]76&:p%,]*h:.V8PZdP_84hK.pAkX;g2^MF3e+4Z7c"%[8_D(iX5[/`Qsq5T"QJVQs;4LVVKnZpE)*cCp'HRTnk[lQG)@Wt`oEE4+5\Im=.%>0pjaJ_bJ%I4);d0gmh'%`^bNebTr(/[5fI%)NZC?*/J3jWL`TeJgC?`%dkc3GKY.Z.]pn;\F]*r9B\&!QQpZ3"3CI@21%9jOH'2%/?mQg+%)0+D:#OQO9K<;VG"_h(`%$/LUHp@i^fEu2EeKN_0FYq8f),D@*-Q?oh6*fQHupg[uh"nB3L\?i`FI5J=10Em5WPr;ti7u%4jt$uPMs1"FCo0HkO.`"Hj?!O.a1!*N$>^LgL4Y)*'Cg*.Mdkfb$sh2<()D#bj[(m9+ND;TGDbU75hu81JfSD;]K3.$`aGJEC'J<%JfkKG$6$7jF[Oe7<pD,i#JS;a4_OQ>[4$#a'+074RA8[iMdo8(ap4\N/+Wm>RQ[,JNgVZ1?eiBnnUp^_n,9J=iTet,_o%8M2h$3p%)is7r4_[X(ZSr'F>dQC8-r$&a?s2%Y.b`l%,mRZ(%O49qIYbG<51(6&C#8QX2s\!hfs2J_=Xk7Men_M!q3jgk!2juChc/1Fd&]/<%iN^a0B2@c^;VUt,%0uH_9$tmKUE:DGR1IN,Zb(?X:h#!#R9"LkWT_"(bpXL5jC.=4)TUP]"F3P_!4<I,.0eJk:e";2d!,FV=%a#g%/fI8d?j(2CI_;kEfm1#]!D&J\JCk):TG[$p:p'Bo9Z^8%4:B_TKm<BC'cXYe!uROa54&rhM-XgZ)D>Lc>_$Q[Q@KO8[5uW)LoUmT%&BON@RjB@?jBiLpR6XHtd_8JDT/pqZ@Y)\PGm]gEfLsQuhGsLa#l1LS-lA6I#:q,U8dM1+K!DK:'\"?r"6T&d_0l<k<tI.tKAHfJ%@DdIXdNJfEa0D7ZFEMdG3odpM#l$=NZN/$de$%>#lmR19c+[AESi0:-W.p?/r@/M+=R13o@)8bS$_XN=n2']3I372E(m1m(M(BXk%UWrsPHUJa]-k'h[7/gkMW.Y.5akOI[9=dOuU2Usu?pDai;Qm<"XCUI>4]Zm\X%!PVa?n_c0G$_N!^K^M?O1J%3_g7:LL(]g%1dD)%LjhDG?u#Ja[T3V\=LlE`^f'm07uP^VP<H9UPQ#fBVK2W/H2ICmpp9)Q2i?n,pqHE#R#:?"i8h-uE\_@nH9^n`]k,P+6Sj$O.jjgZ%U*t-8SVqI^B[[g.!g6EuN/q[[!%NQD2%81V6^*`!0M\qDJ=8ZleUPM9=_ePc2C/D+R\6mY&nr<od`<<A$G(s73+h@H'<:M:Oa_eK%esnOu!G35Ubk)eJStnV5h;X,#2>";i=(:2"o_ON&NJ=C0FnY;6Otl\,,eigg2%7#mE<P_FfF`fWD*PhoLLQ4"e_C5lR<E`ecA):K%;.DqsO0k;U)iW3:-jWM6^7N:0BPmuDkJqjf;sA3,cp:U:hLS\u@o;:tP_0@lXC$L8;mt^D)$$KhXQp^RC*a(gOF<jlYdSq3`bLT%%mK?'O@q8L?]SAF:M.`O<a5]FJ[1%37H?TM%@h3D_"/[UX4DM7uW6r-*g,bj^"FA<=$-9\,7KKPZSQl,UeCKfC*i\X)<nF\N7M(:V%9?m0jY[VIDM/rPcc9P<`KM[(V+U*?O'/<C$)E$fbb=q,30uTeX71ela6@O[n]RdOU#HQ42&uo,H.ap6p[.8QCqj(#`GpGHa2#,%<%@^WqO7H5&Vj3Vk'hIKU@:;#%>7<B@8>$W/^eDr=iCHqo"3U[6h(M8SQkH(>B1m\?9ON;DAA@ERYc"G<%hr[dLgS6GV@qJiWh9oo0%B2gBiX@iplma3)NBS2FN=@UJbCRdis&_,YF60%VmNuF5,(IG&q\(X2%lh7(9:pr7h%KSOkHOXP.<q+m%)SPL,g$7'7\,u;F/Gpo'%8FS0PX76]nRa3[:Be'0c(V)mN:>]r%e`^_mBIe\u=Va)qB*/s/3DV2=Qo+B<TP0!gRJs4C=_Iq8fJ3fQr':R=J!ogZ5emurN(i3U%?40Rck`OF/Ab[Yl,VdSX"*G\-nhA[b!8pe"8s$lemZeo)$Zuc+dJepX?7](G%r2CR>kPn>hf!u[03u/2r8G7,*gj:]!f!C&Pm5cK%R3Hjf`>F#V8J)4g:@fjc:`#@!mM7m-AbKd[b#+!]d_/oBA1^8#T6$G_VR-=]=;5#_N[KENP`7"n.oAiZJdfe^\nl#RHc<"W0aqGd%:r.8W^tR^7Ho1oB`%hE0NM$9U;(i)n(?i@]#Xp<T7#p[SJsc+aAf`f`fL-*;.2&CO8[_DK;GteB_\t3@jrK&0[Re'n@Pb83<HT7e%7&+6.j4%'Q@qc#@i/$$F/hL&:8o3cBU^m-"^/1L/ON;"ABTOOE59Q!kJrZj9!&gjl!&h&kJ9X`h6LGc,)R\WTT?;l,:%6\&j!6h9%+g#Kt8DZC,jq]]P#UM*09ikHN7@-gDJAu(o\$pmXb"<U`p-=`5V*RIGX_!HW2iS]QfZGi=A/h2c1<A,;L*@E6'l)/Z(f0lHT.<+j%!>]p?pfoZh"K@+rFcm@jMHJO9<ec>/aAc;;UQ6H@#p)<](l`?CGGF,KB,%f*qJD'[febb5MWZ?S<0gE/lAO(:T;X.djLc*8H<s_H%KJe3MLg&4o(g[H1,",,a$E?`%="qG:U7p@]&EB?o)qom8MPu9S@MnT>'RBra.Z!'1HV\Yi:nnh%P6IrqX^3V,5n">NIE6,LL1392%"r$`51m[>BP1G>!J[U`#&Hi6BT[Am&S_tB9s0FU\njZS6C@31t3s2$U?uI'_BP_5i.Oh"t>9oJKbkU/Zp7r06c19@:0i2Xr+.+Lm%Lc_]/hD'>"Q25`;orL/drd@b6WKo(_6R#U=T8lG0"4ojs')dY`8!pEg,+J?OlOfDiU1$:"h2jgf6#+n'FEZY0<Zk6E7BFnkJHAF'%AW9Fo8f1a>3Ub8nn*ShPgUMgu([)t5@N\)iR()00SL6@_<e/RC:5lPU"`(5WU%UO/'IWnWmQ$'gp``ct*9>5mLt%Sm?=npJk6S^:%iPbM"hT)Z:d`5b!"s*SATfGR)@Am0,^kU-E5kA*WF[UQVeW1A<(l[.@i,=_k2oDYM3pN[;&*bR/Z_^i('o>8@U$"-?$%%?qj:I#A%X<SG=8B/a$N&!Y(?5l.?V#l#+4g>N*J79,qKieTl785Op8d_O.m]%RudW(D`Csm:0-k$D54nM*/kS_?ugfSll0IB*i!D4J%kI<Gc%'KB[b>0VnYYs\4W;'WAh&l6rXRIafGO1S(Z<0SHD`H6N:jJ1V$Mt_-jH.dRhFTk&A"/chVK[*%rSDb=cL2;O:M]%=$"!IRC&)d+t%d7m0SX3D9H0?jsMAIo]`C0>/)@)OM0lZVPIT(,32SXF1_eI^Bk!*CF8L3-P!1Y[jWa>0\6N$R"5.l8A$>6HVD@XM!5]]VHd]2b%%%-7u>#ACru`rnpn3Ig)bO]fKImiW*YB9]JNY,o3MJ-\e^5c]#7s!m#*r(q3/?'0N7iK43!$FAi<_MSKKVCug\2d,A^R+I<gKl"jR5%<T;le_s&_L!><ij.k`%D0$p;Wash4ID$<d25RVH1Fja4I":7N\a<!aj)SUTTOP16K$9%5X[T'></.\];T-fA+;js#FTqPnCDou`)%4TI@E-cu_71^#p'4EAXaiMaSNN8a9F<2S]J!;qRS5@qn\FWUa]ddIB;!k3eP!!)TnT_b.4JN\C3%*4"H"2TT1'(g02`6<T^R%C%&%b($H;Vb1e6d#<Y@/o<#Y9N,!%FrX26g'uLp8VP!gHIVNLGMf&^c.kc0M.Q/MErN,>M1Z>3\"e(fE[\2Gck?[9.86`9,\'J93o@1d%Bn5f;N$K`96u>r11^o.cD2+<f)6$C:!-3g^!2)+R/6q*d=L0kIFQX%S^N3sfY*7Yk623mJ/.h_;1A6oU7HsQVPZGl*[!qF]b3`ea%6ZJ`_!&9K6JIu9kRhX@cmqHJri8N?n.`Qq?lK-7igqJ11]i>Jm1fB;@?j@E\,I"]qRuCJcE4p#fI2:!C<:H[!<THcui4;mP.G58L%=c!%)lqamB@mXfZ!;iF37,2QmIRZcHTIN3t2#;`[6O">Zh,@7p3?mu;0L3R7&4M;(7UJ]/pj:Lc,46:qGq'[[d,5a=ff+LB7Vtko%l*A"r.Wo)5.!!Vb=+)ZTH!.>r.hWX0`?H>@H3JgEMqPqB8'q4'dG=/fLu4FA&7pZ"bnB#C-O;]ni)0=4/dQDC71bFX+Emih4^D4g%Gfsa,Uf'm="rF8Xe**+Cd,:"=?JfG+U$;mFpeXNJ":,)l<7Lp]c"2d:^aLZI]a:O0P@Y`DC`5Jm>d_Fp-VM0UG]^;$k-u_jTh%-m%-[,^hrlB&3B`G^#ghc!B9o?S*A]')FHre0W?EuiR^YBR<4:K^1ncuiiLP`(b*2=.Tc[$b/8Z;\Y`*e3?)BPBhK*uT5Ur'LO3S\SI%=IpZg@V'T._p/^1l:1i'EjL;F%md=Rh5Q5$&o(sBk_;7k]!7E[Ud)B"BpdQqJG7mhVO+5N'KONAeg2ReJ5Vq)a1I[q&.Z+Jb4hOd%F"3?a$@8WOqb29K`'K4FQo_+mhW-q!*/REMoI;?1+];OCeGj2!D1qgc*mq5)[P10BpJDd:ka5/,_.6G'`k7&l_:;q0UTG6*OE9r(%)L7J8Z\b@YJB66k(5\U:G7,Uoqfm\MCg6L++)j#%BUGS=1pFK72:;.\VP02YBRHI)5Ajn!Dj[S@0.WX8c6R'CVBoZCjuF``FC0!i%5a4YJ=k[S_(5Df^*L3&_<-4CQ'1@`&E]E!/e6l(*Jj;G@kY)EPV^fLk.pfPTJ`[#H!'YKOAf(!NnWK(N%3mSME/>,Q_VLq<_DDXf%-]%i?8^DLgBLXc`1g_/e8o(!Vi\X-oRaf]0p7e0)Ajmo)28`O0S"mtR/=Zh[9(iqLV9":.69?UPR,Yi9'(3SBE57*V1(oe:!m:bj%N"M!WP1nO#QH`VZ#(l=e*3LWBU1P"833#d4b<i@i0\>7I%=4I](aY9$7sG,8kdQ:#%$Kl/Yqj[GoZnTXZ2BAa?Mdf2T8Yso](H)4%gD`=8#YEq1DtE5g=e>*Km'hbNg`<#q4$,+LDUgB=;DacOVpI'qg^5LBrB$q?L];gk02&Q_e*\EPc=]A$[h$(GiVBPq!nD2=gHY_n%c2'(W>^ks&R7GhWEPCYj`JqJ'og)%@o5+DO\[,cf;qO=.<TQMq]KPX_G=kWBq.cKshgNeV7IF2PG`I8ILE8P$2d]JI;N6D,J!9.n%Q)i,WNVYW,X\LbhqRrFAT0.:-DDq8eA)j0M&ft9OAi!*Ik:3o!^M)MsA:3o*0Cmf%r:Z,B=T=%i<I`?Nm'L'rOjDbS^O@aCo\Hpm%EdN"Fm>(E$Wo$&;EI5B4gOjBehA>=Pro^07XSpk&[YR44?X+)5q`04R],`6l4>5*^?Ui@3pOohA+-0*Ue`:BZRn79l1Wd20-`3nL%B^7"6UVj^Wgmu#1`aef-rVYbg?KHfll-&slU*&5:o<]Q=9qEA+LOPC*K-%EjPG\$'UoA0Qe@=e9b($$)D5>ZnV4l,iYG85UC%_5$%DRPlbgVm\Yg=gkBO4t2'4R]2hk]iLKg2ZOAKFkVbqJXBoMg!c4V]@EdcG)Wm<uHm6D7t8eHLr:lmI^h~>%AI9_PrivateDataEnd